/*
 * "Hello World" example.
 *
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include <unistd.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"
#include "sys/alt_stdio.h"
#include <system.h>
#include <stdbool.h>
#include <alt_types.h>
#include <io.h>
#include <math.h>

float pwm_frequency = 10e3f;
float dim_period = 2.0f;

int main()
{
	alt_u32 current_value;
	alt_u32 per_base;
	per_base = 0x10001000;
	alt_u32 value;
	alt_u8 fade;
	fade = 1;
	value = 0;
	current_value=100;
	float pwm_period = 1.0f/pwm_frequency;
	alt_u64 dim_period_in_cycles = (alt_u64)(dim_period * (float)ALT_CPU_FREQ);
	alt_u64 pwm_period_in_cycles;
	alt_u64 cycle_counter = 1;
	float current_duty_cycle = fabs((cycle_counter % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);
	IOWR(LEDS_BASE,0,0x3FFFFFF);
	usleep (250000);
	printf ("Program running (UART)...\n");
	IOWR(per_base,1,0);

	while (1) {

//		union {
//		struct {
//		alt_u32 lo;
//		alt_u32 hi;
//		} parts;
//		alt_u64 raw;
//		} cnt;
//		cnt.parts.hi = IORD(per_base,1);
//		cnt.parts.lo = IORD(per_base,0);
//
//		alt_u64 count = (alt_u64)IORD(per_base,1) << (alt_u64)32;
//		count = count | (alt_u64)IORD(per_base,0);

		pwm_period_in_cycles = (alt_u64)(pwm_period * (float)ALT_CPU_FREQ);
		if((dim_period_in_cycles % (alt_u64)pwm_frequency) < (dim_period/2)) {
			current_duty_cycle = current_duty_cycle*(-.1);
			current_value -= 1;
			printf("dim\n");
			if(fade == 1) {
				IOWR(LEDS_BASE,0,0x0000000);
				fade = 0;
			} else {
				IOWR(LEDS_BASE,0,0x3FFFFFF);
				fade = 1;
			}

		}
		else if((dim_period_in_cycles % (alt_u64)pwm_frequency) >= (dim_period/2)) {
			current_duty_cycle = current_duty_cycle*(.1);
			current_value += 1;
			printf("br\n");
			if(fade == 1) {
				IOWR(LEDS_BASE,0,0x0000000);
				fade = 0;
			} else {
				IOWR(LEDS_BASE,0,0x3FFFFFF);
				fade = 1;
			}
		}
		IOWR(per_base,1,current_value);


//		printf ("%f\n", pwm_period_in_cycles);
//		printf ("%f\n", dim_period);
//		printf ("%X\n", hex);
//		IOWR(LEDS_BASE,0,hex);
//		usleep (250000);
//		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,current_duty_cycle);
//		usleep (250000);


	}
	return 0;
}
