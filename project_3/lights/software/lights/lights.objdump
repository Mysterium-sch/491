
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000091fc memsz 0x000091fc flags r-x
    LOAD off    0x0000a21c vaddr 0x0800921c paddr 0x0800ac90 align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x0000c704 vaddr 0x0800c704 paddr 0x0800c704 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008e80  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000158  080090c4  080090c4  0000a0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  0800921c  0800ac90  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0800c704  0800c704  0000c704  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0800c868  0800c868  0000bc90  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000bc90  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000d10  00000000  00000000  0000bcb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001b214  00000000  00000000  0000c9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000078f3  00000000  00000000  00027bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00008805  00000000  00000000  0002f4cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a74  00000000  00000000  00037cd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030e3  00000000  00000000  00039748  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bea8  00000000  00000000  0003c82b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000486d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001278  00000000  00000000  00048738  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004c386  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004c389  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004c395  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004c396  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004c397  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004c3a2  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004c3ad  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0004c3b8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002e  00000000  00000000  0004c3c3  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  0004c3f1  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003f3cb  00000000  00000000  00051568  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
080090c4 l    d  .rodata	00000000 .rodata
0800921c l    d  .rwdata	00000000 .rwdata
0800c704 l    d  .bss	00000000 .bss
0800c868 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 findfp.c
08003b34 l     F .text	00000008 __fp_unlock
08003b48 l     F .text	0000019c __sinit.part.1
08003ce4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0800921c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08006698 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
080067a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080067d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
08006ab0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08006b90 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08006c7c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08006e50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0800ac80 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08007270 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080073a4 l     F .text	00000034 alt_dev_reg
08009bf0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800768c l     F .text	0000020c altera_avalon_jtag_uart_irq
08007898 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800819c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08008610 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08008750 l     F .text	0000003c alt_get_errno
0800878c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800c73c g     O .bss	00000004 alt_instruction_exception_handler
080065e4 g     F .text	00000054 _isatty_r
08006d8c g     F .text	0000007c alt_main
0800ac54 g     O .rwdata	00000004 dim_period
080038fc g     F .text	000000c0 _puts_r
0800c768 g     O .bss	00000100 alt_irq
0800630c g     F .text	00000060 _lseek_r
0800ac90 g       *ABS*	00000000 __flash_rwdata_start
08004518 g     F .text	0000005c _gettimeofday_r
0800c868 g       *ABS*	00000000 __alt_heap_start
080058c0 g     F .text	0000005c __sseek
08003e84 g     F .text	00000010 __sinit
08003cec g     F .text	00000068 __sfmoreglue
08006e2c g     F .text	00000024 __malloc_unlock
0800ac50 g     O .rwdata	00000004 pwm_frequency
0800126c g     F .text	00000440 .hidden __divsf3
08004fac g     F .text	0000015c memmove
08003e6c g     F .text	00000018 _cleanup
080037a0 g     F .text	000000dc .hidden __gtdf2
080089a4 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08006588 g     F .text	0000005c _fstat_r
0800c704 g     O .bss	00000004 errno
0800583c g     F .text	00000008 __seofread
0800c728 g     O .bss	00000004 alt_argv
08012c50 g       *ABS*	00000000 _gp
08007240 g     F .text	00000030 usleep
08009a70 g     O .rwdata	00000180 alt_fd_list
080089c8 g     F .text	00000090 alt_find_dev
08004e64 g     F .text	00000148 memcpy
08003b3c g     F .text	0000000c _cleanup_r
080086d4 g     F .text	0000007c alt_io_redirect
080090c4 g       *ABS*	00000000 __DTOR_END__
080039bc g     F .text	00000014 puts
08008c94 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007a90 g     F .text	0000021c altera_avalon_jtag_uart_read
08000ce8 g     F .text	00000064 .hidden __udivsi3
08006aec g     F .text	000000a4 isatty
0800c714 g     O .bss	00000008 alt_timezone
0800372c g     F .text	00000074 .hidden __fixunsdfsi
08008c04 g     F .text	00000090 alt_icache_flush
0800c710 g     O .bss	00000004 __malloc_top_pad
08003ed4 g     F .text	000004bc __sfvwrite_r
08005794 g     F .text	00000054 _sbrk_r
08006528 g     F .text	00000060 _read_r
0800ac78 g     O .rwdata	00000004 alt_max_fd
08005b2c g     F .text	000000f0 _fclose_r
08005ea8 g     F .text	00000030 fflush
0800c70c g     O .bss	00000004 __malloc_max_sbrked_mem
08003410 g     F .text	00000110 .hidden __extendsfdf2
08001aa8 g     F .text	000008ac .hidden __adddf3
080006b8 g     F .text	00000538 .hidden __umoddi3
08006cb8 g     F .text	000000d4 lseek
0800ac58 g     O .rwdata	00000004 _global_impure_ptr
08005230 g     F .text	00000564 _realloc_r
0800c868 g       *ABS*	00000000 __bss_end
08008520 g     F .text	000000f0 alt_iic_isr_register
08007138 g     F .text	00000108 alt_tick
08003368 g     F .text	000000a8 .hidden __floatunsidf
08003ea4 g     F .text	00000018 __fp_lock_all
080084d4 g     F .text	0000004c alt_ic_irq_enabled
0800709c g     F .text	0000009c alt_alarm_stop
0800c738 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000d4 alt_irq_handler
08009a48 g     O .rwdata	00000028 alt_dev_null
08008154 g     F .text	00000048 alt_dcache_flush_all
0800387c g     F .text	00000080 .hidden __fixdfsi
0800ac90 g       *ABS*	00000000 __ram_rwdata_end
0800ac70 g     O .rwdata	00000008 alt_dev_list
080072ac g     F .text	000000f8 write
0800921c g       *ABS*	00000000 __ram_rodata_end
0800680c g     F .text	000000b0 fstat
08000d4c g     F .text	00000058 .hidden __umodsi3
0800c868 g       *ABS*	00000000 end
080075cc g     F .text	000000c0 altera_avalon_jtag_uart_init
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
080090c4 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
080036c8 g     F .text	00000064 .hidden __clzsi2
08007cac g     F .text	00000224 altera_avalon_jtag_uart_write
08003e94 g     F .text	00000004 __sfp_lock_acquire
08004d80 g     F .text	000000e4 memchr
08005ffc g     F .text	00000310 _free_r
08008f10 g     F .text	00000180 __call_exitprocs
0800ac60 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0800c730 g     O .bss	00000004 _alt_tick_rate
080039e8 g     F .text	00000064 rand
0800c734 g     O .bss	00000004 _alt_nticks
08006e8c g     F .text	000000fc read
08007410 g     F .text	00000058 alt_sys_init
08008df8 g     F .text	00000118 __register_exitproc
08007938 g     F .text	00000068 altera_avalon_jtag_uart_close
0800921c g       *ABS*	00000000 __ram_rwdata_start
080090c4 g       *ABS*	00000000 __ram_rodata_start
0800c740 g     O .bss	00000028 __malloc_current_mallinfo
08007468 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08008b60 g     F .text	000000a4 alt_get_fd
08007ffc g     F .text	00000158 alt_busy_sleep
08005ad8 g     F .text	00000054 _close_r
08008d7c g     F .text	0000007c memcmp
08007528 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800c868 g       *ABS*	00000000 __alt_stack_base
08007578 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800061c g     F .text	0000009c .hidden __floatundisf
08005984 g     F .text	00000154 __swsetup_r
08003d54 g     F .text	00000118 __sfp
08009640 g     O .rwdata	00000408 __malloc_av_
08003ea0 g     F .text	00000004 __sinit_lock_release
08002354 g     F .text	00000718 .hidden __muldf3
080057e8 g     F .text	00000054 __sread
08008a58 g     F .text	00000108 alt_find_file
080081d8 g     F .text	000000a4 alt_dev_llist_insert
08006e08 g     F .text	00000024 __malloc_lock
08006fec g     F .text	000000b0 sbrk
08005e4c g     F .text	0000005c _fflush_r
080068bc g     F .text	000001f4 gettimeofday
0800c704 g       *ABS*	00000000 __bss_start
08005108 g     F .text	00000128 memset
08000290 g     F .text	000002f0 main
0800c72c g     O .bss	00000004 alt_envp
0800c708 g     O .bss	00000004 __malloc_max_total_mem
080074c8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080039d0 g     F .text	00000018 srand
0800591c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08005c1c g     F .text	00000014 fclose
08003520 g     F .text	000001a8 .hidden __truncdfsf2
08004574 g     F .text	0000080c _malloc_r
08003ae4 g     F .text	00000050 time
0800ac7c g     O .rwdata	00000004 alt_errno
08004390 g     F .text	000000c4 _fwalk
08000580 g     F .text	0000009c .hidden __fixunssfdi
08000bf0 g     F .text	00000084 .hidden __divsi3
08005ed8 g     F .text	00000124 _malloc_trim_r
080090c4 g       *ABS*	00000000 __CTOR_END__
080016ac g     F .text	000003fc .hidden __mulsf3
080090c4 g       *ABS*	00000000 __flash_rodata_start
080090c4 g       *ABS*	00000000 __DTOR_LIST__
080073d8 g     F .text	00000038 alt_irq_init
08006f88 g     F .text	00000064 alt_release_fd
080090de g     O .rodata	00000100 .hidden __clz_tab
08008d30 g     F .text	00000014 atexit
08005924 g     F .text	00000060 _write_r
0800ac5c g     O .rwdata	00000004 _impure_ptr
0800c724 g     O .bss	00000004 alt_argc
08005c30 g     F .text	0000021c __sflush_r
080082dc g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08003ebc g     F .text	00000018 __fp_unlock_all
0800ac68 g     O .rwdata	00000008 alt_fs_list
0800c71c g     O .bss	00000008 alt_resettime
08000020 g       *ABS*	00000000 __ram_exceptions_start
08000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
08008370 g     F .text	00000050 alt_ic_isr_register
0800ac90 g       *ABS*	00000000 _edata
0800c868 g       *ABS*	00000000 _end
08000244 g       *ABS*	00000000 __ram_exceptions_end
080079a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08008448 g     F .text	0000008c alt_ic_irq_disable
08005844 g     F .text	0000007c __swrite
0800ac64 g     O .rwdata	00000004 __malloc_trim_threshold
08008d44 g     F .text	00000038 exit
08004454 g     F .text	000000c4 _fwalk_reent
08000c74 g     F .text	00000074 .hidden __modsi3
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08003e98 g     F .text	00000004 __sfp_lock_release
08009090 g     F .text	00000034 _exit
08007ed0 g     F .text	0000012c alt_alarm_start
08006638 g     F .text	00000060 .hidden __muldi3
0800636c g     F .text	000001bc __smakebuf_r
08003a4c g     F .text	00000098 strlen
08008850 g     F .text	00000154 open
080037a0 g     F .text	000000dc .hidden __gedf2
0800833c g     F .text	00000034 alt_icache_flush_all
0800ac8c g     O .rwdata	00000004 alt_priority_mask
080083c0 g     F .text	00000088 alt_ic_irq_enable
08002a6c g     F .text	000008fc .hidden __subdf3
0800ac84 g     O .rwdata	00000008 alt_alarm_list
0800827c g     F .text	00000060 _do_ctors
080066d4 g     F .text	000000d0 close
08000da4 g     F .text	000004c8 .hidden __addsf3
08006bf8 g     F .text	00000084 alt_load
08003e9c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	00820074 	movhi	r2,2049
 8000140:	10b1da04 	addi	r2,r2,-14488
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	00820074 	movhi	r2,2049
 8000158:	10b1da04 	addi	r2,r2,-14488
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	1105883a 	add	r2,r2,r4
 8000168:	10800104 	addi	r2,r2,4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	0001883a 	nop
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d0a6bb17 	ldw	r2,-25876(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d0a6bb17 	ldw	r2,-25876(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	e1bffe17 	ldw	r6,-8(fp)
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	1809883a 	mov	r4,r3
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000260:	d68b1414 	ori	gp,gp,11344
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 8000268:	10b1c114 	ori	r2,r2,50948

    movhi r3, %hi(__bss_end)
 800026c:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 8000270:	18f21a14 	ori	r3,r3,51304

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	8006bf80 	call	8006bf8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	8006d8c0 	call	8006d8c <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <main>:

float pwm_frequency = 10e3f;
float dim_period = 5.0f;

int main()
{
 8000290:	deffec04 	addi	sp,sp,-80
 8000294:	dfc01315 	stw	ra,76(sp)
 8000298:	df001215 	stw	fp,72(sp)
 800029c:	dc001115 	stw	r16,68(sp)
 80002a0:	df001204 	addi	fp,sp,72
	time_t t;
	srand((unsigned) time(&t));
 80002a4:	e0bffc04 	addi	r2,fp,-16
 80002a8:	1009883a 	mov	r4,r2
 80002ac:	8003ae40 	call	8003ae4 <time>
 80002b0:	1009883a 	mov	r4,r2
 80002b4:	80039d00 	call	80039d0 <srand>

	// global variables
	pwm_frequency = 10e3f;
 80002b8:	00918734 	movhi	r2,17948
 80002bc:	10900004 	addi	r2,r2,16384
 80002c0:	d0a00015 	stw	r2,-32768(gp)
	alt_u32 current_value;
	alt_u32 per_base;
	per_base = 0x10001000;
 80002c4:	00840034 	movhi	r2,4096
 80002c8:	10840004 	addi	r2,r2,4096
 80002cc:	e0bfef15 	stw	r2,-68(fp)
	alt_u64 cycles;
	current_value=1;
 80002d0:	00800044 	movi	r2,1
 80002d4:	e0bfee15 	stw	r2,-72(fp)
	float current_duty_cycle;

	// reset lights
	IOWR(LED_PWM_0_BASE,0,0x3F);
 80002d8:	00800fc4 	movi	r2,63
 80002dc:	0007883a 	mov	r3,zero
 80002e0:	18800035 	stwio	r2,0(r3)
	usleep (250000);
 80002e4:	01000134 	movhi	r4,4
 80002e8:	21342404 	addi	r4,r4,-12144
 80002ec:	80072400 	call	8007240 <usleep>
	printf ("Program running (UART)...\n");
 80002f0:	01020074 	movhi	r4,2049
 80002f4:	21243104 	addi	r4,r4,-28476
 80002f8:	80039bc0 	call	80039bc <puts>
	IOWR(per_base,1,0);
 80002fc:	e0bfef17 	ldw	r2,-68(fp)
 8000300:	10800104 	addi	r2,r2,4
 8000304:	0007883a 	mov	r3,zero
 8000308:	10c00035 	stwio	r3,0(r2)
		alt_u32 lo;
		alt_u32 hi;
		} parts;
		alt_u64 raw;
		} cnt;
		cnt.parts.hi = IORD(per_base,1);
 800030c:	e0bfef17 	ldw	r2,-68(fp)
 8000310:	10800104 	addi	r2,r2,4
 8000314:	10800037 	ldwio	r2,0(r2)
 8000318:	e0bffe15 	stw	r2,-8(fp)
		cnt.parts.lo = IORD(per_base,0);
 800031c:	e0bfef17 	ldw	r2,-68(fp)
 8000320:	10800037 	ldwio	r2,0(r2)
 8000324:	e0bffd15 	stw	r2,-12(fp)

		alt_u64 count = cnt.raw;
 8000328:	e0bffd17 	ldw	r2,-12(fp)
 800032c:	e0bff015 	stw	r2,-64(fp)
 8000330:	e0bffe17 	ldw	r2,-8(fp)
 8000334:	e0bff115 	stw	r2,-60(fp)

		// Change speed
		alt_u32 speed = IORD(KEY_BASE,0);
 8000338:	00840034 	movhi	r2,4096
 800033c:	10841004 	addi	r2,r2,4160
 8000340:	10800037 	ldwio	r2,0(r2)
 8000344:	e0bff215 	stw	r2,-56(fp)

		if(speed == 13) {
 8000348:	e0bff217 	ldw	r2,-56(fp)
 800034c:	10800358 	cmpnei	r2,r2,13
 8000350:	1000041e 	bne	r2,zero,8000364 <main+0xd4>
			pwm_frequency = 50e3f;
 8000354:	0091d0f4 	movhi	r2,18243
 8000358:	10940004 	addi	r2,r2,20480
 800035c:	d0a00015 	stw	r2,-32768(gp)
 8000360:	00000d06 	br	8000398 <main+0x108>
		} else if (speed == 11) {
 8000364:	e0bff217 	ldw	r2,-56(fp)
 8000368:	108002d8 	cmpnei	r2,r2,11
 800036c:	1000041e 	bne	r2,zero,8000380 <main+0xf0>
			pwm_frequency = 70e3f;
 8000370:	0091e274 	movhi	r2,18313
 8000374:	10ae0004 	addi	r2,r2,-18432
 8000378:	d0a00015 	stw	r2,-32768(gp)
 800037c:	00000606 	br	8000398 <main+0x108>
		}else if (speed == 7) {
 8000380:	e0bff217 	ldw	r2,-56(fp)
 8000384:	108001d8 	cmpnei	r2,r2,7
 8000388:	1000031e 	bne	r2,zero,8000398 <main+0x108>
			pwm_frequency = 90e3f;
 800038c:	0091ec34 	movhi	r2,18352
 8000390:	10b20004 	addi	r2,r2,-14336
 8000394:	d0a00015 	stw	r2,-32768(gp)
		}

		float pwm_period = 1.0f/pwm_frequency;
 8000398:	d0a00017 	ldw	r2,-32768(gp)
 800039c:	100b883a 	mov	r5,r2
 80003a0:	010fe034 	movhi	r4,16256
 80003a4:	800126c0 	call	800126c <__divsf3>
 80003a8:	1007883a 	mov	r3,r2
 80003ac:	e0fff315 	stw	r3,-52(fp)
		alt_u64 dim_period_in_cycles = (alt_u64)(dim_period * (float)ALT_CPU_FREQ);
 80003b0:	d0a00117 	ldw	r2,-32764(gp)
 80003b4:	01530ff4 	movhi	r5,19519
 80003b8:	296f0804 	addi	r5,r5,-17376
 80003bc:	1009883a 	mov	r4,r2
 80003c0:	80016ac0 	call	80016ac <__mulsf3>
 80003c4:	1007883a 	mov	r3,r2
 80003c8:	1805883a 	mov	r2,r3
 80003cc:	1009883a 	mov	r4,r2
 80003d0:	80005800 	call	8000580 <__fixunssfdi>
 80003d4:	1009883a 	mov	r4,r2
 80003d8:	180b883a 	mov	r5,r3
 80003dc:	e13ff415 	stw	r4,-48(fp)
 80003e0:	e17ff515 	stw	r5,-44(fp)
		alt_u64 pwm_period_in_cycles = (alt_u64)(pwm_period * (float)ALT_CPU_FREQ);
 80003e4:	01530ff4 	movhi	r5,19519
 80003e8:	296f0804 	addi	r5,r5,-17376
 80003ec:	e13ff317 	ldw	r4,-52(fp)
 80003f0:	80016ac0 	call	80016ac <__mulsf3>
 80003f4:	1007883a 	mov	r3,r2
 80003f8:	1805883a 	mov	r2,r3
 80003fc:	1009883a 	mov	r4,r2
 8000400:	80005800 	call	8000580 <__fixunssfdi>
 8000404:	1009883a 	mov	r4,r2
 8000408:	180b883a 	mov	r5,r3
 800040c:	e13ff615 	stw	r4,-40(fp)
 8000410:	e17ff715 	stw	r5,-36(fp)

		// calculate dim/bright leds
		current_duty_cycle = fabs((count % dim_period_in_cycles)*(-2.f/dim_period_in_cycles) + 1.0f);
 8000414:	e0bff017 	ldw	r2,-64(fp)
 8000418:	e0fff117 	ldw	r3,-60(fp)
 800041c:	e1bff417 	ldw	r6,-48(fp)
 8000420:	e1fff517 	ldw	r7,-44(fp)
 8000424:	1009883a 	mov	r4,r2
 8000428:	180b883a 	mov	r5,r3
 800042c:	80006b80 	call	80006b8 <__umoddi3>
 8000430:	1009883a 	mov	r4,r2
 8000434:	180b883a 	mov	r5,r3
 8000438:	2005883a 	mov	r2,r4
 800043c:	2807883a 	mov	r3,r5
 8000440:	1009883a 	mov	r4,r2
 8000444:	180b883a 	mov	r5,r3
 8000448:	800061c0 	call	800061c <__floatundisf>
 800044c:	1021883a 	mov	r16,r2
 8000450:	e13ff417 	ldw	r4,-48(fp)
 8000454:	e17ff517 	ldw	r5,-44(fp)
 8000458:	800061c0 	call	800061c <__floatundisf>
 800045c:	1007883a 	mov	r3,r2
 8000460:	180b883a 	mov	r5,r3
 8000464:	01300034 	movhi	r4,49152
 8000468:	800126c0 	call	800126c <__divsf3>
 800046c:	1007883a 	mov	r3,r2
 8000470:	1805883a 	mov	r2,r3
 8000474:	100b883a 	mov	r5,r2
 8000478:	8009883a 	mov	r4,r16
 800047c:	80016ac0 	call	80016ac <__mulsf3>
 8000480:	1007883a 	mov	r3,r2
 8000484:	1805883a 	mov	r2,r3
 8000488:	014fe034 	movhi	r5,16256
 800048c:	1009883a 	mov	r4,r2
 8000490:	8000da40 	call	8000da4 <__addsf3>
 8000494:	1009883a 	mov	r4,r2
 8000498:	2007883a 	mov	r3,r4
 800049c:	00a00034 	movhi	r2,32768
 80004a0:	10bfffc4 	addi	r2,r2,-1
 80004a4:	1884703a 	and	r2,r3,r2
 80004a8:	e0bff815 	stw	r2,-32(fp)
		cycles = (float)ALT_CPU_FREQ*current_duty_cycle*pwm_period;
 80004ac:	01530ff4 	movhi	r5,19519
 80004b0:	296f0804 	addi	r5,r5,-17376
 80004b4:	e13ff817 	ldw	r4,-32(fp)
 80004b8:	80016ac0 	call	80016ac <__mulsf3>
 80004bc:	1007883a 	mov	r3,r2
 80004c0:	1805883a 	mov	r2,r3
 80004c4:	e17ff317 	ldw	r5,-52(fp)
 80004c8:	1009883a 	mov	r4,r2
 80004cc:	80016ac0 	call	80016ac <__mulsf3>
 80004d0:	1007883a 	mov	r3,r2
 80004d4:	1805883a 	mov	r2,r3
 80004d8:	1009883a 	mov	r4,r2
 80004dc:	80005800 	call	8000580 <__fixunssfdi>
 80004e0:	1009883a 	mov	r4,r2
 80004e4:	180b883a 	mov	r5,r3
 80004e8:	e13ff915 	stw	r4,-28(fp)
 80004ec:	e17ffa15 	stw	r5,-24(fp)
		if((count % (alt_u64)pwm_period_in_cycles) < (cycles)) {
 80004f0:	e0bff017 	ldw	r2,-64(fp)
 80004f4:	e0fff117 	ldw	r3,-60(fp)
 80004f8:	e1bff617 	ldw	r6,-40(fp)
 80004fc:	e1fff717 	ldw	r7,-36(fp)
 8000500:	1009883a 	mov	r4,r2
 8000504:	180b883a 	mov	r5,r3
 8000508:	80006b80 	call	80006b8 <__umoddi3>
 800050c:	1009883a 	mov	r4,r2
 8000510:	180b883a 	mov	r5,r3
 8000514:	2005883a 	mov	r2,r4
 8000518:	2807883a 	mov	r3,r5
 800051c:	e13ffa17 	ldw	r4,-24(fp)
 8000520:	19000436 	bltu	r3,r4,8000534 <main+0x2a4>
 8000524:	e13ffa17 	ldw	r4,-24(fp)
 8000528:	20c00b1e 	bne	r4,r3,8000558 <main+0x2c8>
 800052c:	e13ff917 	ldw	r4,-28(fp)
 8000530:	1100092e 	bgeu	r2,r4,8000558 <main+0x2c8>
			current_value = 1;
 8000534:	00800044 	movi	r2,1
 8000538:	e0bfee15 	stw	r2,-72(fp)
			// choose one random LED
			//int led = rand()%26;

			// LED hex
			alt_u32 led_hex = 0x3FFFFFF;
 800053c:	00810034 	movhi	r2,1024
 8000540:	10bfffc4 	addi	r2,r2,-1
 8000544:	e0bffb15 	stw	r2,-20(fp)
			//led_hex = 1<<led;
			IOWR(LED_PWM_0_BASE,0,led_hex);
 8000548:	e0bffb17 	ldw	r2,-20(fp)
 800054c:	0007883a 	mov	r3,zero
 8000550:	18800035 	stwio	r2,0(r3)
 8000554:	00000406 	br	8000568 <main+0x2d8>
		}
		else {
			current_value = 0;
 8000558:	e03fee15 	stw	zero,-72(fp)
			IOWR(LED_PWM_0_BASE,0,0x0000000);
 800055c:	0007883a 	mov	r3,zero
 8000560:	0005883a 	mov	r2,zero
 8000564:	10c00035 	stwio	r3,0(r2)
		}
		IOWR(per_base,1,current_value);
 8000568:	e0bfef17 	ldw	r2,-68(fp)
 800056c:	10800104 	addi	r2,r2,4
 8000570:	1007883a 	mov	r3,r2
 8000574:	e0bfee17 	ldw	r2,-72(fp)
 8000578:	18800035 	stwio	r2,0(r3)
	}
 800057c:	003f6306 	br	800030c <main+0x7c>

08000580 <__fixunssfdi>:
 8000580:	defffc04 	addi	sp,sp,-16
 8000584:	dfc00315 	stw	ra,12(sp)
 8000588:	dc800215 	stw	r18,8(sp)
 800058c:	dc400115 	stw	r17,4(sp)
 8000590:	dc000015 	stw	r16,0(sp)
 8000594:	80034100 	call	8003410 <__extendsfdf2>
 8000598:	000d883a 	mov	r6,zero
 800059c:	01cf7c34 	movhi	r7,15856
 80005a0:	1009883a 	mov	r4,r2
 80005a4:	180b883a 	mov	r5,r3
 80005a8:	1025883a 	mov	r18,r2
 80005ac:	1823883a 	mov	r17,r3
 80005b0:	80023540 	call	8002354 <__muldf3>
 80005b4:	180b883a 	mov	r5,r3
 80005b8:	1009883a 	mov	r4,r2
 80005bc:	800372c0 	call	800372c <__fixunsdfsi>
 80005c0:	1009883a 	mov	r4,r2
 80005c4:	1021883a 	mov	r16,r2
 80005c8:	80033680 	call	8003368 <__floatunsidf>
 80005cc:	000d883a 	mov	r6,zero
 80005d0:	01d07c34 	movhi	r7,16880
 80005d4:	1009883a 	mov	r4,r2
 80005d8:	180b883a 	mov	r5,r3
 80005dc:	80023540 	call	8002354 <__muldf3>
 80005e0:	100d883a 	mov	r6,r2
 80005e4:	180f883a 	mov	r7,r3
 80005e8:	9009883a 	mov	r4,r18
 80005ec:	880b883a 	mov	r5,r17
 80005f0:	8002a6c0 	call	8002a6c <__subdf3>
 80005f4:	180b883a 	mov	r5,r3
 80005f8:	1009883a 	mov	r4,r2
 80005fc:	800372c0 	call	800372c <__fixunsdfsi>
 8000600:	8007883a 	mov	r3,r16
 8000604:	dfc00317 	ldw	ra,12(sp)
 8000608:	dc800217 	ldw	r18,8(sp)
 800060c:	dc400117 	ldw	r17,4(sp)
 8000610:	dc000017 	ldw	r16,0(sp)
 8000614:	dec00404 	addi	sp,sp,16
 8000618:	f800283a 	ret

0800061c <__floatundisf>:
 800061c:	defffc04 	addi	sp,sp,-16
 8000620:	00800834 	movhi	r2,32
 8000624:	dc000015 	stw	r16,0(sp)
 8000628:	dfc00315 	stw	ra,12(sp)
 800062c:	dc800215 	stw	r18,8(sp)
 8000630:	dc400115 	stw	r17,4(sp)
 8000634:	10bfffc4 	addi	r2,r2,-1
 8000638:	2021883a 	mov	r16,r4
 800063c:	1140052e 	bgeu	r2,r5,8000654 <__floatundisf+0x38>
 8000640:	2081ffcc 	andi	r2,r4,2047
 8000644:	10000326 	beq	r2,zero,8000654 <__floatundisf+0x38>
 8000648:	00be0004 	movi	r2,-2048
 800064c:	20a0703a 	and	r16,r4,r2
 8000650:	84020014 	ori	r16,r16,2048
 8000654:	2809883a 	mov	r4,r5
 8000658:	80033680 	call	8003368 <__floatunsidf>
 800065c:	000d883a 	mov	r6,zero
 8000660:	01d07c34 	movhi	r7,16880
 8000664:	180b883a 	mov	r5,r3
 8000668:	1009883a 	mov	r4,r2
 800066c:	80023540 	call	8002354 <__muldf3>
 8000670:	8009883a 	mov	r4,r16
 8000674:	1025883a 	mov	r18,r2
 8000678:	1823883a 	mov	r17,r3
 800067c:	80033680 	call	8003368 <__floatunsidf>
 8000680:	900d883a 	mov	r6,r18
 8000684:	880f883a 	mov	r7,r17
 8000688:	1009883a 	mov	r4,r2
 800068c:	180b883a 	mov	r5,r3
 8000690:	8001aa80 	call	8001aa8 <__adddf3>
 8000694:	1009883a 	mov	r4,r2
 8000698:	180b883a 	mov	r5,r3
 800069c:	80035200 	call	8003520 <__truncdfsf2>
 80006a0:	dfc00317 	ldw	ra,12(sp)
 80006a4:	dc800217 	ldw	r18,8(sp)
 80006a8:	dc400117 	ldw	r17,4(sp)
 80006ac:	dc000017 	ldw	r16,0(sp)
 80006b0:	dec00404 	addi	sp,sp,16
 80006b4:	f800283a 	ret

080006b8 <__umoddi3>:
 80006b8:	defff404 	addi	sp,sp,-48
 80006bc:	df000a15 	stw	fp,40(sp)
 80006c0:	dc400315 	stw	r17,12(sp)
 80006c4:	dc000215 	stw	r16,8(sp)
 80006c8:	dfc00b15 	stw	ra,44(sp)
 80006cc:	ddc00915 	stw	r23,36(sp)
 80006d0:	dd800815 	stw	r22,32(sp)
 80006d4:	dd400715 	stw	r21,28(sp)
 80006d8:	dd000615 	stw	r20,24(sp)
 80006dc:	dcc00515 	stw	r19,20(sp)
 80006e0:	dc800415 	stw	r18,16(sp)
 80006e4:	2021883a 	mov	r16,r4
 80006e8:	2823883a 	mov	r17,r5
 80006ec:	2839883a 	mov	fp,r5
 80006f0:	38003c1e 	bne	r7,zero,80007e4 <__umoddi3+0x12c>
 80006f4:	3027883a 	mov	r19,r6
 80006f8:	2029883a 	mov	r20,r4
 80006fc:	2980512e 	bgeu	r5,r6,8000844 <__umoddi3+0x18c>
 8000700:	00bfffd4 	movui	r2,65535
 8000704:	11809a36 	bltu	r2,r6,8000970 <__umoddi3+0x2b8>
 8000708:	01003fc4 	movi	r4,255
 800070c:	2189803a 	cmpltu	r4,r4,r6
 8000710:	200890fa 	slli	r4,r4,3
 8000714:	3104d83a 	srl	r2,r6,r4
 8000718:	00c20074 	movhi	r3,2049
 800071c:	18e43784 	addi	r3,r3,-28450
 8000720:	1885883a 	add	r2,r3,r2
 8000724:	10c00003 	ldbu	r3,0(r2)
 8000728:	00800804 	movi	r2,32
 800072c:	1909883a 	add	r4,r3,r4
 8000730:	1125c83a 	sub	r18,r2,r4
 8000734:	90000526 	beq	r18,zero,800074c <__umoddi3+0x94>
 8000738:	8ca2983a 	sll	r17,r17,r18
 800073c:	8108d83a 	srl	r4,r16,r4
 8000740:	34a6983a 	sll	r19,r6,r18
 8000744:	84a8983a 	sll	r20,r16,r18
 8000748:	2478b03a 	or	fp,r4,r17
 800074c:	982ed43a 	srli	r23,r19,16
 8000750:	e009883a 	mov	r4,fp
 8000754:	9dbfffcc 	andi	r22,r19,65535
 8000758:	b80b883a 	mov	r5,r23
 800075c:	8000d4c0 	call	8000d4c <__umodsi3>
 8000760:	e009883a 	mov	r4,fp
 8000764:	b80b883a 	mov	r5,r23
 8000768:	102b883a 	mov	r21,r2
 800076c:	8000ce80 	call	8000ce8 <__udivsi3>
 8000770:	a806943a 	slli	r3,r21,16
 8000774:	a008d43a 	srli	r4,r20,16
 8000778:	b085383a 	mul	r2,r22,r2
 800077c:	20c8b03a 	or	r4,r4,r3
 8000780:	2080032e 	bgeu	r4,r2,8000790 <__umoddi3+0xd8>
 8000784:	24c9883a 	add	r4,r4,r19
 8000788:	24c00136 	bltu	r4,r19,8000790 <__umoddi3+0xd8>
 800078c:	20811036 	bltu	r4,r2,8000bd0 <__umoddi3+0x518>
 8000790:	20abc83a 	sub	r21,r4,r2
 8000794:	b80b883a 	mov	r5,r23
 8000798:	a809883a 	mov	r4,r21
 800079c:	8000d4c0 	call	8000d4c <__umodsi3>
 80007a0:	1023883a 	mov	r17,r2
 80007a4:	b80b883a 	mov	r5,r23
 80007a8:	a809883a 	mov	r4,r21
 80007ac:	8000ce80 	call	8000ce8 <__udivsi3>
 80007b0:	8822943a 	slli	r17,r17,16
 80007b4:	b085383a 	mul	r2,r22,r2
 80007b8:	a0ffffcc 	andi	r3,r20,65535
 80007bc:	1c46b03a 	or	r3,r3,r17
 80007c0:	1880042e 	bgeu	r3,r2,80007d4 <__umoddi3+0x11c>
 80007c4:	1cc7883a 	add	r3,r3,r19
 80007c8:	1cc00236 	bltu	r3,r19,80007d4 <__umoddi3+0x11c>
 80007cc:	1880012e 	bgeu	r3,r2,80007d4 <__umoddi3+0x11c>
 80007d0:	1cc7883a 	add	r3,r3,r19
 80007d4:	1885c83a 	sub	r2,r3,r2
 80007d8:	1484d83a 	srl	r2,r2,r18
 80007dc:	0007883a 	mov	r3,zero
 80007e0:	00004f06 	br	8000920 <__umoddi3+0x268>
 80007e4:	29c04c36 	bltu	r5,r7,8000918 <__umoddi3+0x260>
 80007e8:	00bfffd4 	movui	r2,65535
 80007ec:	11c0582e 	bgeu	r2,r7,8000950 <__umoddi3+0x298>
 80007f0:	00804034 	movhi	r2,256
 80007f4:	10bfffc4 	addi	r2,r2,-1
 80007f8:	11c0e736 	bltu	r2,r7,8000b98 <__umoddi3+0x4e0>
 80007fc:	01000404 	movi	r4,16
 8000800:	3904d83a 	srl	r2,r7,r4
 8000804:	00c20074 	movhi	r3,2049
 8000808:	18e43784 	addi	r3,r3,-28450
 800080c:	1885883a 	add	r2,r3,r2
 8000810:	14c00003 	ldbu	r19,0(r2)
 8000814:	00c00804 	movi	r3,32
 8000818:	9927883a 	add	r19,r19,r4
 800081c:	1ce9c83a 	sub	r20,r3,r19
 8000820:	a000581e 	bne	r20,zero,8000984 <__umoddi3+0x2cc>
 8000824:	3c400136 	bltu	r7,r17,800082c <__umoddi3+0x174>
 8000828:	8180eb36 	bltu	r16,r6,8000bd8 <__umoddi3+0x520>
 800082c:	8185c83a 	sub	r2,r16,r6
 8000830:	89e3c83a 	sub	r17,r17,r7
 8000834:	8089803a 	cmpltu	r4,r16,r2
 8000838:	8939c83a 	sub	fp,r17,r4
 800083c:	e007883a 	mov	r3,fp
 8000840:	00003706 	br	8000920 <__umoddi3+0x268>
 8000844:	3000041e 	bne	r6,zero,8000858 <__umoddi3+0x1a0>
 8000848:	000b883a 	mov	r5,zero
 800084c:	01000044 	movi	r4,1
 8000850:	8000ce80 	call	8000ce8 <__udivsi3>
 8000854:	1027883a 	mov	r19,r2
 8000858:	00bfffd4 	movui	r2,65535
 800085c:	14c0402e 	bgeu	r2,r19,8000960 <__umoddi3+0x2a8>
 8000860:	00804034 	movhi	r2,256
 8000864:	10bfffc4 	addi	r2,r2,-1
 8000868:	14c0cd36 	bltu	r2,r19,8000ba0 <__umoddi3+0x4e8>
 800086c:	00800404 	movi	r2,16
 8000870:	9886d83a 	srl	r3,r19,r2
 8000874:	01020074 	movhi	r4,2049
 8000878:	21243784 	addi	r4,r4,-28450
 800087c:	20c7883a 	add	r3,r4,r3
 8000880:	18c00003 	ldbu	r3,0(r3)
 8000884:	1887883a 	add	r3,r3,r2
 8000888:	00800804 	movi	r2,32
 800088c:	10e5c83a 	sub	r18,r2,r3
 8000890:	9000901e 	bne	r18,zero,8000ad4 <__umoddi3+0x41c>
 8000894:	982cd43a 	srli	r22,r19,16
 8000898:	8ce3c83a 	sub	r17,r17,r19
 800089c:	9d7fffcc 	andi	r21,r19,65535
 80008a0:	b00b883a 	mov	r5,r22
 80008a4:	8809883a 	mov	r4,r17
 80008a8:	8000d4c0 	call	8000d4c <__umodsi3>
 80008ac:	8809883a 	mov	r4,r17
 80008b0:	b00b883a 	mov	r5,r22
 80008b4:	1021883a 	mov	r16,r2
 80008b8:	8000ce80 	call	8000ce8 <__udivsi3>
 80008bc:	8006943a 	slli	r3,r16,16
 80008c0:	a008d43a 	srli	r4,r20,16
 80008c4:	1545383a 	mul	r2,r2,r21
 80008c8:	20c8b03a 	or	r4,r4,r3
 80008cc:	2080042e 	bgeu	r4,r2,80008e0 <__umoddi3+0x228>
 80008d0:	24c9883a 	add	r4,r4,r19
 80008d4:	24c00236 	bltu	r4,r19,80008e0 <__umoddi3+0x228>
 80008d8:	2080012e 	bgeu	r4,r2,80008e0 <__umoddi3+0x228>
 80008dc:	24c9883a 	add	r4,r4,r19
 80008e0:	20a1c83a 	sub	r16,r4,r2
 80008e4:	b00b883a 	mov	r5,r22
 80008e8:	8009883a 	mov	r4,r16
 80008ec:	8000d4c0 	call	8000d4c <__umodsi3>
 80008f0:	1023883a 	mov	r17,r2
 80008f4:	b00b883a 	mov	r5,r22
 80008f8:	8009883a 	mov	r4,r16
 80008fc:	8000ce80 	call	8000ce8 <__udivsi3>
 8000900:	8822943a 	slli	r17,r17,16
 8000904:	1545383a 	mul	r2,r2,r21
 8000908:	a53fffcc 	andi	r20,r20,65535
 800090c:	a446b03a 	or	r3,r20,r17
 8000910:	18bfb02e 	bgeu	r3,r2,80007d4 <__umoddi3+0x11c>
 8000914:	003fab06 	br	80007c4 <__umoddi3+0x10c>
 8000918:	2005883a 	mov	r2,r4
 800091c:	2807883a 	mov	r3,r5
 8000920:	dfc00b17 	ldw	ra,44(sp)
 8000924:	df000a17 	ldw	fp,40(sp)
 8000928:	ddc00917 	ldw	r23,36(sp)
 800092c:	dd800817 	ldw	r22,32(sp)
 8000930:	dd400717 	ldw	r21,28(sp)
 8000934:	dd000617 	ldw	r20,24(sp)
 8000938:	dcc00517 	ldw	r19,20(sp)
 800093c:	dc800417 	ldw	r18,16(sp)
 8000940:	dc400317 	ldw	r17,12(sp)
 8000944:	dc000217 	ldw	r16,8(sp)
 8000948:	dec00c04 	addi	sp,sp,48
 800094c:	f800283a 	ret
 8000950:	04c03fc4 	movi	r19,255
 8000954:	99c9803a 	cmpltu	r4,r19,r7
 8000958:	200890fa 	slli	r4,r4,3
 800095c:	003fa806 	br	8000800 <__umoddi3+0x148>
 8000960:	00803fc4 	movi	r2,255
 8000964:	14c5803a 	cmpltu	r2,r2,r19
 8000968:	100490fa 	slli	r2,r2,3
 800096c:	003fc006 	br	8000870 <__umoddi3+0x1b8>
 8000970:	00804034 	movhi	r2,256
 8000974:	10bfffc4 	addi	r2,r2,-1
 8000978:	11808b36 	bltu	r2,r6,8000ba8 <__umoddi3+0x4f0>
 800097c:	01000404 	movi	r4,16
 8000980:	003f6406 	br	8000714 <__umoddi3+0x5c>
 8000984:	34c4d83a 	srl	r2,r6,r19
 8000988:	3d0e983a 	sll	r7,r7,r20
 800098c:	8cf8d83a 	srl	fp,r17,r19
 8000990:	8d10983a 	sll	r8,r17,r20
 8000994:	38aab03a 	or	r21,r7,r2
 8000998:	a82cd43a 	srli	r22,r21,16
 800099c:	84e2d83a 	srl	r17,r16,r19
 80009a0:	e009883a 	mov	r4,fp
 80009a4:	b00b883a 	mov	r5,r22
 80009a8:	8a22b03a 	or	r17,r17,r8
 80009ac:	3524983a 	sll	r18,r6,r20
 80009b0:	8000d4c0 	call	8000d4c <__umodsi3>
 80009b4:	e009883a 	mov	r4,fp
 80009b8:	b00b883a 	mov	r5,r22
 80009bc:	102f883a 	mov	r23,r2
 80009c0:	8000ce80 	call	8000ce8 <__udivsi3>
 80009c4:	100d883a 	mov	r6,r2
 80009c8:	b808943a 	slli	r4,r23,16
 80009cc:	aa3fffcc 	andi	r8,r21,65535
 80009d0:	8804d43a 	srli	r2,r17,16
 80009d4:	41af383a 	mul	r23,r8,r6
 80009d8:	8520983a 	sll	r16,r16,r20
 80009dc:	1104b03a 	or	r2,r2,r4
 80009e0:	15c0042e 	bgeu	r2,r23,80009f4 <__umoddi3+0x33c>
 80009e4:	1545883a 	add	r2,r2,r21
 80009e8:	30ffffc4 	addi	r3,r6,-1
 80009ec:	1540742e 	bgeu	r2,r21,8000bc0 <__umoddi3+0x508>
 80009f0:	180d883a 	mov	r6,r3
 80009f4:	15efc83a 	sub	r23,r2,r23
 80009f8:	b00b883a 	mov	r5,r22
 80009fc:	b809883a 	mov	r4,r23
 8000a00:	d9800115 	stw	r6,4(sp)
 8000a04:	da000015 	stw	r8,0(sp)
 8000a08:	8000d4c0 	call	8000d4c <__umodsi3>
 8000a0c:	b00b883a 	mov	r5,r22
 8000a10:	b809883a 	mov	r4,r23
 8000a14:	1039883a 	mov	fp,r2
 8000a18:	8000ce80 	call	8000ce8 <__udivsi3>
 8000a1c:	da000017 	ldw	r8,0(sp)
 8000a20:	e038943a 	slli	fp,fp,16
 8000a24:	100b883a 	mov	r5,r2
 8000a28:	4089383a 	mul	r4,r8,r2
 8000a2c:	8a3fffcc 	andi	r8,r17,65535
 8000a30:	4710b03a 	or	r8,r8,fp
 8000a34:	d9800117 	ldw	r6,4(sp)
 8000a38:	4100042e 	bgeu	r8,r4,8000a4c <__umoddi3+0x394>
 8000a3c:	4551883a 	add	r8,r8,r21
 8000a40:	10bfffc4 	addi	r2,r2,-1
 8000a44:	45405a2e 	bgeu	r8,r21,8000bb0 <__umoddi3+0x4f8>
 8000a48:	100b883a 	mov	r5,r2
 8000a4c:	300c943a 	slli	r6,r6,16
 8000a50:	91ffffcc 	andi	r7,r18,65535
 8000a54:	9004d43a 	srli	r2,r18,16
 8000a58:	314cb03a 	or	r6,r6,r5
 8000a5c:	317fffcc 	andi	r5,r6,65535
 8000a60:	300cd43a 	srli	r6,r6,16
 8000a64:	29d3383a 	mul	r9,r5,r7
 8000a68:	288b383a 	mul	r5,r5,r2
 8000a6c:	31cf383a 	mul	r7,r6,r7
 8000a70:	4806d43a 	srli	r3,r9,16
 8000a74:	4111c83a 	sub	r8,r8,r4
 8000a78:	29cb883a 	add	r5,r5,r7
 8000a7c:	194b883a 	add	r5,r3,r5
 8000a80:	3085383a 	mul	r2,r6,r2
 8000a84:	29c0022e 	bgeu	r5,r7,8000a90 <__umoddi3+0x3d8>
 8000a88:	00c00074 	movhi	r3,1
 8000a8c:	10c5883a 	add	r2,r2,r3
 8000a90:	2808d43a 	srli	r4,r5,16
 8000a94:	280a943a 	slli	r5,r5,16
 8000a98:	4a7fffcc 	andi	r9,r9,65535
 8000a9c:	2085883a 	add	r2,r4,r2
 8000aa0:	2a4b883a 	add	r5,r5,r9
 8000aa4:	40803636 	bltu	r8,r2,8000b80 <__umoddi3+0x4c8>
 8000aa8:	40804d26 	beq	r8,r2,8000be0 <__umoddi3+0x528>
 8000aac:	4089c83a 	sub	r4,r8,r2
 8000ab0:	280f883a 	mov	r7,r5
 8000ab4:	81cfc83a 	sub	r7,r16,r7
 8000ab8:	81c7803a 	cmpltu	r3,r16,r7
 8000abc:	20c7c83a 	sub	r3,r4,r3
 8000ac0:	1cc4983a 	sll	r2,r3,r19
 8000ac4:	3d0ed83a 	srl	r7,r7,r20
 8000ac8:	1d06d83a 	srl	r3,r3,r20
 8000acc:	11c4b03a 	or	r2,r2,r7
 8000ad0:	003f9306 	br	8000920 <__umoddi3+0x268>
 8000ad4:	9ca6983a 	sll	r19,r19,r18
 8000ad8:	88e8d83a 	srl	r20,r17,r3
 8000adc:	80c4d83a 	srl	r2,r16,r3
 8000ae0:	982cd43a 	srli	r22,r19,16
 8000ae4:	8ca2983a 	sll	r17,r17,r18
 8000ae8:	a009883a 	mov	r4,r20
 8000aec:	b00b883a 	mov	r5,r22
 8000af0:	1478b03a 	or	fp,r2,r17
 8000af4:	8000d4c0 	call	8000d4c <__umodsi3>
 8000af8:	a009883a 	mov	r4,r20
 8000afc:	b00b883a 	mov	r5,r22
 8000b00:	1023883a 	mov	r17,r2
 8000b04:	8000ce80 	call	8000ce8 <__udivsi3>
 8000b08:	9d7fffcc 	andi	r21,r19,65535
 8000b0c:	880a943a 	slli	r5,r17,16
 8000b10:	e008d43a 	srli	r4,fp,16
 8000b14:	a885383a 	mul	r2,r21,r2
 8000b18:	84a8983a 	sll	r20,r16,r18
 8000b1c:	2148b03a 	or	r4,r4,r5
 8000b20:	2080042e 	bgeu	r4,r2,8000b34 <__umoddi3+0x47c>
 8000b24:	24c9883a 	add	r4,r4,r19
 8000b28:	24c00236 	bltu	r4,r19,8000b34 <__umoddi3+0x47c>
 8000b2c:	2080012e 	bgeu	r4,r2,8000b34 <__umoddi3+0x47c>
 8000b30:	24c9883a 	add	r4,r4,r19
 8000b34:	20a3c83a 	sub	r17,r4,r2
 8000b38:	b00b883a 	mov	r5,r22
 8000b3c:	8809883a 	mov	r4,r17
 8000b40:	8000d4c0 	call	8000d4c <__umodsi3>
 8000b44:	102f883a 	mov	r23,r2
 8000b48:	8809883a 	mov	r4,r17
 8000b4c:	b00b883a 	mov	r5,r22
 8000b50:	8000ce80 	call	8000ce8 <__udivsi3>
 8000b54:	b82e943a 	slli	r23,r23,16
 8000b58:	a885383a 	mul	r2,r21,r2
 8000b5c:	e13fffcc 	andi	r4,fp,65535
 8000b60:	25c8b03a 	or	r4,r4,r23
 8000b64:	2080042e 	bgeu	r4,r2,8000b78 <__umoddi3+0x4c0>
 8000b68:	24c9883a 	add	r4,r4,r19
 8000b6c:	24c00236 	bltu	r4,r19,8000b78 <__umoddi3+0x4c0>
 8000b70:	2080012e 	bgeu	r4,r2,8000b78 <__umoddi3+0x4c0>
 8000b74:	24c9883a 	add	r4,r4,r19
 8000b78:	20a3c83a 	sub	r17,r4,r2
 8000b7c:	003f4806 	br	80008a0 <__umoddi3+0x1e8>
 8000b80:	2c8fc83a 	sub	r7,r5,r18
 8000b84:	1545c83a 	sub	r2,r2,r21
 8000b88:	29cb803a 	cmpltu	r5,r5,r7
 8000b8c:	1145c83a 	sub	r2,r2,r5
 8000b90:	4089c83a 	sub	r4,r8,r2
 8000b94:	003fc706 	br	8000ab4 <__umoddi3+0x3fc>
 8000b98:	01000604 	movi	r4,24
 8000b9c:	003f1806 	br	8000800 <__umoddi3+0x148>
 8000ba0:	00800604 	movi	r2,24
 8000ba4:	003f3206 	br	8000870 <__umoddi3+0x1b8>
 8000ba8:	01000604 	movi	r4,24
 8000bac:	003ed906 	br	8000714 <__umoddi3+0x5c>
 8000bb0:	413fa52e 	bgeu	r8,r4,8000a48 <__umoddi3+0x390>
 8000bb4:	297fff84 	addi	r5,r5,-2
 8000bb8:	4551883a 	add	r8,r8,r21
 8000bbc:	003fa306 	br	8000a4c <__umoddi3+0x394>
 8000bc0:	15ff8b2e 	bgeu	r2,r23,80009f0 <__umoddi3+0x338>
 8000bc4:	31bfff84 	addi	r6,r6,-2
 8000bc8:	1545883a 	add	r2,r2,r21
 8000bcc:	003f8906 	br	80009f4 <__umoddi3+0x33c>
 8000bd0:	24c9883a 	add	r4,r4,r19
 8000bd4:	003eee06 	br	8000790 <__umoddi3+0xd8>
 8000bd8:	8005883a 	mov	r2,r16
 8000bdc:	003f1706 	br	800083c <__umoddi3+0x184>
 8000be0:	817fe736 	bltu	r16,r5,8000b80 <__umoddi3+0x4c8>
 8000be4:	280f883a 	mov	r7,r5
 8000be8:	0009883a 	mov	r4,zero
 8000bec:	003fb106 	br	8000ab4 <__umoddi3+0x3fc>

08000bf0 <__divsi3>:
 8000bf0:	20001b16 	blt	r4,zero,8000c60 <__divsi3+0x70>
 8000bf4:	000f883a 	mov	r7,zero
 8000bf8:	28001616 	blt	r5,zero,8000c54 <__divsi3+0x64>
 8000bfc:	200d883a 	mov	r6,r4
 8000c00:	29001a2e 	bgeu	r5,r4,8000c6c <__divsi3+0x7c>
 8000c04:	00800804 	movi	r2,32
 8000c08:	00c00044 	movi	r3,1
 8000c0c:	00000106 	br	8000c14 <__divsi3+0x24>
 8000c10:	10000d26 	beq	r2,zero,8000c48 <__divsi3+0x58>
 8000c14:	294b883a 	add	r5,r5,r5
 8000c18:	10bfffc4 	addi	r2,r2,-1
 8000c1c:	18c7883a 	add	r3,r3,r3
 8000c20:	293ffb36 	bltu	r5,r4,8000c10 <__divsi3+0x20>
 8000c24:	0005883a 	mov	r2,zero
 8000c28:	18000726 	beq	r3,zero,8000c48 <__divsi3+0x58>
 8000c2c:	0005883a 	mov	r2,zero
 8000c30:	31400236 	bltu	r6,r5,8000c3c <__divsi3+0x4c>
 8000c34:	314dc83a 	sub	r6,r6,r5
 8000c38:	10c4b03a 	or	r2,r2,r3
 8000c3c:	1806d07a 	srli	r3,r3,1
 8000c40:	280ad07a 	srli	r5,r5,1
 8000c44:	183ffa1e 	bne	r3,zero,8000c30 <__divsi3+0x40>
 8000c48:	38000126 	beq	r7,zero,8000c50 <__divsi3+0x60>
 8000c4c:	0085c83a 	sub	r2,zero,r2
 8000c50:	f800283a 	ret
 8000c54:	014bc83a 	sub	r5,zero,r5
 8000c58:	39c0005c 	xori	r7,r7,1
 8000c5c:	003fe706 	br	8000bfc <__divsi3+0xc>
 8000c60:	0109c83a 	sub	r4,zero,r4
 8000c64:	01c00044 	movi	r7,1
 8000c68:	003fe306 	br	8000bf8 <__divsi3+0x8>
 8000c6c:	00c00044 	movi	r3,1
 8000c70:	003fee06 	br	8000c2c <__divsi3+0x3c>

08000c74 <__modsi3>:
 8000c74:	20001716 	blt	r4,zero,8000cd4 <__modsi3+0x60>
 8000c78:	000f883a 	mov	r7,zero
 8000c7c:	2005883a 	mov	r2,r4
 8000c80:	28001216 	blt	r5,zero,8000ccc <__modsi3+0x58>
 8000c84:	2900162e 	bgeu	r5,r4,8000ce0 <__modsi3+0x6c>
 8000c88:	01800804 	movi	r6,32
 8000c8c:	00c00044 	movi	r3,1
 8000c90:	00000106 	br	8000c98 <__modsi3+0x24>
 8000c94:	30000a26 	beq	r6,zero,8000cc0 <__modsi3+0x4c>
 8000c98:	294b883a 	add	r5,r5,r5
 8000c9c:	31bfffc4 	addi	r6,r6,-1
 8000ca0:	18c7883a 	add	r3,r3,r3
 8000ca4:	293ffb36 	bltu	r5,r4,8000c94 <__modsi3+0x20>
 8000ca8:	18000526 	beq	r3,zero,8000cc0 <__modsi3+0x4c>
 8000cac:	1806d07a 	srli	r3,r3,1
 8000cb0:	11400136 	bltu	r2,r5,8000cb8 <__modsi3+0x44>
 8000cb4:	1145c83a 	sub	r2,r2,r5
 8000cb8:	280ad07a 	srli	r5,r5,1
 8000cbc:	183ffb1e 	bne	r3,zero,8000cac <__modsi3+0x38>
 8000cc0:	38000126 	beq	r7,zero,8000cc8 <__modsi3+0x54>
 8000cc4:	0085c83a 	sub	r2,zero,r2
 8000cc8:	f800283a 	ret
 8000ccc:	014bc83a 	sub	r5,zero,r5
 8000cd0:	003fec06 	br	8000c84 <__modsi3+0x10>
 8000cd4:	0109c83a 	sub	r4,zero,r4
 8000cd8:	01c00044 	movi	r7,1
 8000cdc:	003fe706 	br	8000c7c <__modsi3+0x8>
 8000ce0:	00c00044 	movi	r3,1
 8000ce4:	003ff106 	br	8000cac <__modsi3+0x38>

08000ce8 <__udivsi3>:
 8000ce8:	200d883a 	mov	r6,r4
 8000cec:	2900152e 	bgeu	r5,r4,8000d44 <__udivsi3+0x5c>
 8000cf0:	28001416 	blt	r5,zero,8000d44 <__udivsi3+0x5c>
 8000cf4:	00800804 	movi	r2,32
 8000cf8:	00c00044 	movi	r3,1
 8000cfc:	00000206 	br	8000d08 <__udivsi3+0x20>
 8000d00:	10000e26 	beq	r2,zero,8000d3c <__udivsi3+0x54>
 8000d04:	28000516 	blt	r5,zero,8000d1c <__udivsi3+0x34>
 8000d08:	294b883a 	add	r5,r5,r5
 8000d0c:	10bfffc4 	addi	r2,r2,-1
 8000d10:	18c7883a 	add	r3,r3,r3
 8000d14:	293ffa36 	bltu	r5,r4,8000d00 <__udivsi3+0x18>
 8000d18:	18000826 	beq	r3,zero,8000d3c <__udivsi3+0x54>
 8000d1c:	0005883a 	mov	r2,zero
 8000d20:	31400236 	bltu	r6,r5,8000d2c <__udivsi3+0x44>
 8000d24:	314dc83a 	sub	r6,r6,r5
 8000d28:	10c4b03a 	or	r2,r2,r3
 8000d2c:	1806d07a 	srli	r3,r3,1
 8000d30:	280ad07a 	srli	r5,r5,1
 8000d34:	183ffa1e 	bne	r3,zero,8000d20 <__udivsi3+0x38>
 8000d38:	f800283a 	ret
 8000d3c:	0005883a 	mov	r2,zero
 8000d40:	f800283a 	ret
 8000d44:	00c00044 	movi	r3,1
 8000d48:	003ff406 	br	8000d1c <__udivsi3+0x34>

08000d4c <__umodsi3>:
 8000d4c:	2005883a 	mov	r2,r4
 8000d50:	2900122e 	bgeu	r5,r4,8000d9c <__umodsi3+0x50>
 8000d54:	28001116 	blt	r5,zero,8000d9c <__umodsi3+0x50>
 8000d58:	01800804 	movi	r6,32
 8000d5c:	00c00044 	movi	r3,1
 8000d60:	00000206 	br	8000d6c <__umodsi3+0x20>
 8000d64:	30000c26 	beq	r6,zero,8000d98 <__umodsi3+0x4c>
 8000d68:	28000516 	blt	r5,zero,8000d80 <__umodsi3+0x34>
 8000d6c:	294b883a 	add	r5,r5,r5
 8000d70:	31bfffc4 	addi	r6,r6,-1
 8000d74:	18c7883a 	add	r3,r3,r3
 8000d78:	293ffa36 	bltu	r5,r4,8000d64 <__umodsi3+0x18>
 8000d7c:	18000626 	beq	r3,zero,8000d98 <__umodsi3+0x4c>
 8000d80:	1806d07a 	srli	r3,r3,1
 8000d84:	11400136 	bltu	r2,r5,8000d8c <__umodsi3+0x40>
 8000d88:	1145c83a 	sub	r2,r2,r5
 8000d8c:	280ad07a 	srli	r5,r5,1
 8000d90:	183ffb1e 	bne	r3,zero,8000d80 <__umodsi3+0x34>
 8000d94:	f800283a 	ret
 8000d98:	f800283a 	ret
 8000d9c:	00c00044 	movi	r3,1
 8000da0:	003ff706 	br	8000d80 <__umodsi3+0x34>

08000da4 <__addsf3>:
 8000da4:	defffc04 	addi	sp,sp,-16
 8000da8:	2004d7fa 	srli	r2,r4,31
 8000dac:	280cd5fa 	srli	r6,r5,23
 8000db0:	dc000015 	stw	r16,0(sp)
 8000db4:	00c02034 	movhi	r3,128
 8000db8:	2020d5fa 	srli	r16,r4,23
 8000dbc:	280ed7fa 	srli	r7,r5,31
 8000dc0:	18ffffc4 	addi	r3,r3,-1
 8000dc4:	dc400115 	stw	r17,4(sp)
 8000dc8:	1908703a 	and	r4,r3,r4
 8000dcc:	194a703a 	and	r5,r3,r5
 8000dd0:	dfc00315 	stw	ra,12(sp)
 8000dd4:	dc800215 	stw	r18,8(sp)
 8000dd8:	14403fcc 	andi	r17,r2,255
 8000ddc:	84003fcc 	andi	r16,r16,255
 8000de0:	200890fa 	slli	r4,r4,3
 8000de4:	31803fcc 	andi	r6,r6,255
 8000de8:	280a90fa 	slli	r5,r5,3
 8000dec:	89c05026 	beq	r17,r7,8000f30 <__addsf3+0x18c>
 8000df0:	8185c83a 	sub	r2,r16,r6
 8000df4:	00807a0e 	bge	zero,r2,8000fe0 <__addsf3+0x23c>
 8000df8:	30001e1e 	bne	r6,zero,8000e74 <__addsf3+0xd0>
 8000dfc:	28006d1e 	bne	r5,zero,8000fb4 <__addsf3+0x210>
 8000e00:	208001cc 	andi	r2,r4,7
 8000e04:	10000426 	beq	r2,zero,8000e18 <__addsf3+0x74>
 8000e08:	208003cc 	andi	r2,r4,15
 8000e0c:	00c00104 	movi	r3,4
 8000e10:	10c00126 	beq	r2,r3,8000e18 <__addsf3+0x74>
 8000e14:	20c9883a 	add	r4,r4,r3
 8000e18:	2081002c 	andhi	r2,r4,1024
 8000e1c:	10003926 	beq	r2,zero,8000f04 <__addsf3+0x160>
 8000e20:	84000044 	addi	r16,r16,1
 8000e24:	00803fc4 	movi	r2,255
 8000e28:	80807826 	beq	r16,r2,800100c <__addsf3+0x268>
 8000e2c:	200891ba 	slli	r4,r4,6
 8000e30:	8805883a 	mov	r2,r17
 8000e34:	2008d27a 	srli	r4,r4,9
 8000e38:	84003fcc 	andi	r16,r16,255
 8000e3c:	800695fa 	slli	r3,r16,23
 8000e40:	10803fcc 	andi	r2,r2,255
 8000e44:	04002034 	movhi	r16,128
 8000e48:	843fffc4 	addi	r16,r16,-1
 8000e4c:	100497fa 	slli	r2,r2,31
 8000e50:	2408703a 	and	r4,r4,r16
 8000e54:	20e0b03a 	or	r16,r4,r3
 8000e58:	8084b03a 	or	r2,r16,r2
 8000e5c:	dfc00317 	ldw	ra,12(sp)
 8000e60:	dc800217 	ldw	r18,8(sp)
 8000e64:	dc400117 	ldw	r17,4(sp)
 8000e68:	dc000017 	ldw	r16,0(sp)
 8000e6c:	dec00404 	addi	sp,sp,16
 8000e70:	f800283a 	ret
 8000e74:	00c03fc4 	movi	r3,255
 8000e78:	80ffe126 	beq	r16,r3,8000e00 <__addsf3+0x5c>
 8000e7c:	29410034 	orhi	r5,r5,1024
 8000e80:	00c006c4 	movi	r3,27
 8000e84:	18807516 	blt	r3,r2,800105c <__addsf3+0x2b8>
 8000e88:	00c00804 	movi	r3,32
 8000e8c:	1887c83a 	sub	r3,r3,r2
 8000e90:	28c6983a 	sll	r3,r5,r3
 8000e94:	288ad83a 	srl	r5,r5,r2
 8000e98:	1804c03a 	cmpne	r2,r3,zero
 8000e9c:	288ab03a 	or	r5,r5,r2
 8000ea0:	2149c83a 	sub	r4,r4,r5
 8000ea4:	2081002c 	andhi	r2,r4,1024
 8000ea8:	10001426 	beq	r2,zero,8000efc <__addsf3+0x158>
 8000eac:	04810034 	movhi	r18,1024
 8000eb0:	94bfffc4 	addi	r18,r18,-1
 8000eb4:	24a4703a 	and	r18,r4,r18
 8000eb8:	9009883a 	mov	r4,r18
 8000ebc:	80036c80 	call	80036c8 <__clzsi2>
 8000ec0:	10bffec4 	addi	r2,r2,-5
 8000ec4:	90a4983a 	sll	r18,r18,r2
 8000ec8:	14005416 	blt	r2,r16,800101c <__addsf3+0x278>
 8000ecc:	1405c83a 	sub	r2,r2,r16
 8000ed0:	11000044 	addi	r4,r2,1
 8000ed4:	00800804 	movi	r2,32
 8000ed8:	1105c83a 	sub	r2,r2,r4
 8000edc:	9084983a 	sll	r2,r18,r2
 8000ee0:	9124d83a 	srl	r18,r18,r4
 8000ee4:	0021883a 	mov	r16,zero
 8000ee8:	1008c03a 	cmpne	r4,r2,zero
 8000eec:	9108b03a 	or	r4,r18,r4
 8000ef0:	003fc306 	br	8000e00 <__addsf3+0x5c>
 8000ef4:	1000db26 	beq	r2,zero,8001264 <__addsf3+0x4c0>
 8000ef8:	1009883a 	mov	r4,r2
 8000efc:	208001cc 	andi	r2,r4,7
 8000f00:	103fc11e 	bne	r2,zero,8000e08 <__addsf3+0x64>
 8000f04:	2006d0fa 	srli	r3,r4,3
 8000f08:	01003fc4 	movi	r4,255
 8000f0c:	8805883a 	mov	r2,r17
 8000f10:	8100241e 	bne	r16,r4,8000fa4 <__addsf3+0x200>
 8000f14:	18006e26 	beq	r3,zero,80010d0 <__addsf3+0x32c>
 8000f18:	19001034 	orhi	r4,r3,64
 8000f1c:	00c02034 	movhi	r3,128
 8000f20:	18ffffc4 	addi	r3,r3,-1
 8000f24:	043fffc4 	movi	r16,-1
 8000f28:	20c8703a 	and	r4,r4,r3
 8000f2c:	003fc206 	br	8000e38 <__addsf3+0x94>
 8000f30:	8187c83a 	sub	r3,r16,r6
 8000f34:	00c03e0e 	bge	zero,r3,8001030 <__addsf3+0x28c>
 8000f38:	30002326 	beq	r6,zero,8000fc8 <__addsf3+0x224>
 8000f3c:	01803fc4 	movi	r6,255
 8000f40:	81bfaf26 	beq	r16,r6,8000e00 <__addsf3+0x5c>
 8000f44:	29410034 	orhi	r5,r5,1024
 8000f48:	018006c4 	movi	r6,27
 8000f4c:	30c07416 	blt	r6,r3,8001120 <__addsf3+0x37c>
 8000f50:	01800804 	movi	r6,32
 8000f54:	30cdc83a 	sub	r6,r6,r3
 8000f58:	298c983a 	sll	r6,r5,r6
 8000f5c:	28cad83a 	srl	r5,r5,r3
 8000f60:	3006c03a 	cmpne	r3,r6,zero
 8000f64:	28cab03a 	or	r5,r5,r3
 8000f68:	2149883a 	add	r4,r4,r5
 8000f6c:	20c1002c 	andhi	r3,r4,1024
 8000f70:	183fe226 	beq	r3,zero,8000efc <__addsf3+0x158>
 8000f74:	84000044 	addi	r16,r16,1
 8000f78:	00c03fc4 	movi	r3,255
 8000f7c:	80c05426 	beq	r16,r3,80010d0 <__addsf3+0x32c>
 8000f80:	00bf0034 	movhi	r2,64512
 8000f84:	10bfffc4 	addi	r2,r2,-1
 8000f88:	20c0004c 	andi	r3,r4,1
 8000f8c:	2088703a 	and	r4,r4,r2
 8000f90:	2008d07a 	srli	r4,r4,1
 8000f94:	20c8b03a 	or	r4,r4,r3
 8000f98:	003f9906 	br	8000e00 <__addsf3+0x5c>
 8000f9c:	0007883a 	mov	r3,zero
 8000fa0:	0005883a 	mov	r2,zero
 8000fa4:	01002034 	movhi	r4,128
 8000fa8:	213fffc4 	addi	r4,r4,-1
 8000fac:	1908703a 	and	r4,r3,r4
 8000fb0:	003fa106 	br	8000e38 <__addsf3+0x94>
 8000fb4:	10bfffc4 	addi	r2,r2,-1
 8000fb8:	103fb926 	beq	r2,zero,8000ea0 <__addsf3+0xfc>
 8000fbc:	00c03fc4 	movi	r3,255
 8000fc0:	80ffaf1e 	bne	r16,r3,8000e80 <__addsf3+0xdc>
 8000fc4:	003f8e06 	br	8000e00 <__addsf3+0x5c>
 8000fc8:	283f8d26 	beq	r5,zero,8000e00 <__addsf3+0x5c>
 8000fcc:	18ffffc4 	addi	r3,r3,-1
 8000fd0:	183fe526 	beq	r3,zero,8000f68 <__addsf3+0x1c4>
 8000fd4:	01803fc4 	movi	r6,255
 8000fd8:	81bfdb1e 	bne	r16,r6,8000f48 <__addsf3+0x1a4>
 8000fdc:	003f8806 	br	8000e00 <__addsf3+0x5c>
 8000fe0:	1000201e 	bne	r2,zero,8001064 <__addsf3+0x2c0>
 8000fe4:	80800044 	addi	r2,r16,1
 8000fe8:	10803fcc 	andi	r2,r2,255
 8000fec:	01800044 	movi	r6,1
 8000ff0:	3080450e 	bge	r6,r2,8001108 <__addsf3+0x364>
 8000ff4:	2165c83a 	sub	r18,r4,r5
 8000ff8:	90c1002c 	andhi	r3,r18,1024
 8000ffc:	18002b26 	beq	r3,zero,80010ac <__addsf3+0x308>
 8001000:	2925c83a 	sub	r18,r5,r4
 8001004:	3823883a 	mov	r17,r7
 8001008:	003fab06 	br	8000eb8 <__addsf3+0x114>
 800100c:	8805883a 	mov	r2,r17
 8001010:	043fffc4 	movi	r16,-1
 8001014:	0009883a 	mov	r4,zero
 8001018:	003f8706 	br	8000e38 <__addsf3+0x94>
 800101c:	013f0034 	movhi	r4,64512
 8001020:	213fffc4 	addi	r4,r4,-1
 8001024:	80a1c83a 	sub	r16,r16,r2
 8001028:	9108703a 	and	r4,r18,r4
 800102c:	003f7406 	br	8000e00 <__addsf3+0x5c>
 8001030:	1800411e 	bne	r3,zero,8001138 <__addsf3+0x394>
 8001034:	80c00044 	addi	r3,r16,1
 8001038:	19c03fcc 	andi	r7,r3,255
 800103c:	01800044 	movi	r6,1
 8001040:	31c0260e 	bge	r6,r7,80010dc <__addsf3+0x338>
 8001044:	01803fc4 	movi	r6,255
 8001048:	19802126 	beq	r3,r6,80010d0 <__addsf3+0x32c>
 800104c:	2149883a 	add	r4,r4,r5
 8001050:	2008d07a 	srli	r4,r4,1
 8001054:	1821883a 	mov	r16,r3
 8001058:	003f6906 	br	8000e00 <__addsf3+0x5c>
 800105c:	01400044 	movi	r5,1
 8001060:	003f8f06 	br	8000ea0 <__addsf3+0xfc>
 8001064:	8000151e 	bne	r16,zero,80010bc <__addsf3+0x318>
 8001068:	20002f26 	beq	r4,zero,8001128 <__addsf3+0x384>
 800106c:	0084303a 	nor	r2,zero,r2
 8001070:	10000a26 	beq	r2,zero,800109c <__addsf3+0x2f8>
 8001074:	00c03fc4 	movi	r3,255
 8001078:	30c02b26 	beq	r6,r3,8001128 <__addsf3+0x384>
 800107c:	00c006c4 	movi	r3,27
 8001080:	18806d16 	blt	r3,r2,8001238 <__addsf3+0x494>
 8001084:	00c00804 	movi	r3,32
 8001088:	1887c83a 	sub	r3,r3,r2
 800108c:	20c6983a 	sll	r3,r4,r3
 8001090:	2084d83a 	srl	r2,r4,r2
 8001094:	1808c03a 	cmpne	r4,r3,zero
 8001098:	1108b03a 	or	r4,r2,r4
 800109c:	2909c83a 	sub	r4,r5,r4
 80010a0:	3021883a 	mov	r16,r6
 80010a4:	3823883a 	mov	r17,r7
 80010a8:	003f7e06 	br	8000ea4 <__addsf3+0x100>
 80010ac:	903f821e 	bne	r18,zero,8000eb8 <__addsf3+0x114>
 80010b0:	0005883a 	mov	r2,zero
 80010b4:	0021883a 	mov	r16,zero
 80010b8:	003fba06 	br	8000fa4 <__addsf3+0x200>
 80010bc:	00c03fc4 	movi	r3,255
 80010c0:	30c01926 	beq	r6,r3,8001128 <__addsf3+0x384>
 80010c4:	0085c83a 	sub	r2,zero,r2
 80010c8:	21010034 	orhi	r4,r4,1024
 80010cc:	003feb06 	br	800107c <__addsf3+0x2d8>
 80010d0:	043fffc4 	movi	r16,-1
 80010d4:	0009883a 	mov	r4,zero
 80010d8:	003f5706 	br	8000e38 <__addsf3+0x94>
 80010dc:	80004a1e 	bne	r16,zero,8001208 <__addsf3+0x464>
 80010e0:	20005926 	beq	r4,zero,8001248 <__addsf3+0x4a4>
 80010e4:	283f4626 	beq	r5,zero,8000e00 <__addsf3+0x5c>
 80010e8:	2149883a 	add	r4,r4,r5
 80010ec:	2081002c 	andhi	r2,r4,1024
 80010f0:	103f8226 	beq	r2,zero,8000efc <__addsf3+0x158>
 80010f4:	00bf0034 	movhi	r2,64512
 80010f8:	10bfffc4 	addi	r2,r2,-1
 80010fc:	3021883a 	mov	r16,r6
 8001100:	2088703a 	and	r4,r4,r2
 8001104:	003f3e06 	br	8000e00 <__addsf3+0x5c>
 8001108:	8000121e 	bne	r16,zero,8001154 <__addsf3+0x3b0>
 800110c:	2000261e 	bne	r4,zero,80011a8 <__addsf3+0x404>
 8001110:	283fa226 	beq	r5,zero,8000f9c <__addsf3+0x1f8>
 8001114:	2809883a 	mov	r4,r5
 8001118:	3823883a 	mov	r17,r7
 800111c:	003f3806 	br	8000e00 <__addsf3+0x5c>
 8001120:	01400044 	movi	r5,1
 8001124:	003f9006 	br	8000f68 <__addsf3+0x1c4>
 8001128:	2809883a 	mov	r4,r5
 800112c:	3021883a 	mov	r16,r6
 8001130:	3823883a 	mov	r17,r7
 8001134:	003f3206 	br	8000e00 <__addsf3+0x5c>
 8001138:	80000c1e 	bne	r16,zero,800116c <__addsf3+0x3c8>
 800113c:	20002f26 	beq	r4,zero,80011fc <__addsf3+0x458>
 8001140:	00c6303a 	nor	r3,zero,r3
 8001144:	18002b1e 	bne	r3,zero,80011f4 <__addsf3+0x450>
 8001148:	2149883a 	add	r4,r4,r5
 800114c:	3021883a 	mov	r16,r6
 8001150:	003f8606 	br	8000f6c <__addsf3+0x1c8>
 8001154:	20001b1e 	bne	r4,zero,80011c4 <__addsf3+0x420>
 8001158:	28003926 	beq	r5,zero,8001240 <__addsf3+0x49c>
 800115c:	2809883a 	mov	r4,r5
 8001160:	3823883a 	mov	r17,r7
 8001164:	04003fc4 	movi	r16,255
 8001168:	003f2506 	br	8000e00 <__addsf3+0x5c>
 800116c:	01c03fc4 	movi	r7,255
 8001170:	31c02226 	beq	r6,r7,80011fc <__addsf3+0x458>
 8001174:	00c7c83a 	sub	r3,zero,r3
 8001178:	21010034 	orhi	r4,r4,1024
 800117c:	01c006c4 	movi	r7,27
 8001180:	38c03616 	blt	r7,r3,800125c <__addsf3+0x4b8>
 8001184:	01c00804 	movi	r7,32
 8001188:	38cfc83a 	sub	r7,r7,r3
 800118c:	21ce983a 	sll	r7,r4,r7
 8001190:	20c6d83a 	srl	r3,r4,r3
 8001194:	3808c03a 	cmpne	r4,r7,zero
 8001198:	1906b03a 	or	r3,r3,r4
 800119c:	1949883a 	add	r4,r3,r5
 80011a0:	3021883a 	mov	r16,r6
 80011a4:	003f7106 	br	8000f6c <__addsf3+0x1c8>
 80011a8:	283f1526 	beq	r5,zero,8000e00 <__addsf3+0x5c>
 80011ac:	2145c83a 	sub	r2,r4,r5
 80011b0:	10c1002c 	andhi	r3,r2,1024
 80011b4:	183f4f26 	beq	r3,zero,8000ef4 <__addsf3+0x150>
 80011b8:	2909c83a 	sub	r4,r5,r4
 80011bc:	3823883a 	mov	r17,r7
 80011c0:	003f0f06 	br	8000e00 <__addsf3+0x5c>
 80011c4:	28001a26 	beq	r5,zero,8001230 <__addsf3+0x48c>
 80011c8:	2008d0fa 	srli	r4,r4,3
 80011cc:	2080102c 	andhi	r2,r4,64
 80011d0:	10000526 	beq	r2,zero,80011e8 <__addsf3+0x444>
 80011d4:	280ad0fa 	srli	r5,r5,3
 80011d8:	2880102c 	andhi	r2,r5,64
 80011dc:	1000021e 	bne	r2,zero,80011e8 <__addsf3+0x444>
 80011e0:	2809883a 	mov	r4,r5
 80011e4:	3823883a 	mov	r17,r7
 80011e8:	200890fa 	slli	r4,r4,3
 80011ec:	04003fc4 	movi	r16,255
 80011f0:	003f0306 	br	8000e00 <__addsf3+0x5c>
 80011f4:	01c03fc4 	movi	r7,255
 80011f8:	31ffe01e 	bne	r6,r7,800117c <__addsf3+0x3d8>
 80011fc:	2809883a 	mov	r4,r5
 8001200:	3021883a 	mov	r16,r6
 8001204:	003efe06 	br	8000e00 <__addsf3+0x5c>
 8001208:	20001126 	beq	r4,zero,8001250 <__addsf3+0x4ac>
 800120c:	28000826 	beq	r5,zero,8001230 <__addsf3+0x48c>
 8001210:	2008d0fa 	srli	r4,r4,3
 8001214:	2080102c 	andhi	r2,r4,64
 8001218:	103ff326 	beq	r2,zero,80011e8 <__addsf3+0x444>
 800121c:	280ad0fa 	srli	r5,r5,3
 8001220:	2880102c 	andhi	r2,r5,64
 8001224:	103ff01e 	bne	r2,zero,80011e8 <__addsf3+0x444>
 8001228:	2809883a 	mov	r4,r5
 800122c:	003fee06 	br	80011e8 <__addsf3+0x444>
 8001230:	04003fc4 	movi	r16,255
 8001234:	003ef206 	br	8000e00 <__addsf3+0x5c>
 8001238:	01000044 	movi	r4,1
 800123c:	003f9706 	br	800109c <__addsf3+0x2f8>
 8001240:	0005883a 	mov	r2,zero
 8001244:	003f3406 	br	8000f18 <__addsf3+0x174>
 8001248:	2809883a 	mov	r4,r5
 800124c:	003eec06 	br	8000e00 <__addsf3+0x5c>
 8001250:	2809883a 	mov	r4,r5
 8001254:	04003fc4 	movi	r16,255
 8001258:	003ee906 	br	8000e00 <__addsf3+0x5c>
 800125c:	00c00044 	movi	r3,1
 8001260:	003fce06 	br	800119c <__addsf3+0x3f8>
 8001264:	0005883a 	mov	r2,zero
 8001268:	003f4e06 	br	8000fa4 <__addsf3+0x200>

0800126c <__divsf3>:
 800126c:	defff504 	addi	sp,sp,-44
 8001270:	200cd5fa 	srli	r6,r4,23
 8001274:	dcc00415 	stw	r19,16(sp)
 8001278:	2026d7fa 	srli	r19,r4,31
 800127c:	00c02034 	movhi	r3,128
 8001280:	dd800715 	stw	r22,28(sp)
 8001284:	dd000515 	stw	r20,20(sp)
 8001288:	dc800315 	stw	r18,12(sp)
 800128c:	18ffffc4 	addi	r3,r3,-1
 8001290:	dfc00a15 	stw	ra,40(sp)
 8001294:	df000915 	stw	fp,36(sp)
 8001298:	ddc00815 	stw	r23,32(sp)
 800129c:	dd400615 	stw	r21,24(sp)
 80012a0:	dc400215 	stw	r17,8(sp)
 80012a4:	dc000115 	stw	r16,4(sp)
 80012a8:	35003fcc 	andi	r20,r6,255
 80012ac:	1924703a 	and	r18,r3,r4
 80012b0:	9d803fcc 	andi	r22,r19,255
 80012b4:	a0005226 	beq	r20,zero,8001400 <__divsf3+0x194>
 80012b8:	00803fc4 	movi	r2,255
 80012bc:	a0802e26 	beq	r20,r2,8001378 <__divsf3+0x10c>
 80012c0:	91002034 	orhi	r4,r18,128
 80012c4:	202490fa 	slli	r18,r4,3
 80012c8:	a53fe044 	addi	r20,r20,-127
 80012cc:	0021883a 	mov	r16,zero
 80012d0:	002f883a 	mov	r23,zero
 80012d4:	280cd5fa 	srli	r6,r5,23
 80012d8:	282ad7fa 	srli	r21,r5,31
 80012dc:	00c02034 	movhi	r3,128
 80012e0:	18ffffc4 	addi	r3,r3,-1
 80012e4:	31803fcc 	andi	r6,r6,255
 80012e8:	1962703a 	and	r17,r3,r5
 80012ec:	af003fcc 	andi	fp,r21,255
 80012f0:	30004a26 	beq	r6,zero,800141c <__divsf3+0x1b0>
 80012f4:	00803fc4 	movi	r2,255
 80012f8:	30804526 	beq	r6,r2,8001410 <__divsf3+0x1a4>
 80012fc:	89402034 	orhi	r5,r17,128
 8001300:	282290fa 	slli	r17,r5,3
 8001304:	31bfe044 	addi	r6,r6,-127
 8001308:	000b883a 	mov	r5,zero
 800130c:	2c20b03a 	or	r16,r5,r16
 8001310:	802090ba 	slli	r16,r16,2
 8001314:	00820034 	movhi	r2,2048
 8001318:	1084ce04 	addi	r2,r2,4920
 800131c:	80a1883a 	add	r16,r16,r2
 8001320:	81000017 	ldw	r4,0(r16)
 8001324:	9d46f03a 	xor	r3,r19,r21
 8001328:	180f883a 	mov	r7,r3
 800132c:	18803fcc 	andi	r2,r3,255
 8001330:	a18dc83a 	sub	r6,r20,r6
 8001334:	2000683a 	jmp	r4
 8001338:	0800151c 	xori	zero,at,84
 800133c:	080013a0 	cmpeqi	zero,at,78
 8001340:	08001510 	cmplti	zero,at,84
 8001344:	0800138c 	andi	zero,at,78
 8001348:	08001510 	cmplti	zero,at,84
 800134c:	080014e8 	cmpgeui	zero,at,83
 8001350:	08001510 	cmplti	zero,at,84
 8001354:	0800138c 	andi	zero,at,78
 8001358:	080013a0 	cmpeqi	zero,at,78
 800135c:	080013a0 	cmpeqi	zero,at,78
 8001360:	080014e8 	cmpgeui	zero,at,83
 8001364:	0800138c 	andi	zero,at,78
 8001368:	080015fc 	xorhi	zero,at,87
 800136c:	080015fc 	xorhi	zero,at,87
 8001370:	080015fc 	xorhi	zero,at,87
 8001374:	080015b0 	cmpltui	zero,at,86
 8001378:	9000581e 	bne	r18,zero,80014dc <__divsf3+0x270>
 800137c:	04000204 	movi	r16,8
 8001380:	05c00084 	movi	r23,2
 8001384:	003fd306 	br	80012d4 <__divsf3+0x68>
 8001388:	0023883a 	mov	r17,zero
 800138c:	e02d883a 	mov	r22,fp
 8001390:	282f883a 	mov	r23,r5
 8001394:	00800084 	movi	r2,2
 8001398:	b8808f1e 	bne	r23,r2,80015d8 <__divsf3+0x36c>
 800139c:	b005883a 	mov	r2,r22
 80013a0:	11c0004c 	andi	r7,r2,1
 80013a4:	013fffc4 	movi	r4,-1
 80013a8:	000d883a 	mov	r6,zero
 80013ac:	21003fcc 	andi	r4,r4,255
 80013b0:	200895fa 	slli	r4,r4,23
 80013b4:	38803fcc 	andi	r2,r7,255
 80013b8:	00c02034 	movhi	r3,128
 80013bc:	100497fa 	slli	r2,r2,31
 80013c0:	18ffffc4 	addi	r3,r3,-1
 80013c4:	30c6703a 	and	r3,r6,r3
 80013c8:	1906b03a 	or	r3,r3,r4
 80013cc:	1884b03a 	or	r2,r3,r2
 80013d0:	dfc00a17 	ldw	ra,40(sp)
 80013d4:	df000917 	ldw	fp,36(sp)
 80013d8:	ddc00817 	ldw	r23,32(sp)
 80013dc:	dd800717 	ldw	r22,28(sp)
 80013e0:	dd400617 	ldw	r21,24(sp)
 80013e4:	dd000517 	ldw	r20,20(sp)
 80013e8:	dcc00417 	ldw	r19,16(sp)
 80013ec:	dc800317 	ldw	r18,12(sp)
 80013f0:	dc400217 	ldw	r17,8(sp)
 80013f4:	dc000117 	ldw	r16,4(sp)
 80013f8:	dec00b04 	addi	sp,sp,44
 80013fc:	f800283a 	ret
 8001400:	90002b1e 	bne	r18,zero,80014b0 <__divsf3+0x244>
 8001404:	04000104 	movi	r16,4
 8001408:	05c00044 	movi	r23,1
 800140c:	003fb106 	br	80012d4 <__divsf3+0x68>
 8001410:	8800251e 	bne	r17,zero,80014a8 <__divsf3+0x23c>
 8001414:	01400084 	movi	r5,2
 8001418:	00000206 	br	8001424 <__divsf3+0x1b8>
 800141c:	88001a1e 	bne	r17,zero,8001488 <__divsf3+0x21c>
 8001420:	01400044 	movi	r5,1
 8001424:	8160b03a 	or	r16,r16,r5
 8001428:	802090ba 	slli	r16,r16,2
 800142c:	00c20034 	movhi	r3,2048
 8001430:	18c51204 	addi	r3,r3,5192
 8001434:	80e1883a 	add	r16,r16,r3
 8001438:	80c00017 	ldw	r3,0(r16)
 800143c:	9d44f03a 	xor	r2,r19,r21
 8001440:	a18dc83a 	sub	r6,r20,r6
 8001444:	1800683a 	jmp	r3
 8001448:	080013a0 	cmpeqi	zero,at,78
 800144c:	080013a0 	cmpeqi	zero,at,78
 8001450:	080015ec 	andhi	zero,at,87
 8001454:	08001388 	cmpgei	zero,at,78
 8001458:	080015ec 	andhi	zero,at,87
 800145c:	080014e8 	cmpgeui	zero,at,83
 8001460:	080015ec 	andhi	zero,at,87
 8001464:	08001388 	cmpgei	zero,at,78
 8001468:	080013a0 	cmpeqi	zero,at,78
 800146c:	080013a0 	cmpeqi	zero,at,78
 8001470:	080014e8 	cmpgeui	zero,at,83
 8001474:	08001388 	cmpgei	zero,at,78
 8001478:	080015fc 	xorhi	zero,at,87
 800147c:	080015fc 	xorhi	zero,at,87
 8001480:	080015fc 	xorhi	zero,at,87
 8001484:	08001614 	ori	zero,at,88
 8001488:	8809883a 	mov	r4,r17
 800148c:	80036c80 	call	80036c8 <__clzsi2>
 8001490:	10fffec4 	addi	r3,r2,-5
 8001494:	10801d84 	addi	r2,r2,118
 8001498:	88e2983a 	sll	r17,r17,r3
 800149c:	008dc83a 	sub	r6,zero,r2
 80014a0:	000b883a 	mov	r5,zero
 80014a4:	003f9906 	br	800130c <__divsf3+0xa0>
 80014a8:	014000c4 	movi	r5,3
 80014ac:	003f9706 	br	800130c <__divsf3+0xa0>
 80014b0:	9009883a 	mov	r4,r18
 80014b4:	d9400015 	stw	r5,0(sp)
 80014b8:	80036c80 	call	80036c8 <__clzsi2>
 80014bc:	10fffec4 	addi	r3,r2,-5
 80014c0:	11801d84 	addi	r6,r2,118
 80014c4:	90e4983a 	sll	r18,r18,r3
 80014c8:	01a9c83a 	sub	r20,zero,r6
 80014cc:	0021883a 	mov	r16,zero
 80014d0:	002f883a 	mov	r23,zero
 80014d4:	d9400017 	ldw	r5,0(sp)
 80014d8:	003f7e06 	br	80012d4 <__divsf3+0x68>
 80014dc:	04000304 	movi	r16,12
 80014e0:	05c000c4 	movi	r23,3
 80014e4:	003f7b06 	br	80012d4 <__divsf3+0x68>
 80014e8:	01802034 	movhi	r6,128
 80014ec:	000f883a 	mov	r7,zero
 80014f0:	31bfffc4 	addi	r6,r6,-1
 80014f4:	013fffc4 	movi	r4,-1
 80014f8:	003fac06 	br	80013ac <__divsf3+0x140>
 80014fc:	01400044 	movi	r5,1
 8001500:	2909c83a 	sub	r4,r5,r4
 8001504:	00c006c4 	movi	r3,27
 8001508:	19004b0e 	bge	r3,r4,8001638 <__divsf3+0x3cc>
 800150c:	114e703a 	and	r7,r2,r5
 8001510:	0009883a 	mov	r4,zero
 8001514:	000d883a 	mov	r6,zero
 8001518:	003fa406 	br	80013ac <__divsf3+0x140>
 800151c:	9006917a 	slli	r3,r18,5
 8001520:	8822917a 	slli	r17,r17,5
 8001524:	1c40372e 	bgeu	r3,r17,8001604 <__divsf3+0x398>
 8001528:	31bfffc4 	addi	r6,r6,-1
 800152c:	010006c4 	movi	r4,27
 8001530:	000b883a 	mov	r5,zero
 8001534:	180f883a 	mov	r7,r3
 8001538:	294b883a 	add	r5,r5,r5
 800153c:	18c7883a 	add	r3,r3,r3
 8001540:	38000116 	blt	r7,zero,8001548 <__divsf3+0x2dc>
 8001544:	1c400236 	bltu	r3,r17,8001550 <__divsf3+0x2e4>
 8001548:	1c47c83a 	sub	r3,r3,r17
 800154c:	29400054 	ori	r5,r5,1
 8001550:	213fffc4 	addi	r4,r4,-1
 8001554:	203ff71e 	bne	r4,zero,8001534 <__divsf3+0x2c8>
 8001558:	1806c03a 	cmpne	r3,r3,zero
 800155c:	1962b03a 	or	r17,r3,r5
 8001560:	31001fc4 	addi	r4,r6,127
 8001564:	013fe50e 	bge	zero,r4,80014fc <__divsf3+0x290>
 8001568:	88c001cc 	andi	r3,r17,7
 800156c:	18000426 	beq	r3,zero,8001580 <__divsf3+0x314>
 8001570:	88c003cc 	andi	r3,r17,15
 8001574:	01400104 	movi	r5,4
 8001578:	19400126 	beq	r3,r5,8001580 <__divsf3+0x314>
 800157c:	8963883a 	add	r17,r17,r5
 8001580:	88c2002c 	andhi	r3,r17,2048
 8001584:	18000426 	beq	r3,zero,8001598 <__divsf3+0x32c>
 8001588:	00fe0034 	movhi	r3,63488
 800158c:	18ffffc4 	addi	r3,r3,-1
 8001590:	31002004 	addi	r4,r6,128
 8001594:	88e2703a 	and	r17,r17,r3
 8001598:	00c03f84 	movi	r3,254
 800159c:	193f8016 	blt	r3,r4,80013a0 <__divsf3+0x134>
 80015a0:	880c91ba 	slli	r6,r17,6
 80015a4:	11c0004c 	andi	r7,r2,1
 80015a8:	300cd27a 	srli	r6,r6,9
 80015ac:	003f7f06 	br	80013ac <__divsf3+0x140>
 80015b0:	9080102c 	andhi	r2,r18,64
 80015b4:	10000226 	beq	r2,zero,80015c0 <__divsf3+0x354>
 80015b8:	8880102c 	andhi	r2,r17,64
 80015bc:	10001826 	beq	r2,zero,8001620 <__divsf3+0x3b4>
 80015c0:	00802034 	movhi	r2,128
 80015c4:	91801034 	orhi	r6,r18,64
 80015c8:	10bfffc4 	addi	r2,r2,-1
 80015cc:	980f883a 	mov	r7,r19
 80015d0:	308c703a 	and	r6,r6,r2
 80015d4:	003fc706 	br	80014f4 <__divsf3+0x288>
 80015d8:	008000c4 	movi	r2,3
 80015dc:	b8802d26 	beq	r23,r2,8001694 <__divsf3+0x428>
 80015e0:	00c00044 	movi	r3,1
 80015e4:	b005883a 	mov	r2,r22
 80015e8:	b8ffdd1e 	bne	r23,r3,8001560 <__divsf3+0x2f4>
 80015ec:	11c0004c 	andi	r7,r2,1
 80015f0:	0009883a 	mov	r4,zero
 80015f4:	000d883a 	mov	r6,zero
 80015f8:	003f6c06 	br	80013ac <__divsf3+0x140>
 80015fc:	9023883a 	mov	r17,r18
 8001600:	003f6406 	br	8001394 <__divsf3+0x128>
 8001604:	1c47c83a 	sub	r3,r3,r17
 8001608:	01000684 	movi	r4,26
 800160c:	01400044 	movi	r5,1
 8001610:	003fc806 	br	8001534 <__divsf3+0x2c8>
 8001614:	9080102c 	andhi	r2,r18,64
 8001618:	103fe926 	beq	r2,zero,80015c0 <__divsf3+0x354>
 800161c:	0023883a 	mov	r17,zero
 8001620:	00802034 	movhi	r2,128
 8001624:	89801034 	orhi	r6,r17,64
 8001628:	10bfffc4 	addi	r2,r2,-1
 800162c:	a80f883a 	mov	r7,r21
 8001630:	308c703a 	and	r6,r6,r2
 8001634:	003faf06 	br	80014f4 <__divsf3+0x288>
 8001638:	01c00804 	movi	r7,32
 800163c:	390fc83a 	sub	r7,r7,r4
 8001640:	89ce983a 	sll	r7,r17,r7
 8001644:	890ad83a 	srl	r5,r17,r4
 8001648:	380ec03a 	cmpne	r7,r7,zero
 800164c:	29cab03a 	or	r5,r5,r7
 8001650:	28c001cc 	andi	r3,r5,7
 8001654:	18000426 	beq	r3,zero,8001668 <__divsf3+0x3fc>
 8001658:	28c003cc 	andi	r3,r5,15
 800165c:	01000104 	movi	r4,4
 8001660:	19000126 	beq	r3,r4,8001668 <__divsf3+0x3fc>
 8001664:	290b883a 	add	r5,r5,r4
 8001668:	28c1002c 	andhi	r3,r5,1024
 800166c:	18000426 	beq	r3,zero,8001680 <__divsf3+0x414>
 8001670:	11c0004c 	andi	r7,r2,1
 8001674:	01000044 	movi	r4,1
 8001678:	000d883a 	mov	r6,zero
 800167c:	003f4b06 	br	80013ac <__divsf3+0x140>
 8001680:	280a91ba 	slli	r5,r5,6
 8001684:	11c0004c 	andi	r7,r2,1
 8001688:	0009883a 	mov	r4,zero
 800168c:	280cd27a 	srli	r6,r5,9
 8001690:	003f4606 	br	80013ac <__divsf3+0x140>
 8001694:	00802034 	movhi	r2,128
 8001698:	89801034 	orhi	r6,r17,64
 800169c:	10bfffc4 	addi	r2,r2,-1
 80016a0:	b00f883a 	mov	r7,r22
 80016a4:	308c703a 	and	r6,r6,r2
 80016a8:	003f9206 	br	80014f4 <__divsf3+0x288>

080016ac <__mulsf3>:
 80016ac:	defff504 	addi	sp,sp,-44
 80016b0:	dc000115 	stw	r16,4(sp)
 80016b4:	2020d5fa 	srli	r16,r4,23
 80016b8:	dd400615 	stw	r21,24(sp)
 80016bc:	202ad7fa 	srli	r21,r4,31
 80016c0:	dc800315 	stw	r18,12(sp)
 80016c4:	04802034 	movhi	r18,128
 80016c8:	df000915 	stw	fp,36(sp)
 80016cc:	dd000515 	stw	r20,20(sp)
 80016d0:	94bfffc4 	addi	r18,r18,-1
 80016d4:	dfc00a15 	stw	ra,40(sp)
 80016d8:	ddc00815 	stw	r23,32(sp)
 80016dc:	dd800715 	stw	r22,28(sp)
 80016e0:	dcc00415 	stw	r19,16(sp)
 80016e4:	dc400215 	stw	r17,8(sp)
 80016e8:	84003fcc 	andi	r16,r16,255
 80016ec:	9124703a 	and	r18,r18,r4
 80016f0:	a829883a 	mov	r20,r21
 80016f4:	af003fcc 	andi	fp,r21,255
 80016f8:	80005426 	beq	r16,zero,800184c <__mulsf3+0x1a0>
 80016fc:	00803fc4 	movi	r2,255
 8001700:	80802f26 	beq	r16,r2,80017c0 <__mulsf3+0x114>
 8001704:	91002034 	orhi	r4,r18,128
 8001708:	202490fa 	slli	r18,r4,3
 800170c:	843fe044 	addi	r16,r16,-127
 8001710:	0023883a 	mov	r17,zero
 8001714:	002f883a 	mov	r23,zero
 8001718:	2804d5fa 	srli	r2,r5,23
 800171c:	282cd7fa 	srli	r22,r5,31
 8001720:	01002034 	movhi	r4,128
 8001724:	213fffc4 	addi	r4,r4,-1
 8001728:	10803fcc 	andi	r2,r2,255
 800172c:	2166703a 	and	r19,r4,r5
 8001730:	b1803fcc 	andi	r6,r22,255
 8001734:	10004c26 	beq	r2,zero,8001868 <__mulsf3+0x1bc>
 8001738:	00c03fc4 	movi	r3,255
 800173c:	10c04726 	beq	r2,r3,800185c <__mulsf3+0x1b0>
 8001740:	99002034 	orhi	r4,r19,128
 8001744:	202690fa 	slli	r19,r4,3
 8001748:	10bfe044 	addi	r2,r2,-127
 800174c:	0007883a 	mov	r3,zero
 8001750:	80a1883a 	add	r16,r16,r2
 8001754:	010003c4 	movi	r4,15
 8001758:	1c44b03a 	or	r2,r3,r17
 800175c:	b56af03a 	xor	r21,r22,r21
 8001760:	81c00044 	addi	r7,r16,1
 8001764:	20806b36 	bltu	r4,r2,8001914 <__mulsf3+0x268>
 8001768:	100490ba 	slli	r2,r2,2
 800176c:	01020034 	movhi	r4,2048
 8001770:	2105e004 	addi	r4,r4,6016
 8001774:	1105883a 	add	r2,r2,r4
 8001778:	10800017 	ldw	r2,0(r2)
 800177c:	1000683a 	jmp	r2
 8001780:	08001914 	ori	zero,at,100
 8001784:	080017d4 	ori	zero,at,95
 8001788:	080017d4 	ori	zero,at,95
 800178c:	080017d0 	cmplti	zero,at,95
 8001790:	080018f8 	rdprs	zero,at,99
 8001794:	080018f8 	rdprs	zero,at,99
 8001798:	080018e4 	muli	zero,at,99
 800179c:	080017d0 	cmplti	zero,at,95
 80017a0:	080018f8 	rdprs	zero,at,99
 80017a4:	080018e4 	muli	zero,at,99
 80017a8:	080018f8 	rdprs	zero,at,99
 80017ac:	080017d0 	cmplti	zero,at,95
 80017b0:	08001904 	addi	zero,at,100
 80017b4:	08001904 	addi	zero,at,100
 80017b8:	08001904 	addi	zero,at,100
 80017bc:	080019e0 	cmpeqi	zero,at,103
 80017c0:	90003b1e 	bne	r18,zero,80018b0 <__mulsf3+0x204>
 80017c4:	04400204 	movi	r17,8
 80017c8:	05c00084 	movi	r23,2
 80017cc:	003fd206 	br	8001718 <__mulsf3+0x6c>
 80017d0:	302b883a 	mov	r21,r6
 80017d4:	00800084 	movi	r2,2
 80017d8:	18802626 	beq	r3,r2,8001874 <__mulsf3+0x1c8>
 80017dc:	008000c4 	movi	r2,3
 80017e0:	1880ab26 	beq	r3,r2,8001a90 <__mulsf3+0x3e4>
 80017e4:	00800044 	movi	r2,1
 80017e8:	1880a21e 	bne	r3,r2,8001a74 <__mulsf3+0x3c8>
 80017ec:	a829883a 	mov	r20,r21
 80017f0:	0007883a 	mov	r3,zero
 80017f4:	0009883a 	mov	r4,zero
 80017f8:	18803fcc 	andi	r2,r3,255
 80017fc:	100695fa 	slli	r3,r2,23
 8001800:	a0803fcc 	andi	r2,r20,255
 8001804:	100a97fa 	slli	r5,r2,31
 8001808:	00802034 	movhi	r2,128
 800180c:	10bfffc4 	addi	r2,r2,-1
 8001810:	2084703a 	and	r2,r4,r2
 8001814:	10c4b03a 	or	r2,r2,r3
 8001818:	1144b03a 	or	r2,r2,r5
 800181c:	dfc00a17 	ldw	ra,40(sp)
 8001820:	df000917 	ldw	fp,36(sp)
 8001824:	ddc00817 	ldw	r23,32(sp)
 8001828:	dd800717 	ldw	r22,28(sp)
 800182c:	dd400617 	ldw	r21,24(sp)
 8001830:	dd000517 	ldw	r20,20(sp)
 8001834:	dcc00417 	ldw	r19,16(sp)
 8001838:	dc800317 	ldw	r18,12(sp)
 800183c:	dc400217 	ldw	r17,8(sp)
 8001840:	dc000117 	ldw	r16,4(sp)
 8001844:	dec00b04 	addi	sp,sp,44
 8001848:	f800283a 	ret
 800184c:	90000d1e 	bne	r18,zero,8001884 <__mulsf3+0x1d8>
 8001850:	04400104 	movi	r17,4
 8001854:	05c00044 	movi	r23,1
 8001858:	003faf06 	br	8001718 <__mulsf3+0x6c>
 800185c:	9806c03a 	cmpne	r3,r19,zero
 8001860:	18c00084 	addi	r3,r3,2
 8001864:	003fba06 	br	8001750 <__mulsf3+0xa4>
 8001868:	9800141e 	bne	r19,zero,80018bc <__mulsf3+0x210>
 800186c:	00c00044 	movi	r3,1
 8001870:	003fb706 	br	8001750 <__mulsf3+0xa4>
 8001874:	a829883a 	mov	r20,r21
 8001878:	00ffffc4 	movi	r3,-1
 800187c:	0009883a 	mov	r4,zero
 8001880:	003fdd06 	br	80017f8 <__mulsf3+0x14c>
 8001884:	9009883a 	mov	r4,r18
 8001888:	d9400015 	stw	r5,0(sp)
 800188c:	80036c80 	call	80036c8 <__clzsi2>
 8001890:	10fffec4 	addi	r3,r2,-5
 8001894:	10801d84 	addi	r2,r2,118
 8001898:	90e4983a 	sll	r18,r18,r3
 800189c:	00a1c83a 	sub	r16,zero,r2
 80018a0:	0023883a 	mov	r17,zero
 80018a4:	002f883a 	mov	r23,zero
 80018a8:	d9400017 	ldw	r5,0(sp)
 80018ac:	003f9a06 	br	8001718 <__mulsf3+0x6c>
 80018b0:	04400304 	movi	r17,12
 80018b4:	05c000c4 	movi	r23,3
 80018b8:	003f9706 	br	8001718 <__mulsf3+0x6c>
 80018bc:	9809883a 	mov	r4,r19
 80018c0:	d9800015 	stw	r6,0(sp)
 80018c4:	80036c80 	call	80036c8 <__clzsi2>
 80018c8:	10fffec4 	addi	r3,r2,-5
 80018cc:	10801d84 	addi	r2,r2,118
 80018d0:	98e6983a 	sll	r19,r19,r3
 80018d4:	0085c83a 	sub	r2,zero,r2
 80018d8:	0007883a 	mov	r3,zero
 80018dc:	d9800017 	ldw	r6,0(sp)
 80018e0:	003f9b06 	br	8001750 <__mulsf3+0xa4>
 80018e4:	01002034 	movhi	r4,128
 80018e8:	0029883a 	mov	r20,zero
 80018ec:	213fffc4 	addi	r4,r4,-1
 80018f0:	00ffffc4 	movi	r3,-1
 80018f4:	003fc006 	br	80017f8 <__mulsf3+0x14c>
 80018f8:	9027883a 	mov	r19,r18
 80018fc:	b807883a 	mov	r3,r23
 8001900:	003fb406 	br	80017d4 <__mulsf3+0x128>
 8001904:	9027883a 	mov	r19,r18
 8001908:	e02b883a 	mov	r21,fp
 800190c:	b807883a 	mov	r3,r23
 8001910:	003fb006 	br	80017d4 <__mulsf3+0x128>
 8001914:	9004d43a 	srli	r2,r18,16
 8001918:	9810d43a 	srli	r8,r19,16
 800191c:	94bfffcc 	andi	r18,r18,65535
 8001920:	993fffcc 	andi	r4,r19,65535
 8001924:	910d383a 	mul	r6,r18,r4
 8001928:	20a7383a 	mul	r19,r4,r2
 800192c:	9225383a 	mul	r18,r18,r8
 8001930:	3006d43a 	srli	r3,r6,16
 8001934:	1211383a 	mul	r8,r2,r8
 8001938:	94e5883a 	add	r18,r18,r19
 800193c:	1c87883a 	add	r3,r3,r18
 8001940:	1cc0022e 	bgeu	r3,r19,800194c <__mulsf3+0x2a0>
 8001944:	00800074 	movhi	r2,1
 8001948:	4091883a 	add	r8,r8,r2
 800194c:	1804943a 	slli	r2,r3,16
 8001950:	31bfffcc 	andi	r6,r6,65535
 8001954:	1806d43a 	srli	r3,r3,16
 8001958:	1185883a 	add	r2,r2,r6
 800195c:	102691ba 	slli	r19,r2,6
 8001960:	1a07883a 	add	r3,r3,r8
 8001964:	1004d6ba 	srli	r2,r2,26
 8001968:	180891ba 	slli	r4,r3,6
 800196c:	9826c03a 	cmpne	r19,r19,zero
 8001970:	9884b03a 	or	r2,r19,r2
 8001974:	1126b03a 	or	r19,r2,r4
 8001978:	9882002c 	andhi	r2,r19,2048
 800197c:	10000426 	beq	r2,zero,8001990 <__mulsf3+0x2e4>
 8001980:	9804d07a 	srli	r2,r19,1
 8001984:	9900004c 	andi	r4,r19,1
 8001988:	3821883a 	mov	r16,r7
 800198c:	1126b03a 	or	r19,r2,r4
 8001990:	80c01fc4 	addi	r3,r16,127
 8001994:	00c0210e 	bge	zero,r3,8001a1c <__mulsf3+0x370>
 8001998:	988001cc 	andi	r2,r19,7
 800199c:	10000426 	beq	r2,zero,80019b0 <__mulsf3+0x304>
 80019a0:	988003cc 	andi	r2,r19,15
 80019a4:	01000104 	movi	r4,4
 80019a8:	11000126 	beq	r2,r4,80019b0 <__mulsf3+0x304>
 80019ac:	9927883a 	add	r19,r19,r4
 80019b0:	9882002c 	andhi	r2,r19,2048
 80019b4:	10000426 	beq	r2,zero,80019c8 <__mulsf3+0x31c>
 80019b8:	00be0034 	movhi	r2,63488
 80019bc:	10bfffc4 	addi	r2,r2,-1
 80019c0:	80c02004 	addi	r3,r16,128
 80019c4:	98a6703a 	and	r19,r19,r2
 80019c8:	00803f84 	movi	r2,254
 80019cc:	10ffa916 	blt	r2,r3,8001874 <__mulsf3+0x1c8>
 80019d0:	980891ba 	slli	r4,r19,6
 80019d4:	a829883a 	mov	r20,r21
 80019d8:	2008d27a 	srli	r4,r4,9
 80019dc:	003f8606 	br	80017f8 <__mulsf3+0x14c>
 80019e0:	9080102c 	andhi	r2,r18,64
 80019e4:	10000826 	beq	r2,zero,8001a08 <__mulsf3+0x35c>
 80019e8:	9880102c 	andhi	r2,r19,64
 80019ec:	1000061e 	bne	r2,zero,8001a08 <__mulsf3+0x35c>
 80019f0:	00802034 	movhi	r2,128
 80019f4:	99001034 	orhi	r4,r19,64
 80019f8:	10bfffc4 	addi	r2,r2,-1
 80019fc:	b029883a 	mov	r20,r22
 8001a00:	2088703a 	and	r4,r4,r2
 8001a04:	003fba06 	br	80018f0 <__mulsf3+0x244>
 8001a08:	00802034 	movhi	r2,128
 8001a0c:	91001034 	orhi	r4,r18,64
 8001a10:	10bfffc4 	addi	r2,r2,-1
 8001a14:	2088703a 	and	r4,r4,r2
 8001a18:	003fb506 	br	80018f0 <__mulsf3+0x244>
 8001a1c:	00800044 	movi	r2,1
 8001a20:	10c7c83a 	sub	r3,r2,r3
 8001a24:	008006c4 	movi	r2,27
 8001a28:	10ff7016 	blt	r2,r3,80017ec <__mulsf3+0x140>
 8001a2c:	00800804 	movi	r2,32
 8001a30:	10c5c83a 	sub	r2,r2,r3
 8001a34:	9884983a 	sll	r2,r19,r2
 8001a38:	98c6d83a 	srl	r3,r19,r3
 8001a3c:	1004c03a 	cmpne	r2,r2,zero
 8001a40:	1884b03a 	or	r2,r3,r2
 8001a44:	10c001cc 	andi	r3,r2,7
 8001a48:	18000426 	beq	r3,zero,8001a5c <__mulsf3+0x3b0>
 8001a4c:	10c003cc 	andi	r3,r2,15
 8001a50:	01000104 	movi	r4,4
 8001a54:	19000126 	beq	r3,r4,8001a5c <__mulsf3+0x3b0>
 8001a58:	1105883a 	add	r2,r2,r4
 8001a5c:	10c1002c 	andhi	r3,r2,1024
 8001a60:	18000626 	beq	r3,zero,8001a7c <__mulsf3+0x3d0>
 8001a64:	a829883a 	mov	r20,r21
 8001a68:	00c00044 	movi	r3,1
 8001a6c:	0009883a 	mov	r4,zero
 8001a70:	003f6106 	br	80017f8 <__mulsf3+0x14c>
 8001a74:	3821883a 	mov	r16,r7
 8001a78:	003fc506 	br	8001990 <__mulsf3+0x2e4>
 8001a7c:	100491ba 	slli	r2,r2,6
 8001a80:	a829883a 	mov	r20,r21
 8001a84:	0007883a 	mov	r3,zero
 8001a88:	1008d27a 	srli	r4,r2,9
 8001a8c:	003f5a06 	br	80017f8 <__mulsf3+0x14c>
 8001a90:	00802034 	movhi	r2,128
 8001a94:	99001034 	orhi	r4,r19,64
 8001a98:	10bfffc4 	addi	r2,r2,-1
 8001a9c:	a829883a 	mov	r20,r21
 8001aa0:	2088703a 	and	r4,r4,r2
 8001aa4:	003f9206 	br	80018f0 <__mulsf3+0x244>

08001aa8 <__adddf3>:
 8001aa8:	02c00434 	movhi	r11,16
 8001aac:	5affffc4 	addi	r11,r11,-1
 8001ab0:	2806d7fa 	srli	r3,r5,31
 8001ab4:	2ad4703a 	and	r10,r5,r11
 8001ab8:	3ad2703a 	and	r9,r7,r11
 8001abc:	3804d53a 	srli	r2,r7,20
 8001ac0:	3018d77a 	srli	r12,r6,29
 8001ac4:	280ad53a 	srli	r5,r5,20
 8001ac8:	501490fa 	slli	r10,r10,3
 8001acc:	2010d77a 	srli	r8,r4,29
 8001ad0:	481290fa 	slli	r9,r9,3
 8001ad4:	380ed7fa 	srli	r7,r7,31
 8001ad8:	defffb04 	addi	sp,sp,-20
 8001adc:	dc800215 	stw	r18,8(sp)
 8001ae0:	dc400115 	stw	r17,4(sp)
 8001ae4:	dc000015 	stw	r16,0(sp)
 8001ae8:	dfc00415 	stw	ra,16(sp)
 8001aec:	dcc00315 	stw	r19,12(sp)
 8001af0:	1c803fcc 	andi	r18,r3,255
 8001af4:	2c01ffcc 	andi	r16,r5,2047
 8001af8:	5210b03a 	or	r8,r10,r8
 8001afc:	202290fa 	slli	r17,r4,3
 8001b00:	1081ffcc 	andi	r2,r2,2047
 8001b04:	4b12b03a 	or	r9,r9,r12
 8001b08:	300c90fa 	slli	r6,r6,3
 8001b0c:	91c07526 	beq	r18,r7,8001ce4 <__adddf3+0x23c>
 8001b10:	8087c83a 	sub	r3,r16,r2
 8001b14:	00c0ab0e 	bge	zero,r3,8001dc4 <__adddf3+0x31c>
 8001b18:	10002a1e 	bne	r2,zero,8001bc4 <__adddf3+0x11c>
 8001b1c:	4984b03a 	or	r2,r9,r6
 8001b20:	1000961e 	bne	r2,zero,8001d7c <__adddf3+0x2d4>
 8001b24:	888001cc 	andi	r2,r17,7
 8001b28:	10000726 	beq	r2,zero,8001b48 <__adddf3+0xa0>
 8001b2c:	888003cc 	andi	r2,r17,15
 8001b30:	00c00104 	movi	r3,4
 8001b34:	10c00426 	beq	r2,r3,8001b48 <__adddf3+0xa0>
 8001b38:	88c7883a 	add	r3,r17,r3
 8001b3c:	1c63803a 	cmpltu	r17,r3,r17
 8001b40:	4451883a 	add	r8,r8,r17
 8001b44:	1823883a 	mov	r17,r3
 8001b48:	4080202c 	andhi	r2,r8,128
 8001b4c:	10005926 	beq	r2,zero,8001cb4 <__adddf3+0x20c>
 8001b50:	84000044 	addi	r16,r16,1
 8001b54:	0081ffc4 	movi	r2,2047
 8001b58:	8080ba26 	beq	r16,r2,8001e44 <__adddf3+0x39c>
 8001b5c:	00bfe034 	movhi	r2,65408
 8001b60:	10bfffc4 	addi	r2,r2,-1
 8001b64:	4090703a 	and	r8,r8,r2
 8001b68:	4004977a 	slli	r2,r8,29
 8001b6c:	4010927a 	slli	r8,r8,9
 8001b70:	8822d0fa 	srli	r17,r17,3
 8001b74:	8401ffcc 	andi	r16,r16,2047
 8001b78:	4010d33a 	srli	r8,r8,12
 8001b7c:	9007883a 	mov	r3,r18
 8001b80:	1444b03a 	or	r2,r2,r17
 8001b84:	8401ffcc 	andi	r16,r16,2047
 8001b88:	8020953a 	slli	r16,r16,20
 8001b8c:	18c03fcc 	andi	r3,r3,255
 8001b90:	01000434 	movhi	r4,16
 8001b94:	213fffc4 	addi	r4,r4,-1
 8001b98:	180697fa 	slli	r3,r3,31
 8001b9c:	4110703a 	and	r8,r8,r4
 8001ba0:	4410b03a 	or	r8,r8,r16
 8001ba4:	40c6b03a 	or	r3,r8,r3
 8001ba8:	dfc00417 	ldw	ra,16(sp)
 8001bac:	dcc00317 	ldw	r19,12(sp)
 8001bb0:	dc800217 	ldw	r18,8(sp)
 8001bb4:	dc400117 	ldw	r17,4(sp)
 8001bb8:	dc000017 	ldw	r16,0(sp)
 8001bbc:	dec00504 	addi	sp,sp,20
 8001bc0:	f800283a 	ret
 8001bc4:	0081ffc4 	movi	r2,2047
 8001bc8:	80bfd626 	beq	r16,r2,8001b24 <__adddf3+0x7c>
 8001bcc:	4a402034 	orhi	r9,r9,128
 8001bd0:	00800e04 	movi	r2,56
 8001bd4:	10c09f16 	blt	r2,r3,8001e54 <__adddf3+0x3ac>
 8001bd8:	008007c4 	movi	r2,31
 8001bdc:	10c0c216 	blt	r2,r3,8001ee8 <__adddf3+0x440>
 8001be0:	00800804 	movi	r2,32
 8001be4:	10c5c83a 	sub	r2,r2,r3
 8001be8:	488a983a 	sll	r5,r9,r2
 8001bec:	30c8d83a 	srl	r4,r6,r3
 8001bf0:	3084983a 	sll	r2,r6,r2
 8001bf4:	48c6d83a 	srl	r3,r9,r3
 8001bf8:	290cb03a 	or	r6,r5,r4
 8001bfc:	1004c03a 	cmpne	r2,r2,zero
 8001c00:	308cb03a 	or	r6,r6,r2
 8001c04:	898dc83a 	sub	r6,r17,r6
 8001c08:	89a3803a 	cmpltu	r17,r17,r6
 8001c0c:	40d1c83a 	sub	r8,r8,r3
 8001c10:	4451c83a 	sub	r8,r8,r17
 8001c14:	3023883a 	mov	r17,r6
 8001c18:	4080202c 	andhi	r2,r8,128
 8001c1c:	10002326 	beq	r2,zero,8001cac <__adddf3+0x204>
 8001c20:	04c02034 	movhi	r19,128
 8001c24:	9cffffc4 	addi	r19,r19,-1
 8001c28:	44e6703a 	and	r19,r8,r19
 8001c2c:	98007626 	beq	r19,zero,8001e08 <__adddf3+0x360>
 8001c30:	9809883a 	mov	r4,r19
 8001c34:	80036c80 	call	80036c8 <__clzsi2>
 8001c38:	10fffe04 	addi	r3,r2,-8
 8001c3c:	010007c4 	movi	r4,31
 8001c40:	20c07716 	blt	r4,r3,8001e20 <__adddf3+0x378>
 8001c44:	00800804 	movi	r2,32
 8001c48:	10c5c83a 	sub	r2,r2,r3
 8001c4c:	8884d83a 	srl	r2,r17,r2
 8001c50:	98d0983a 	sll	r8,r19,r3
 8001c54:	88e2983a 	sll	r17,r17,r3
 8001c58:	1204b03a 	or	r2,r2,r8
 8001c5c:	1c007416 	blt	r3,r16,8001e30 <__adddf3+0x388>
 8001c60:	1c21c83a 	sub	r16,r3,r16
 8001c64:	82000044 	addi	r8,r16,1
 8001c68:	00c007c4 	movi	r3,31
 8001c6c:	1a009116 	blt	r3,r8,8001eb4 <__adddf3+0x40c>
 8001c70:	00c00804 	movi	r3,32
 8001c74:	1a07c83a 	sub	r3,r3,r8
 8001c78:	8a08d83a 	srl	r4,r17,r8
 8001c7c:	88e2983a 	sll	r17,r17,r3
 8001c80:	10c6983a 	sll	r3,r2,r3
 8001c84:	1210d83a 	srl	r8,r2,r8
 8001c88:	8804c03a 	cmpne	r2,r17,zero
 8001c8c:	1906b03a 	or	r3,r3,r4
 8001c90:	18a2b03a 	or	r17,r3,r2
 8001c94:	0021883a 	mov	r16,zero
 8001c98:	003fa206 	br	8001b24 <__adddf3+0x7c>
 8001c9c:	1890b03a 	or	r8,r3,r2
 8001ca0:	40017d26 	beq	r8,zero,8002298 <__adddf3+0x7f0>
 8001ca4:	1011883a 	mov	r8,r2
 8001ca8:	1823883a 	mov	r17,r3
 8001cac:	888001cc 	andi	r2,r17,7
 8001cb0:	103f9e1e 	bne	r2,zero,8001b2c <__adddf3+0x84>
 8001cb4:	4004977a 	slli	r2,r8,29
 8001cb8:	8822d0fa 	srli	r17,r17,3
 8001cbc:	4010d0fa 	srli	r8,r8,3
 8001cc0:	9007883a 	mov	r3,r18
 8001cc4:	1444b03a 	or	r2,r2,r17
 8001cc8:	0101ffc4 	movi	r4,2047
 8001ccc:	81002426 	beq	r16,r4,8001d60 <__adddf3+0x2b8>
 8001cd0:	8120703a 	and	r16,r16,r4
 8001cd4:	01000434 	movhi	r4,16
 8001cd8:	213fffc4 	addi	r4,r4,-1
 8001cdc:	4110703a 	and	r8,r8,r4
 8001ce0:	003fa806 	br	8001b84 <__adddf3+0xdc>
 8001ce4:	8089c83a 	sub	r4,r16,r2
 8001ce8:	01005e0e 	bge	zero,r4,8001e64 <__adddf3+0x3bc>
 8001cec:	10002b26 	beq	r2,zero,8001d9c <__adddf3+0x2f4>
 8001cf0:	0081ffc4 	movi	r2,2047
 8001cf4:	80bf8b26 	beq	r16,r2,8001b24 <__adddf3+0x7c>
 8001cf8:	4a402034 	orhi	r9,r9,128
 8001cfc:	00800e04 	movi	r2,56
 8001d00:	1100a40e 	bge	r2,r4,8001f94 <__adddf3+0x4ec>
 8001d04:	498cb03a 	or	r6,r9,r6
 8001d08:	300ac03a 	cmpne	r5,r6,zero
 8001d0c:	0013883a 	mov	r9,zero
 8001d10:	2c4b883a 	add	r5,r5,r17
 8001d14:	2c63803a 	cmpltu	r17,r5,r17
 8001d18:	4a11883a 	add	r8,r9,r8
 8001d1c:	8a11883a 	add	r8,r17,r8
 8001d20:	2823883a 	mov	r17,r5
 8001d24:	4080202c 	andhi	r2,r8,128
 8001d28:	103fe026 	beq	r2,zero,8001cac <__adddf3+0x204>
 8001d2c:	84000044 	addi	r16,r16,1
 8001d30:	0081ffc4 	movi	r2,2047
 8001d34:	8080d226 	beq	r16,r2,8002080 <__adddf3+0x5d8>
 8001d38:	00bfe034 	movhi	r2,65408
 8001d3c:	10bfffc4 	addi	r2,r2,-1
 8001d40:	4090703a 	and	r8,r8,r2
 8001d44:	880ad07a 	srli	r5,r17,1
 8001d48:	400897fa 	slli	r4,r8,31
 8001d4c:	88c0004c 	andi	r3,r17,1
 8001d50:	28e2b03a 	or	r17,r5,r3
 8001d54:	4010d07a 	srli	r8,r8,1
 8001d58:	2462b03a 	or	r17,r4,r17
 8001d5c:	003f7106 	br	8001b24 <__adddf3+0x7c>
 8001d60:	4088b03a 	or	r4,r8,r2
 8001d64:	20014526 	beq	r4,zero,800227c <__adddf3+0x7d4>
 8001d68:	01000434 	movhi	r4,16
 8001d6c:	42000234 	orhi	r8,r8,8
 8001d70:	213fffc4 	addi	r4,r4,-1
 8001d74:	4110703a 	and	r8,r8,r4
 8001d78:	003f8206 	br	8001b84 <__adddf3+0xdc>
 8001d7c:	18ffffc4 	addi	r3,r3,-1
 8001d80:	1800491e 	bne	r3,zero,8001ea8 <__adddf3+0x400>
 8001d84:	898bc83a 	sub	r5,r17,r6
 8001d88:	8963803a 	cmpltu	r17,r17,r5
 8001d8c:	4251c83a 	sub	r8,r8,r9
 8001d90:	4451c83a 	sub	r8,r8,r17
 8001d94:	2823883a 	mov	r17,r5
 8001d98:	003f9f06 	br	8001c18 <__adddf3+0x170>
 8001d9c:	4984b03a 	or	r2,r9,r6
 8001da0:	103f6026 	beq	r2,zero,8001b24 <__adddf3+0x7c>
 8001da4:	213fffc4 	addi	r4,r4,-1
 8001da8:	2000931e 	bne	r4,zero,8001ff8 <__adddf3+0x550>
 8001dac:	898d883a 	add	r6,r17,r6
 8001db0:	3463803a 	cmpltu	r17,r6,r17
 8001db4:	4251883a 	add	r8,r8,r9
 8001db8:	8a11883a 	add	r8,r17,r8
 8001dbc:	3023883a 	mov	r17,r6
 8001dc0:	003fd806 	br	8001d24 <__adddf3+0x27c>
 8001dc4:	1800541e 	bne	r3,zero,8001f18 <__adddf3+0x470>
 8001dc8:	80800044 	addi	r2,r16,1
 8001dcc:	1081ffcc 	andi	r2,r2,2047
 8001dd0:	00c00044 	movi	r3,1
 8001dd4:	1880a00e 	bge	r3,r2,8002058 <__adddf3+0x5b0>
 8001dd8:	8989c83a 	sub	r4,r17,r6
 8001ddc:	8905803a 	cmpltu	r2,r17,r4
 8001de0:	4267c83a 	sub	r19,r8,r9
 8001de4:	98a7c83a 	sub	r19,r19,r2
 8001de8:	9880202c 	andhi	r2,r19,128
 8001dec:	10006326 	beq	r2,zero,8001f7c <__adddf3+0x4d4>
 8001df0:	3463c83a 	sub	r17,r6,r17
 8001df4:	4a07c83a 	sub	r3,r9,r8
 8001df8:	344d803a 	cmpltu	r6,r6,r17
 8001dfc:	19a7c83a 	sub	r19,r3,r6
 8001e00:	3825883a 	mov	r18,r7
 8001e04:	983f8a1e 	bne	r19,zero,8001c30 <__adddf3+0x188>
 8001e08:	8809883a 	mov	r4,r17
 8001e0c:	80036c80 	call	80036c8 <__clzsi2>
 8001e10:	10800804 	addi	r2,r2,32
 8001e14:	10fffe04 	addi	r3,r2,-8
 8001e18:	010007c4 	movi	r4,31
 8001e1c:	20ff890e 	bge	r4,r3,8001c44 <__adddf3+0x19c>
 8001e20:	10bff604 	addi	r2,r2,-40
 8001e24:	8884983a 	sll	r2,r17,r2
 8001e28:	0023883a 	mov	r17,zero
 8001e2c:	1c3f8c0e 	bge	r3,r16,8001c60 <__adddf3+0x1b8>
 8001e30:	023fe034 	movhi	r8,65408
 8001e34:	423fffc4 	addi	r8,r8,-1
 8001e38:	80e1c83a 	sub	r16,r16,r3
 8001e3c:	1210703a 	and	r8,r2,r8
 8001e40:	003f3806 	br	8001b24 <__adddf3+0x7c>
 8001e44:	9007883a 	mov	r3,r18
 8001e48:	0011883a 	mov	r8,zero
 8001e4c:	0005883a 	mov	r2,zero
 8001e50:	003f4c06 	br	8001b84 <__adddf3+0xdc>
 8001e54:	498cb03a 	or	r6,r9,r6
 8001e58:	300cc03a 	cmpne	r6,r6,zero
 8001e5c:	0007883a 	mov	r3,zero
 8001e60:	003f6806 	br	8001c04 <__adddf3+0x15c>
 8001e64:	20009c1e 	bne	r4,zero,80020d8 <__adddf3+0x630>
 8001e68:	80800044 	addi	r2,r16,1
 8001e6c:	1141ffcc 	andi	r5,r2,2047
 8001e70:	01000044 	movi	r4,1
 8001e74:	2140670e 	bge	r4,r5,8002014 <__adddf3+0x56c>
 8001e78:	0101ffc4 	movi	r4,2047
 8001e7c:	11007f26 	beq	r2,r4,800207c <__adddf3+0x5d4>
 8001e80:	898d883a 	add	r6,r17,r6
 8001e84:	4247883a 	add	r3,r8,r9
 8001e88:	3451803a 	cmpltu	r8,r6,r17
 8001e8c:	40d1883a 	add	r8,r8,r3
 8001e90:	402297fa 	slli	r17,r8,31
 8001e94:	300cd07a 	srli	r6,r6,1
 8001e98:	4010d07a 	srli	r8,r8,1
 8001e9c:	1021883a 	mov	r16,r2
 8001ea0:	89a2b03a 	or	r17,r17,r6
 8001ea4:	003f1f06 	br	8001b24 <__adddf3+0x7c>
 8001ea8:	0081ffc4 	movi	r2,2047
 8001eac:	80bf481e 	bne	r16,r2,8001bd0 <__adddf3+0x128>
 8001eb0:	003f1c06 	br	8001b24 <__adddf3+0x7c>
 8001eb4:	843ff844 	addi	r16,r16,-31
 8001eb8:	01000804 	movi	r4,32
 8001ebc:	1406d83a 	srl	r3,r2,r16
 8001ec0:	41005026 	beq	r8,r4,8002004 <__adddf3+0x55c>
 8001ec4:	01001004 	movi	r4,64
 8001ec8:	2211c83a 	sub	r8,r4,r8
 8001ecc:	1204983a 	sll	r2,r2,r8
 8001ed0:	88a2b03a 	or	r17,r17,r2
 8001ed4:	8822c03a 	cmpne	r17,r17,zero
 8001ed8:	1c62b03a 	or	r17,r3,r17
 8001edc:	0011883a 	mov	r8,zero
 8001ee0:	0021883a 	mov	r16,zero
 8001ee4:	003f7106 	br	8001cac <__adddf3+0x204>
 8001ee8:	193ff804 	addi	r4,r3,-32
 8001eec:	00800804 	movi	r2,32
 8001ef0:	4908d83a 	srl	r4,r9,r4
 8001ef4:	18804526 	beq	r3,r2,800200c <__adddf3+0x564>
 8001ef8:	00801004 	movi	r2,64
 8001efc:	10c5c83a 	sub	r2,r2,r3
 8001f00:	4886983a 	sll	r3,r9,r2
 8001f04:	198cb03a 	or	r6,r3,r6
 8001f08:	300cc03a 	cmpne	r6,r6,zero
 8001f0c:	218cb03a 	or	r6,r4,r6
 8001f10:	0007883a 	mov	r3,zero
 8001f14:	003f3b06 	br	8001c04 <__adddf3+0x15c>
 8001f18:	80002a26 	beq	r16,zero,8001fc4 <__adddf3+0x51c>
 8001f1c:	0101ffc4 	movi	r4,2047
 8001f20:	11006826 	beq	r2,r4,80020c4 <__adddf3+0x61c>
 8001f24:	00c7c83a 	sub	r3,zero,r3
 8001f28:	42002034 	orhi	r8,r8,128
 8001f2c:	01000e04 	movi	r4,56
 8001f30:	20c07c16 	blt	r4,r3,8002124 <__adddf3+0x67c>
 8001f34:	010007c4 	movi	r4,31
 8001f38:	20c0da16 	blt	r4,r3,80022a4 <__adddf3+0x7fc>
 8001f3c:	01000804 	movi	r4,32
 8001f40:	20c9c83a 	sub	r4,r4,r3
 8001f44:	4114983a 	sll	r10,r8,r4
 8001f48:	88cad83a 	srl	r5,r17,r3
 8001f4c:	8908983a 	sll	r4,r17,r4
 8001f50:	40c6d83a 	srl	r3,r8,r3
 8001f54:	5162b03a 	or	r17,r10,r5
 8001f58:	2008c03a 	cmpne	r4,r4,zero
 8001f5c:	8922b03a 	or	r17,r17,r4
 8001f60:	3463c83a 	sub	r17,r6,r17
 8001f64:	48c7c83a 	sub	r3,r9,r3
 8001f68:	344d803a 	cmpltu	r6,r6,r17
 8001f6c:	1991c83a 	sub	r8,r3,r6
 8001f70:	1021883a 	mov	r16,r2
 8001f74:	3825883a 	mov	r18,r7
 8001f78:	003f2706 	br	8001c18 <__adddf3+0x170>
 8001f7c:	24d0b03a 	or	r8,r4,r19
 8001f80:	40001b1e 	bne	r8,zero,8001ff0 <__adddf3+0x548>
 8001f84:	0005883a 	mov	r2,zero
 8001f88:	0007883a 	mov	r3,zero
 8001f8c:	0021883a 	mov	r16,zero
 8001f90:	003f4d06 	br	8001cc8 <__adddf3+0x220>
 8001f94:	008007c4 	movi	r2,31
 8001f98:	11003c16 	blt	r2,r4,800208c <__adddf3+0x5e4>
 8001f9c:	00800804 	movi	r2,32
 8001fa0:	1105c83a 	sub	r2,r2,r4
 8001fa4:	488e983a 	sll	r7,r9,r2
 8001fa8:	310ad83a 	srl	r5,r6,r4
 8001fac:	3084983a 	sll	r2,r6,r2
 8001fb0:	4912d83a 	srl	r9,r9,r4
 8001fb4:	394ab03a 	or	r5,r7,r5
 8001fb8:	1004c03a 	cmpne	r2,r2,zero
 8001fbc:	288ab03a 	or	r5,r5,r2
 8001fc0:	003f5306 	br	8001d10 <__adddf3+0x268>
 8001fc4:	4448b03a 	or	r4,r8,r17
 8001fc8:	20003e26 	beq	r4,zero,80020c4 <__adddf3+0x61c>
 8001fcc:	00c6303a 	nor	r3,zero,r3
 8001fd0:	18003a1e 	bne	r3,zero,80020bc <__adddf3+0x614>
 8001fd4:	3463c83a 	sub	r17,r6,r17
 8001fd8:	4a07c83a 	sub	r3,r9,r8
 8001fdc:	344d803a 	cmpltu	r6,r6,r17
 8001fe0:	1991c83a 	sub	r8,r3,r6
 8001fe4:	1021883a 	mov	r16,r2
 8001fe8:	3825883a 	mov	r18,r7
 8001fec:	003f0a06 	br	8001c18 <__adddf3+0x170>
 8001ff0:	2023883a 	mov	r17,r4
 8001ff4:	003f0d06 	br	8001c2c <__adddf3+0x184>
 8001ff8:	0081ffc4 	movi	r2,2047
 8001ffc:	80bf3f1e 	bne	r16,r2,8001cfc <__adddf3+0x254>
 8002000:	003ec806 	br	8001b24 <__adddf3+0x7c>
 8002004:	0005883a 	mov	r2,zero
 8002008:	003fb106 	br	8001ed0 <__adddf3+0x428>
 800200c:	0007883a 	mov	r3,zero
 8002010:	003fbc06 	br	8001f04 <__adddf3+0x45c>
 8002014:	4444b03a 	or	r2,r8,r17
 8002018:	8000871e 	bne	r16,zero,8002238 <__adddf3+0x790>
 800201c:	1000ba26 	beq	r2,zero,8002308 <__adddf3+0x860>
 8002020:	4984b03a 	or	r2,r9,r6
 8002024:	103ebf26 	beq	r2,zero,8001b24 <__adddf3+0x7c>
 8002028:	8985883a 	add	r2,r17,r6
 800202c:	4247883a 	add	r3,r8,r9
 8002030:	1451803a 	cmpltu	r8,r2,r17
 8002034:	40d1883a 	add	r8,r8,r3
 8002038:	40c0202c 	andhi	r3,r8,128
 800203c:	1023883a 	mov	r17,r2
 8002040:	183f1a26 	beq	r3,zero,8001cac <__adddf3+0x204>
 8002044:	00bfe034 	movhi	r2,65408
 8002048:	10bfffc4 	addi	r2,r2,-1
 800204c:	2021883a 	mov	r16,r4
 8002050:	4090703a 	and	r8,r8,r2
 8002054:	003eb306 	br	8001b24 <__adddf3+0x7c>
 8002058:	4444b03a 	or	r2,r8,r17
 800205c:	8000291e 	bne	r16,zero,8002104 <__adddf3+0x65c>
 8002060:	10004b1e 	bne	r2,zero,8002190 <__adddf3+0x6e8>
 8002064:	4990b03a 	or	r8,r9,r6
 8002068:	40008b26 	beq	r8,zero,8002298 <__adddf3+0x7f0>
 800206c:	4811883a 	mov	r8,r9
 8002070:	3023883a 	mov	r17,r6
 8002074:	3825883a 	mov	r18,r7
 8002078:	003eaa06 	br	8001b24 <__adddf3+0x7c>
 800207c:	1021883a 	mov	r16,r2
 8002080:	0011883a 	mov	r8,zero
 8002084:	0005883a 	mov	r2,zero
 8002088:	003f0f06 	br	8001cc8 <__adddf3+0x220>
 800208c:	217ff804 	addi	r5,r4,-32
 8002090:	00800804 	movi	r2,32
 8002094:	494ad83a 	srl	r5,r9,r5
 8002098:	20807d26 	beq	r4,r2,8002290 <__adddf3+0x7e8>
 800209c:	00801004 	movi	r2,64
 80020a0:	1109c83a 	sub	r4,r2,r4
 80020a4:	4912983a 	sll	r9,r9,r4
 80020a8:	498cb03a 	or	r6,r9,r6
 80020ac:	300cc03a 	cmpne	r6,r6,zero
 80020b0:	298ab03a 	or	r5,r5,r6
 80020b4:	0013883a 	mov	r9,zero
 80020b8:	003f1506 	br	8001d10 <__adddf3+0x268>
 80020bc:	0101ffc4 	movi	r4,2047
 80020c0:	113f9a1e 	bne	r2,r4,8001f2c <__adddf3+0x484>
 80020c4:	4811883a 	mov	r8,r9
 80020c8:	3023883a 	mov	r17,r6
 80020cc:	1021883a 	mov	r16,r2
 80020d0:	3825883a 	mov	r18,r7
 80020d4:	003e9306 	br	8001b24 <__adddf3+0x7c>
 80020d8:	8000161e 	bne	r16,zero,8002134 <__adddf3+0x68c>
 80020dc:	444ab03a 	or	r5,r8,r17
 80020e0:	28005126 	beq	r5,zero,8002228 <__adddf3+0x780>
 80020e4:	0108303a 	nor	r4,zero,r4
 80020e8:	20004d1e 	bne	r4,zero,8002220 <__adddf3+0x778>
 80020ec:	89a3883a 	add	r17,r17,r6
 80020f0:	4253883a 	add	r9,r8,r9
 80020f4:	898d803a 	cmpltu	r6,r17,r6
 80020f8:	3251883a 	add	r8,r6,r9
 80020fc:	1021883a 	mov	r16,r2
 8002100:	003f0806 	br	8001d24 <__adddf3+0x27c>
 8002104:	1000301e 	bne	r2,zero,80021c8 <__adddf3+0x720>
 8002108:	4984b03a 	or	r2,r9,r6
 800210c:	10007126 	beq	r2,zero,80022d4 <__adddf3+0x82c>
 8002110:	4811883a 	mov	r8,r9
 8002114:	3023883a 	mov	r17,r6
 8002118:	3825883a 	mov	r18,r7
 800211c:	0401ffc4 	movi	r16,2047
 8002120:	003e8006 	br	8001b24 <__adddf3+0x7c>
 8002124:	4462b03a 	or	r17,r8,r17
 8002128:	8822c03a 	cmpne	r17,r17,zero
 800212c:	0007883a 	mov	r3,zero
 8002130:	003f8b06 	br	8001f60 <__adddf3+0x4b8>
 8002134:	0141ffc4 	movi	r5,2047
 8002138:	11403b26 	beq	r2,r5,8002228 <__adddf3+0x780>
 800213c:	0109c83a 	sub	r4,zero,r4
 8002140:	42002034 	orhi	r8,r8,128
 8002144:	01400e04 	movi	r5,56
 8002148:	29006716 	blt	r5,r4,80022e8 <__adddf3+0x840>
 800214c:	014007c4 	movi	r5,31
 8002150:	29007016 	blt	r5,r4,8002314 <__adddf3+0x86c>
 8002154:	01400804 	movi	r5,32
 8002158:	290bc83a 	sub	r5,r5,r4
 800215c:	4154983a 	sll	r10,r8,r5
 8002160:	890ed83a 	srl	r7,r17,r4
 8002164:	894a983a 	sll	r5,r17,r5
 8002168:	4108d83a 	srl	r4,r8,r4
 800216c:	51e2b03a 	or	r17,r10,r7
 8002170:	280ac03a 	cmpne	r5,r5,zero
 8002174:	8962b03a 	or	r17,r17,r5
 8002178:	89a3883a 	add	r17,r17,r6
 800217c:	2253883a 	add	r9,r4,r9
 8002180:	898d803a 	cmpltu	r6,r17,r6
 8002184:	3251883a 	add	r8,r6,r9
 8002188:	1021883a 	mov	r16,r2
 800218c:	003ee506 	br	8001d24 <__adddf3+0x27c>
 8002190:	4984b03a 	or	r2,r9,r6
 8002194:	103e6326 	beq	r2,zero,8001b24 <__adddf3+0x7c>
 8002198:	8987c83a 	sub	r3,r17,r6
 800219c:	88c9803a 	cmpltu	r4,r17,r3
 80021a0:	4245c83a 	sub	r2,r8,r9
 80021a4:	1105c83a 	sub	r2,r2,r4
 80021a8:	1100202c 	andhi	r4,r2,128
 80021ac:	203ebb26 	beq	r4,zero,8001c9c <__adddf3+0x1f4>
 80021b0:	3463c83a 	sub	r17,r6,r17
 80021b4:	4a07c83a 	sub	r3,r9,r8
 80021b8:	344d803a 	cmpltu	r6,r6,r17
 80021bc:	1991c83a 	sub	r8,r3,r6
 80021c0:	3825883a 	mov	r18,r7
 80021c4:	003e5706 	br	8001b24 <__adddf3+0x7c>
 80021c8:	4984b03a 	or	r2,r9,r6
 80021cc:	10002e26 	beq	r2,zero,8002288 <__adddf3+0x7e0>
 80021d0:	4004d0fa 	srli	r2,r8,3
 80021d4:	8822d0fa 	srli	r17,r17,3
 80021d8:	4010977a 	slli	r8,r8,29
 80021dc:	10c0022c 	andhi	r3,r2,8
 80021e0:	4462b03a 	or	r17,r8,r17
 80021e4:	18000826 	beq	r3,zero,8002208 <__adddf3+0x760>
 80021e8:	4808d0fa 	srli	r4,r9,3
 80021ec:	20c0022c 	andhi	r3,r4,8
 80021f0:	1800051e 	bne	r3,zero,8002208 <__adddf3+0x760>
 80021f4:	300cd0fa 	srli	r6,r6,3
 80021f8:	4806977a 	slli	r3,r9,29
 80021fc:	2005883a 	mov	r2,r4
 8002200:	3825883a 	mov	r18,r7
 8002204:	19a2b03a 	or	r17,r3,r6
 8002208:	8810d77a 	srli	r8,r17,29
 800220c:	100490fa 	slli	r2,r2,3
 8002210:	882290fa 	slli	r17,r17,3
 8002214:	0401ffc4 	movi	r16,2047
 8002218:	4090b03a 	or	r8,r8,r2
 800221c:	003e4106 	br	8001b24 <__adddf3+0x7c>
 8002220:	0141ffc4 	movi	r5,2047
 8002224:	117fc71e 	bne	r2,r5,8002144 <__adddf3+0x69c>
 8002228:	4811883a 	mov	r8,r9
 800222c:	3023883a 	mov	r17,r6
 8002230:	1021883a 	mov	r16,r2
 8002234:	003e3b06 	br	8001b24 <__adddf3+0x7c>
 8002238:	10002f26 	beq	r2,zero,80022f8 <__adddf3+0x850>
 800223c:	4984b03a 	or	r2,r9,r6
 8002240:	10001126 	beq	r2,zero,8002288 <__adddf3+0x7e0>
 8002244:	4004d0fa 	srli	r2,r8,3
 8002248:	8822d0fa 	srli	r17,r17,3
 800224c:	4010977a 	slli	r8,r8,29
 8002250:	10c0022c 	andhi	r3,r2,8
 8002254:	4462b03a 	or	r17,r8,r17
 8002258:	183feb26 	beq	r3,zero,8002208 <__adddf3+0x760>
 800225c:	4808d0fa 	srli	r4,r9,3
 8002260:	20c0022c 	andhi	r3,r4,8
 8002264:	183fe81e 	bne	r3,zero,8002208 <__adddf3+0x760>
 8002268:	300cd0fa 	srli	r6,r6,3
 800226c:	4806977a 	slli	r3,r9,29
 8002270:	2005883a 	mov	r2,r4
 8002274:	19a2b03a 	or	r17,r3,r6
 8002278:	003fe306 	br	8002208 <__adddf3+0x760>
 800227c:	0011883a 	mov	r8,zero
 8002280:	0005883a 	mov	r2,zero
 8002284:	003e3f06 	br	8001b84 <__adddf3+0xdc>
 8002288:	0401ffc4 	movi	r16,2047
 800228c:	003e2506 	br	8001b24 <__adddf3+0x7c>
 8002290:	0013883a 	mov	r9,zero
 8002294:	003f8406 	br	80020a8 <__adddf3+0x600>
 8002298:	0005883a 	mov	r2,zero
 800229c:	0007883a 	mov	r3,zero
 80022a0:	003e8906 	br	8001cc8 <__adddf3+0x220>
 80022a4:	197ff804 	addi	r5,r3,-32
 80022a8:	01000804 	movi	r4,32
 80022ac:	414ad83a 	srl	r5,r8,r5
 80022b0:	19002426 	beq	r3,r4,8002344 <__adddf3+0x89c>
 80022b4:	01001004 	movi	r4,64
 80022b8:	20c7c83a 	sub	r3,r4,r3
 80022bc:	40c6983a 	sll	r3,r8,r3
 80022c0:	1c46b03a 	or	r3,r3,r17
 80022c4:	1806c03a 	cmpne	r3,r3,zero
 80022c8:	28e2b03a 	or	r17,r5,r3
 80022cc:	0007883a 	mov	r3,zero
 80022d0:	003f2306 	br	8001f60 <__adddf3+0x4b8>
 80022d4:	0007883a 	mov	r3,zero
 80022d8:	5811883a 	mov	r8,r11
 80022dc:	00bfffc4 	movi	r2,-1
 80022e0:	0401ffc4 	movi	r16,2047
 80022e4:	003e7806 	br	8001cc8 <__adddf3+0x220>
 80022e8:	4462b03a 	or	r17,r8,r17
 80022ec:	8822c03a 	cmpne	r17,r17,zero
 80022f0:	0009883a 	mov	r4,zero
 80022f4:	003fa006 	br	8002178 <__adddf3+0x6d0>
 80022f8:	4811883a 	mov	r8,r9
 80022fc:	3023883a 	mov	r17,r6
 8002300:	0401ffc4 	movi	r16,2047
 8002304:	003e0706 	br	8001b24 <__adddf3+0x7c>
 8002308:	4811883a 	mov	r8,r9
 800230c:	3023883a 	mov	r17,r6
 8002310:	003e0406 	br	8001b24 <__adddf3+0x7c>
 8002314:	21fff804 	addi	r7,r4,-32
 8002318:	01400804 	movi	r5,32
 800231c:	41ced83a 	srl	r7,r8,r7
 8002320:	21400a26 	beq	r4,r5,800234c <__adddf3+0x8a4>
 8002324:	01401004 	movi	r5,64
 8002328:	2909c83a 	sub	r4,r5,r4
 800232c:	4108983a 	sll	r4,r8,r4
 8002330:	2448b03a 	or	r4,r4,r17
 8002334:	2008c03a 	cmpne	r4,r4,zero
 8002338:	3922b03a 	or	r17,r7,r4
 800233c:	0009883a 	mov	r4,zero
 8002340:	003f8d06 	br	8002178 <__adddf3+0x6d0>
 8002344:	0007883a 	mov	r3,zero
 8002348:	003fdd06 	br	80022c0 <__adddf3+0x818>
 800234c:	0009883a 	mov	r4,zero
 8002350:	003ff706 	br	8002330 <__adddf3+0x888>

08002354 <__muldf3>:
 8002354:	defff304 	addi	sp,sp,-52
 8002358:	2804d53a 	srli	r2,r5,20
 800235c:	dd800915 	stw	r22,36(sp)
 8002360:	282cd7fa 	srli	r22,r5,31
 8002364:	dc000315 	stw	r16,12(sp)
 8002368:	04000434 	movhi	r16,16
 800236c:	dd400815 	stw	r21,32(sp)
 8002370:	dc800515 	stw	r18,20(sp)
 8002374:	843fffc4 	addi	r16,r16,-1
 8002378:	dfc00c15 	stw	ra,48(sp)
 800237c:	df000b15 	stw	fp,44(sp)
 8002380:	ddc00a15 	stw	r23,40(sp)
 8002384:	dd000715 	stw	r20,28(sp)
 8002388:	dcc00615 	stw	r19,24(sp)
 800238c:	dc400415 	stw	r17,16(sp)
 8002390:	1481ffcc 	andi	r18,r2,2047
 8002394:	2c20703a 	and	r16,r5,r16
 8002398:	b02b883a 	mov	r21,r22
 800239c:	b2403fcc 	andi	r9,r22,255
 80023a0:	90006026 	beq	r18,zero,8002524 <__muldf3+0x1d0>
 80023a4:	0081ffc4 	movi	r2,2047
 80023a8:	2029883a 	mov	r20,r4
 80023ac:	90803626 	beq	r18,r2,8002488 <__muldf3+0x134>
 80023b0:	80800434 	orhi	r2,r16,16
 80023b4:	100490fa 	slli	r2,r2,3
 80023b8:	2020d77a 	srli	r16,r4,29
 80023bc:	202890fa 	slli	r20,r4,3
 80023c0:	94bf0044 	addi	r18,r18,-1023
 80023c4:	80a0b03a 	or	r16,r16,r2
 80023c8:	0027883a 	mov	r19,zero
 80023cc:	0039883a 	mov	fp,zero
 80023d0:	3804d53a 	srli	r2,r7,20
 80023d4:	382ed7fa 	srli	r23,r7,31
 80023d8:	04400434 	movhi	r17,16
 80023dc:	8c7fffc4 	addi	r17,r17,-1
 80023e0:	1081ffcc 	andi	r2,r2,2047
 80023e4:	3011883a 	mov	r8,r6
 80023e8:	3c62703a 	and	r17,r7,r17
 80023ec:	ba803fcc 	andi	r10,r23,255
 80023f0:	10006d26 	beq	r2,zero,80025a8 <__muldf3+0x254>
 80023f4:	00c1ffc4 	movi	r3,2047
 80023f8:	10c06526 	beq	r2,r3,8002590 <__muldf3+0x23c>
 80023fc:	88c00434 	orhi	r3,r17,16
 8002400:	180690fa 	slli	r3,r3,3
 8002404:	3022d77a 	srli	r17,r6,29
 8002408:	301090fa 	slli	r8,r6,3
 800240c:	10bf0044 	addi	r2,r2,-1023
 8002410:	88e2b03a 	or	r17,r17,r3
 8002414:	000b883a 	mov	r5,zero
 8002418:	9085883a 	add	r2,r18,r2
 800241c:	2cc8b03a 	or	r4,r5,r19
 8002420:	00c003c4 	movi	r3,15
 8002424:	bdacf03a 	xor	r22,r23,r22
 8002428:	12c00044 	addi	r11,r2,1
 800242c:	19009936 	bltu	r3,r4,8002694 <__muldf3+0x340>
 8002430:	200890ba 	slli	r4,r4,2
 8002434:	00c20034 	movhi	r3,2048
 8002438:	18c91204 	addi	r3,r3,9288
 800243c:	20c9883a 	add	r4,r4,r3
 8002440:	20c00017 	ldw	r3,0(r4)
 8002444:	1800683a 	jmp	r3
 8002448:	08002694 	ori	zero,at,154
 800244c:	080024a8 	cmpgeui	zero,at,146
 8002450:	080024a8 	cmpgeui	zero,at,146
 8002454:	080024a4 	muli	zero,at,146
 8002458:	08002670 	cmpltui	zero,at,153
 800245c:	08002670 	cmpltui	zero,at,153
 8002460:	08002658 	cmpnei	zero,at,153
 8002464:	080024a4 	muli	zero,at,146
 8002468:	08002670 	cmpltui	zero,at,153
 800246c:	08002658 	cmpnei	zero,at,153
 8002470:	08002670 	cmpltui	zero,at,153
 8002474:	080024a4 	muli	zero,at,146
 8002478:	08002680 	call	800268 <__alt_mem_new_sdram_controller_0-0x77ffd98>
 800247c:	08002680 	call	800268 <__alt_mem_new_sdram_controller_0-0x77ffd98>
 8002480:	08002680 	call	800268 <__alt_mem_new_sdram_controller_0-0x77ffd98>
 8002484:	0800289c 	xori	zero,at,162
 8002488:	2404b03a 	or	r2,r4,r16
 800248c:	10006f1e 	bne	r2,zero,800264c <__muldf3+0x2f8>
 8002490:	04c00204 	movi	r19,8
 8002494:	0021883a 	mov	r16,zero
 8002498:	0029883a 	mov	r20,zero
 800249c:	07000084 	movi	fp,2
 80024a0:	003fcb06 	br	80023d0 <__muldf3+0x7c>
 80024a4:	502d883a 	mov	r22,r10
 80024a8:	00800084 	movi	r2,2
 80024ac:	28805726 	beq	r5,r2,800260c <__muldf3+0x2b8>
 80024b0:	008000c4 	movi	r2,3
 80024b4:	28816626 	beq	r5,r2,8002a50 <__muldf3+0x6fc>
 80024b8:	00800044 	movi	r2,1
 80024bc:	2881411e 	bne	r5,r2,80029c4 <__muldf3+0x670>
 80024c0:	b02b883a 	mov	r21,r22
 80024c4:	0005883a 	mov	r2,zero
 80024c8:	000b883a 	mov	r5,zero
 80024cc:	0029883a 	mov	r20,zero
 80024d0:	1004953a 	slli	r2,r2,20
 80024d4:	a8c03fcc 	andi	r3,r21,255
 80024d8:	04400434 	movhi	r17,16
 80024dc:	8c7fffc4 	addi	r17,r17,-1
 80024e0:	180697fa 	slli	r3,r3,31
 80024e4:	2c4a703a 	and	r5,r5,r17
 80024e8:	288ab03a 	or	r5,r5,r2
 80024ec:	28c6b03a 	or	r3,r5,r3
 80024f0:	a005883a 	mov	r2,r20
 80024f4:	dfc00c17 	ldw	ra,48(sp)
 80024f8:	df000b17 	ldw	fp,44(sp)
 80024fc:	ddc00a17 	ldw	r23,40(sp)
 8002500:	dd800917 	ldw	r22,36(sp)
 8002504:	dd400817 	ldw	r21,32(sp)
 8002508:	dd000717 	ldw	r20,28(sp)
 800250c:	dcc00617 	ldw	r19,24(sp)
 8002510:	dc800517 	ldw	r18,20(sp)
 8002514:	dc400417 	ldw	r17,16(sp)
 8002518:	dc000317 	ldw	r16,12(sp)
 800251c:	dec00d04 	addi	sp,sp,52
 8002520:	f800283a 	ret
 8002524:	2404b03a 	or	r2,r4,r16
 8002528:	2027883a 	mov	r19,r4
 800252c:	10004226 	beq	r2,zero,8002638 <__muldf3+0x2e4>
 8002530:	8000fc26 	beq	r16,zero,8002924 <__muldf3+0x5d0>
 8002534:	8009883a 	mov	r4,r16
 8002538:	d9800215 	stw	r6,8(sp)
 800253c:	d9c00015 	stw	r7,0(sp)
 8002540:	da400115 	stw	r9,4(sp)
 8002544:	80036c80 	call	80036c8 <__clzsi2>
 8002548:	d9800217 	ldw	r6,8(sp)
 800254c:	d9c00017 	ldw	r7,0(sp)
 8002550:	da400117 	ldw	r9,4(sp)
 8002554:	113ffd44 	addi	r4,r2,-11
 8002558:	00c00704 	movi	r3,28
 800255c:	1900ed16 	blt	r3,r4,8002914 <__muldf3+0x5c0>
 8002560:	00c00744 	movi	r3,29
 8002564:	147ffe04 	addi	r17,r2,-8
 8002568:	1907c83a 	sub	r3,r3,r4
 800256c:	8460983a 	sll	r16,r16,r17
 8002570:	98c6d83a 	srl	r3,r19,r3
 8002574:	9c68983a 	sll	r20,r19,r17
 8002578:	1c20b03a 	or	r16,r3,r16
 800257c:	1080fcc4 	addi	r2,r2,1011
 8002580:	00a5c83a 	sub	r18,zero,r2
 8002584:	0027883a 	mov	r19,zero
 8002588:	0039883a 	mov	fp,zero
 800258c:	003f9006 	br	80023d0 <__muldf3+0x7c>
 8002590:	3446b03a 	or	r3,r6,r17
 8002594:	1800261e 	bne	r3,zero,8002630 <__muldf3+0x2dc>
 8002598:	0023883a 	mov	r17,zero
 800259c:	0011883a 	mov	r8,zero
 80025a0:	01400084 	movi	r5,2
 80025a4:	003f9c06 	br	8002418 <__muldf3+0xc4>
 80025a8:	3446b03a 	or	r3,r6,r17
 80025ac:	18001c26 	beq	r3,zero,8002620 <__muldf3+0x2cc>
 80025b0:	8800ce26 	beq	r17,zero,80028ec <__muldf3+0x598>
 80025b4:	8809883a 	mov	r4,r17
 80025b8:	d9800215 	stw	r6,8(sp)
 80025bc:	da400115 	stw	r9,4(sp)
 80025c0:	da800015 	stw	r10,0(sp)
 80025c4:	80036c80 	call	80036c8 <__clzsi2>
 80025c8:	d9800217 	ldw	r6,8(sp)
 80025cc:	da400117 	ldw	r9,4(sp)
 80025d0:	da800017 	ldw	r10,0(sp)
 80025d4:	113ffd44 	addi	r4,r2,-11
 80025d8:	00c00704 	movi	r3,28
 80025dc:	1900bf16 	blt	r3,r4,80028dc <__muldf3+0x588>
 80025e0:	00c00744 	movi	r3,29
 80025e4:	123ffe04 	addi	r8,r2,-8
 80025e8:	1907c83a 	sub	r3,r3,r4
 80025ec:	8a22983a 	sll	r17,r17,r8
 80025f0:	30c6d83a 	srl	r3,r6,r3
 80025f4:	3210983a 	sll	r8,r6,r8
 80025f8:	1c62b03a 	or	r17,r3,r17
 80025fc:	1080fcc4 	addi	r2,r2,1011
 8002600:	0085c83a 	sub	r2,zero,r2
 8002604:	000b883a 	mov	r5,zero
 8002608:	003f8306 	br	8002418 <__muldf3+0xc4>
 800260c:	b02b883a 	mov	r21,r22
 8002610:	0081ffc4 	movi	r2,2047
 8002614:	000b883a 	mov	r5,zero
 8002618:	0029883a 	mov	r20,zero
 800261c:	003fac06 	br	80024d0 <__muldf3+0x17c>
 8002620:	0023883a 	mov	r17,zero
 8002624:	0011883a 	mov	r8,zero
 8002628:	01400044 	movi	r5,1
 800262c:	003f7a06 	br	8002418 <__muldf3+0xc4>
 8002630:	014000c4 	movi	r5,3
 8002634:	003f7806 	br	8002418 <__muldf3+0xc4>
 8002638:	04c00104 	movi	r19,4
 800263c:	0021883a 	mov	r16,zero
 8002640:	0029883a 	mov	r20,zero
 8002644:	07000044 	movi	fp,1
 8002648:	003f6106 	br	80023d0 <__muldf3+0x7c>
 800264c:	04c00304 	movi	r19,12
 8002650:	070000c4 	movi	fp,3
 8002654:	003f5e06 	br	80023d0 <__muldf3+0x7c>
 8002658:	01400434 	movhi	r5,16
 800265c:	002b883a 	mov	r21,zero
 8002660:	297fffc4 	addi	r5,r5,-1
 8002664:	053fffc4 	movi	r20,-1
 8002668:	0081ffc4 	movi	r2,2047
 800266c:	003f9806 	br	80024d0 <__muldf3+0x17c>
 8002670:	8023883a 	mov	r17,r16
 8002674:	a011883a 	mov	r8,r20
 8002678:	e00b883a 	mov	r5,fp
 800267c:	003f8a06 	br	80024a8 <__muldf3+0x154>
 8002680:	8023883a 	mov	r17,r16
 8002684:	a011883a 	mov	r8,r20
 8002688:	482d883a 	mov	r22,r9
 800268c:	e00b883a 	mov	r5,fp
 8002690:	003f8506 	br	80024a8 <__muldf3+0x154>
 8002694:	a00ad43a 	srli	r5,r20,16
 8002698:	401ad43a 	srli	r13,r8,16
 800269c:	a53fffcc 	andi	r20,r20,65535
 80026a0:	423fffcc 	andi	r8,r8,65535
 80026a4:	4519383a 	mul	r12,r8,r20
 80026a8:	4147383a 	mul	r3,r8,r5
 80026ac:	6d09383a 	mul	r4,r13,r20
 80026b0:	600cd43a 	srli	r6,r12,16
 80026b4:	2b5d383a 	mul	r14,r5,r13
 80026b8:	20c9883a 	add	r4,r4,r3
 80026bc:	310d883a 	add	r6,r6,r4
 80026c0:	30c0022e 	bgeu	r6,r3,80026cc <__muldf3+0x378>
 80026c4:	00c00074 	movhi	r3,1
 80026c8:	70dd883a 	add	r14,r14,r3
 80026cc:	8826d43a 	srli	r19,r17,16
 80026d0:	8bffffcc 	andi	r15,r17,65535
 80026d4:	7d23383a 	mul	r17,r15,r20
 80026d8:	7949383a 	mul	r4,r15,r5
 80026dc:	9d29383a 	mul	r20,r19,r20
 80026e0:	8814d43a 	srli	r10,r17,16
 80026e4:	3012943a 	slli	r9,r6,16
 80026e8:	a129883a 	add	r20,r20,r4
 80026ec:	633fffcc 	andi	r12,r12,65535
 80026f0:	5515883a 	add	r10,r10,r20
 80026f4:	3006d43a 	srli	r3,r6,16
 80026f8:	4b13883a 	add	r9,r9,r12
 80026fc:	2ccb383a 	mul	r5,r5,r19
 8002700:	5100022e 	bgeu	r10,r4,800270c <__muldf3+0x3b8>
 8002704:	01000074 	movhi	r4,1
 8002708:	290b883a 	add	r5,r5,r4
 800270c:	802ad43a 	srli	r21,r16,16
 8002710:	843fffcc 	andi	r16,r16,65535
 8002714:	440d383a 	mul	r6,r8,r16
 8002718:	4565383a 	mul	r18,r8,r21
 800271c:	8349383a 	mul	r4,r16,r13
 8002720:	500e943a 	slli	r7,r10,16
 8002724:	3010d43a 	srli	r8,r6,16
 8002728:	5028d43a 	srli	r20,r10,16
 800272c:	2489883a 	add	r4,r4,r18
 8002730:	8abfffcc 	andi	r10,r17,65535
 8002734:	3a95883a 	add	r10,r7,r10
 8002738:	4119883a 	add	r12,r8,r4
 800273c:	a169883a 	add	r20,r20,r5
 8002740:	1a87883a 	add	r3,r3,r10
 8002744:	6d5b383a 	mul	r13,r13,r21
 8002748:	6480022e 	bgeu	r12,r18,8002754 <__muldf3+0x400>
 800274c:	01000074 	movhi	r4,1
 8002750:	691b883a 	add	r13,r13,r4
 8002754:	7c25383a 	mul	r18,r15,r16
 8002758:	7d4b383a 	mul	r5,r15,r21
 800275c:	84cf383a 	mul	r7,r16,r19
 8002760:	901ed43a 	srli	r15,r18,16
 8002764:	6008d43a 	srli	r4,r12,16
 8002768:	6010943a 	slli	r8,r12,16
 800276c:	394f883a 	add	r7,r7,r5
 8002770:	333fffcc 	andi	r12,r6,65535
 8002774:	79df883a 	add	r15,r15,r7
 8002778:	235b883a 	add	r13,r4,r13
 800277c:	9d63383a 	mul	r17,r19,r21
 8002780:	4309883a 	add	r4,r8,r12
 8002784:	7940022e 	bgeu	r15,r5,8002790 <__muldf3+0x43c>
 8002788:	01400074 	movhi	r5,1
 800278c:	8963883a 	add	r17,r17,r5
 8002790:	780a943a 	slli	r5,r15,16
 8002794:	91bfffcc 	andi	r6,r18,65535
 8002798:	70c7883a 	add	r3,r14,r3
 800279c:	298d883a 	add	r6,r5,r6
 80027a0:	1a8f803a 	cmpltu	r7,r3,r10
 80027a4:	350b883a 	add	r5,r6,r20
 80027a8:	20c7883a 	add	r3,r4,r3
 80027ac:	3955883a 	add	r10,r7,r5
 80027b0:	1909803a 	cmpltu	r4,r3,r4
 80027b4:	6a91883a 	add	r8,r13,r10
 80027b8:	780cd43a 	srli	r6,r15,16
 80027bc:	2219883a 	add	r12,r4,r8
 80027c0:	2d0b803a 	cmpltu	r5,r5,r20
 80027c4:	51cf803a 	cmpltu	r7,r10,r7
 80027c8:	29ceb03a 	or	r7,r5,r7
 80027cc:	4351803a 	cmpltu	r8,r8,r13
 80027d0:	610b803a 	cmpltu	r5,r12,r4
 80027d4:	4148b03a 	or	r4,r8,r5
 80027d8:	398f883a 	add	r7,r7,r6
 80027dc:	3909883a 	add	r4,r7,r4
 80027e0:	1810927a 	slli	r8,r3,9
 80027e4:	2449883a 	add	r4,r4,r17
 80027e8:	2008927a 	slli	r4,r4,9
 80027ec:	6022d5fa 	srli	r17,r12,23
 80027f0:	1806d5fa 	srli	r3,r3,23
 80027f4:	4252b03a 	or	r9,r8,r9
 80027f8:	600a927a 	slli	r5,r12,9
 80027fc:	4810c03a 	cmpne	r8,r9,zero
 8002800:	2462b03a 	or	r17,r4,r17
 8002804:	40c6b03a 	or	r3,r8,r3
 8002808:	8900402c 	andhi	r4,r17,256
 800280c:	1950b03a 	or	r8,r3,r5
 8002810:	20000726 	beq	r4,zero,8002830 <__muldf3+0x4dc>
 8002814:	4006d07a 	srli	r3,r8,1
 8002818:	880497fa 	slli	r2,r17,31
 800281c:	4200004c 	andi	r8,r8,1
 8002820:	8822d07a 	srli	r17,r17,1
 8002824:	1a10b03a 	or	r8,r3,r8
 8002828:	1210b03a 	or	r8,r2,r8
 800282c:	5805883a 	mov	r2,r11
 8002830:	1140ffc4 	addi	r5,r2,1023
 8002834:	0140440e 	bge	zero,r5,8002948 <__muldf3+0x5f4>
 8002838:	40c001cc 	andi	r3,r8,7
 800283c:	18000726 	beq	r3,zero,800285c <__muldf3+0x508>
 8002840:	40c003cc 	andi	r3,r8,15
 8002844:	01000104 	movi	r4,4
 8002848:	19000426 	beq	r3,r4,800285c <__muldf3+0x508>
 800284c:	4107883a 	add	r3,r8,r4
 8002850:	1a11803a 	cmpltu	r8,r3,r8
 8002854:	8a23883a 	add	r17,r17,r8
 8002858:	1811883a 	mov	r8,r3
 800285c:	88c0402c 	andhi	r3,r17,256
 8002860:	18000426 	beq	r3,zero,8002874 <__muldf3+0x520>
 8002864:	11410004 	addi	r5,r2,1024
 8002868:	00bfc034 	movhi	r2,65280
 800286c:	10bfffc4 	addi	r2,r2,-1
 8002870:	88a2703a 	and	r17,r17,r2
 8002874:	0081ff84 	movi	r2,2046
 8002878:	117f6416 	blt	r2,r5,800260c <__muldf3+0x2b8>
 800287c:	8828977a 	slli	r20,r17,29
 8002880:	4010d0fa 	srli	r8,r8,3
 8002884:	8822927a 	slli	r17,r17,9
 8002888:	2881ffcc 	andi	r2,r5,2047
 800288c:	a228b03a 	or	r20,r20,r8
 8002890:	880ad33a 	srli	r5,r17,12
 8002894:	b02b883a 	mov	r21,r22
 8002898:	003f0d06 	br	80024d0 <__muldf3+0x17c>
 800289c:	8080022c 	andhi	r2,r16,8
 80028a0:	10000926 	beq	r2,zero,80028c8 <__muldf3+0x574>
 80028a4:	8880022c 	andhi	r2,r17,8
 80028a8:	1000071e 	bne	r2,zero,80028c8 <__muldf3+0x574>
 80028ac:	00800434 	movhi	r2,16
 80028b0:	89400234 	orhi	r5,r17,8
 80028b4:	10bfffc4 	addi	r2,r2,-1
 80028b8:	b82b883a 	mov	r21,r23
 80028bc:	288a703a 	and	r5,r5,r2
 80028c0:	4029883a 	mov	r20,r8
 80028c4:	003f6806 	br	8002668 <__muldf3+0x314>
 80028c8:	00800434 	movhi	r2,16
 80028cc:	81400234 	orhi	r5,r16,8
 80028d0:	10bfffc4 	addi	r2,r2,-1
 80028d4:	288a703a 	and	r5,r5,r2
 80028d8:	003f6306 	br	8002668 <__muldf3+0x314>
 80028dc:	147ff604 	addi	r17,r2,-40
 80028e0:	3462983a 	sll	r17,r6,r17
 80028e4:	0011883a 	mov	r8,zero
 80028e8:	003f4406 	br	80025fc <__muldf3+0x2a8>
 80028ec:	3009883a 	mov	r4,r6
 80028f0:	d9800215 	stw	r6,8(sp)
 80028f4:	da400115 	stw	r9,4(sp)
 80028f8:	da800015 	stw	r10,0(sp)
 80028fc:	80036c80 	call	80036c8 <__clzsi2>
 8002900:	10800804 	addi	r2,r2,32
 8002904:	da800017 	ldw	r10,0(sp)
 8002908:	da400117 	ldw	r9,4(sp)
 800290c:	d9800217 	ldw	r6,8(sp)
 8002910:	003f3006 	br	80025d4 <__muldf3+0x280>
 8002914:	143ff604 	addi	r16,r2,-40
 8002918:	9c20983a 	sll	r16,r19,r16
 800291c:	0029883a 	mov	r20,zero
 8002920:	003f1606 	br	800257c <__muldf3+0x228>
 8002924:	d9800215 	stw	r6,8(sp)
 8002928:	d9c00015 	stw	r7,0(sp)
 800292c:	da400115 	stw	r9,4(sp)
 8002930:	80036c80 	call	80036c8 <__clzsi2>
 8002934:	10800804 	addi	r2,r2,32
 8002938:	da400117 	ldw	r9,4(sp)
 800293c:	d9c00017 	ldw	r7,0(sp)
 8002940:	d9800217 	ldw	r6,8(sp)
 8002944:	003f0306 	br	8002554 <__muldf3+0x200>
 8002948:	00c00044 	movi	r3,1
 800294c:	1947c83a 	sub	r3,r3,r5
 8002950:	00800e04 	movi	r2,56
 8002954:	10feda16 	blt	r2,r3,80024c0 <__muldf3+0x16c>
 8002958:	008007c4 	movi	r2,31
 800295c:	10c01b16 	blt	r2,r3,80029cc <__muldf3+0x678>
 8002960:	00800804 	movi	r2,32
 8002964:	10c5c83a 	sub	r2,r2,r3
 8002968:	888a983a 	sll	r5,r17,r2
 800296c:	40c8d83a 	srl	r4,r8,r3
 8002970:	4084983a 	sll	r2,r8,r2
 8002974:	88e2d83a 	srl	r17,r17,r3
 8002978:	2906b03a 	or	r3,r5,r4
 800297c:	1004c03a 	cmpne	r2,r2,zero
 8002980:	1886b03a 	or	r3,r3,r2
 8002984:	188001cc 	andi	r2,r3,7
 8002988:	10000726 	beq	r2,zero,80029a8 <__muldf3+0x654>
 800298c:	188003cc 	andi	r2,r3,15
 8002990:	01000104 	movi	r4,4
 8002994:	11000426 	beq	r2,r4,80029a8 <__muldf3+0x654>
 8002998:	1805883a 	mov	r2,r3
 800299c:	10c00104 	addi	r3,r2,4
 80029a0:	1885803a 	cmpltu	r2,r3,r2
 80029a4:	88a3883a 	add	r17,r17,r2
 80029a8:	8880202c 	andhi	r2,r17,128
 80029ac:	10001c26 	beq	r2,zero,8002a20 <__muldf3+0x6cc>
 80029b0:	b02b883a 	mov	r21,r22
 80029b4:	00800044 	movi	r2,1
 80029b8:	000b883a 	mov	r5,zero
 80029bc:	0029883a 	mov	r20,zero
 80029c0:	003ec306 	br	80024d0 <__muldf3+0x17c>
 80029c4:	5805883a 	mov	r2,r11
 80029c8:	003f9906 	br	8002830 <__muldf3+0x4dc>
 80029cc:	00bff844 	movi	r2,-31
 80029d0:	1145c83a 	sub	r2,r2,r5
 80029d4:	8888d83a 	srl	r4,r17,r2
 80029d8:	00800804 	movi	r2,32
 80029dc:	18801a26 	beq	r3,r2,8002a48 <__muldf3+0x6f4>
 80029e0:	00801004 	movi	r2,64
 80029e4:	10c5c83a 	sub	r2,r2,r3
 80029e8:	8884983a 	sll	r2,r17,r2
 80029ec:	1204b03a 	or	r2,r2,r8
 80029f0:	1004c03a 	cmpne	r2,r2,zero
 80029f4:	2084b03a 	or	r2,r4,r2
 80029f8:	144001cc 	andi	r17,r2,7
 80029fc:	88000d1e 	bne	r17,zero,8002a34 <__muldf3+0x6e0>
 8002a00:	000b883a 	mov	r5,zero
 8002a04:	1028d0fa 	srli	r20,r2,3
 8002a08:	b02b883a 	mov	r21,r22
 8002a0c:	0005883a 	mov	r2,zero
 8002a10:	a468b03a 	or	r20,r20,r17
 8002a14:	003eae06 	br	80024d0 <__muldf3+0x17c>
 8002a18:	1007883a 	mov	r3,r2
 8002a1c:	0023883a 	mov	r17,zero
 8002a20:	880a927a 	slli	r5,r17,9
 8002a24:	1805883a 	mov	r2,r3
 8002a28:	8822977a 	slli	r17,r17,29
 8002a2c:	280ad33a 	srli	r5,r5,12
 8002a30:	003ff406 	br	8002a04 <__muldf3+0x6b0>
 8002a34:	10c003cc 	andi	r3,r2,15
 8002a38:	01000104 	movi	r4,4
 8002a3c:	193ff626 	beq	r3,r4,8002a18 <__muldf3+0x6c4>
 8002a40:	0023883a 	mov	r17,zero
 8002a44:	003fd506 	br	800299c <__muldf3+0x648>
 8002a48:	0005883a 	mov	r2,zero
 8002a4c:	003fe706 	br	80029ec <__muldf3+0x698>
 8002a50:	00800434 	movhi	r2,16
 8002a54:	89400234 	orhi	r5,r17,8
 8002a58:	10bfffc4 	addi	r2,r2,-1
 8002a5c:	b02b883a 	mov	r21,r22
 8002a60:	288a703a 	and	r5,r5,r2
 8002a64:	4029883a 	mov	r20,r8
 8002a68:	003eff06 	br	8002668 <__muldf3+0x314>

08002a6c <__subdf3>:
 8002a6c:	02000434 	movhi	r8,16
 8002a70:	423fffc4 	addi	r8,r8,-1
 8002a74:	defffb04 	addi	sp,sp,-20
 8002a78:	2a14703a 	and	r10,r5,r8
 8002a7c:	3812d53a 	srli	r9,r7,20
 8002a80:	3a10703a 	and	r8,r7,r8
 8002a84:	2006d77a 	srli	r3,r4,29
 8002a88:	3004d77a 	srli	r2,r6,29
 8002a8c:	dc000015 	stw	r16,0(sp)
 8002a90:	501490fa 	slli	r10,r10,3
 8002a94:	2820d53a 	srli	r16,r5,20
 8002a98:	401090fa 	slli	r8,r8,3
 8002a9c:	dc800215 	stw	r18,8(sp)
 8002aa0:	dc400115 	stw	r17,4(sp)
 8002aa4:	dfc00415 	stw	ra,16(sp)
 8002aa8:	202290fa 	slli	r17,r4,3
 8002aac:	dcc00315 	stw	r19,12(sp)
 8002ab0:	4a41ffcc 	andi	r9,r9,2047
 8002ab4:	0101ffc4 	movi	r4,2047
 8002ab8:	2824d7fa 	srli	r18,r5,31
 8002abc:	8401ffcc 	andi	r16,r16,2047
 8002ac0:	50c6b03a 	or	r3,r10,r3
 8002ac4:	380ed7fa 	srli	r7,r7,31
 8002ac8:	408ab03a 	or	r5,r8,r2
 8002acc:	300c90fa 	slli	r6,r6,3
 8002ad0:	49009626 	beq	r9,r4,8002d2c <__subdf3+0x2c0>
 8002ad4:	39c0005c 	xori	r7,r7,1
 8002ad8:	8245c83a 	sub	r2,r16,r9
 8002adc:	3c807426 	beq	r7,r18,8002cb0 <__subdf3+0x244>
 8002ae0:	0080af0e 	bge	zero,r2,8002da0 <__subdf3+0x334>
 8002ae4:	48002a1e 	bne	r9,zero,8002b90 <__subdf3+0x124>
 8002ae8:	2988b03a 	or	r4,r5,r6
 8002aec:	20009a1e 	bne	r4,zero,8002d58 <__subdf3+0x2ec>
 8002af0:	888001cc 	andi	r2,r17,7
 8002af4:	10000726 	beq	r2,zero,8002b14 <__subdf3+0xa8>
 8002af8:	888003cc 	andi	r2,r17,15
 8002afc:	01000104 	movi	r4,4
 8002b00:	11000426 	beq	r2,r4,8002b14 <__subdf3+0xa8>
 8002b04:	890b883a 	add	r5,r17,r4
 8002b08:	2c63803a 	cmpltu	r17,r5,r17
 8002b0c:	1c47883a 	add	r3,r3,r17
 8002b10:	2823883a 	mov	r17,r5
 8002b14:	1880202c 	andhi	r2,r3,128
 8002b18:	10005926 	beq	r2,zero,8002c80 <__subdf3+0x214>
 8002b1c:	84000044 	addi	r16,r16,1
 8002b20:	0081ffc4 	movi	r2,2047
 8002b24:	8080be26 	beq	r16,r2,8002e20 <__subdf3+0x3b4>
 8002b28:	017fe034 	movhi	r5,65408
 8002b2c:	297fffc4 	addi	r5,r5,-1
 8002b30:	1946703a 	and	r3,r3,r5
 8002b34:	1804977a 	slli	r2,r3,29
 8002b38:	1806927a 	slli	r3,r3,9
 8002b3c:	8822d0fa 	srli	r17,r17,3
 8002b40:	8401ffcc 	andi	r16,r16,2047
 8002b44:	180ad33a 	srli	r5,r3,12
 8002b48:	9100004c 	andi	r4,r18,1
 8002b4c:	1444b03a 	or	r2,r2,r17
 8002b50:	80c1ffcc 	andi	r3,r16,2047
 8002b54:	1820953a 	slli	r16,r3,20
 8002b58:	20c03fcc 	andi	r3,r4,255
 8002b5c:	180897fa 	slli	r4,r3,31
 8002b60:	00c00434 	movhi	r3,16
 8002b64:	18ffffc4 	addi	r3,r3,-1
 8002b68:	28c6703a 	and	r3,r5,r3
 8002b6c:	1c06b03a 	or	r3,r3,r16
 8002b70:	1906b03a 	or	r3,r3,r4
 8002b74:	dfc00417 	ldw	ra,16(sp)
 8002b78:	dcc00317 	ldw	r19,12(sp)
 8002b7c:	dc800217 	ldw	r18,8(sp)
 8002b80:	dc400117 	ldw	r17,4(sp)
 8002b84:	dc000017 	ldw	r16,0(sp)
 8002b88:	dec00504 	addi	sp,sp,20
 8002b8c:	f800283a 	ret
 8002b90:	0101ffc4 	movi	r4,2047
 8002b94:	813fd626 	beq	r16,r4,8002af0 <__subdf3+0x84>
 8002b98:	29402034 	orhi	r5,r5,128
 8002b9c:	01000e04 	movi	r4,56
 8002ba0:	2080a316 	blt	r4,r2,8002e30 <__subdf3+0x3c4>
 8002ba4:	010007c4 	movi	r4,31
 8002ba8:	2080c616 	blt	r4,r2,8002ec4 <__subdf3+0x458>
 8002bac:	01000804 	movi	r4,32
 8002bb0:	2089c83a 	sub	r4,r4,r2
 8002bb4:	2910983a 	sll	r8,r5,r4
 8002bb8:	308ed83a 	srl	r7,r6,r2
 8002bbc:	3108983a 	sll	r4,r6,r4
 8002bc0:	2884d83a 	srl	r2,r5,r2
 8002bc4:	41ccb03a 	or	r6,r8,r7
 8002bc8:	2008c03a 	cmpne	r4,r4,zero
 8002bcc:	310cb03a 	or	r6,r6,r4
 8002bd0:	898dc83a 	sub	r6,r17,r6
 8002bd4:	89a3803a 	cmpltu	r17,r17,r6
 8002bd8:	1887c83a 	sub	r3,r3,r2
 8002bdc:	1c47c83a 	sub	r3,r3,r17
 8002be0:	3023883a 	mov	r17,r6
 8002be4:	1880202c 	andhi	r2,r3,128
 8002be8:	10002326 	beq	r2,zero,8002c78 <__subdf3+0x20c>
 8002bec:	04c02034 	movhi	r19,128
 8002bf0:	9cffffc4 	addi	r19,r19,-1
 8002bf4:	1ce6703a 	and	r19,r3,r19
 8002bf8:	98007a26 	beq	r19,zero,8002de4 <__subdf3+0x378>
 8002bfc:	9809883a 	mov	r4,r19
 8002c00:	80036c80 	call	80036c8 <__clzsi2>
 8002c04:	113ffe04 	addi	r4,r2,-8
 8002c08:	00c007c4 	movi	r3,31
 8002c0c:	19007b16 	blt	r3,r4,8002dfc <__subdf3+0x390>
 8002c10:	00800804 	movi	r2,32
 8002c14:	1105c83a 	sub	r2,r2,r4
 8002c18:	8884d83a 	srl	r2,r17,r2
 8002c1c:	9906983a 	sll	r3,r19,r4
 8002c20:	8922983a 	sll	r17,r17,r4
 8002c24:	10c4b03a 	or	r2,r2,r3
 8002c28:	24007816 	blt	r4,r16,8002e0c <__subdf3+0x3a0>
 8002c2c:	2421c83a 	sub	r16,r4,r16
 8002c30:	80c00044 	addi	r3,r16,1
 8002c34:	010007c4 	movi	r4,31
 8002c38:	20c09516 	blt	r4,r3,8002e90 <__subdf3+0x424>
 8002c3c:	01400804 	movi	r5,32
 8002c40:	28cbc83a 	sub	r5,r5,r3
 8002c44:	88c8d83a 	srl	r4,r17,r3
 8002c48:	8962983a 	sll	r17,r17,r5
 8002c4c:	114a983a 	sll	r5,r2,r5
 8002c50:	10c6d83a 	srl	r3,r2,r3
 8002c54:	8804c03a 	cmpne	r2,r17,zero
 8002c58:	290ab03a 	or	r5,r5,r4
 8002c5c:	28a2b03a 	or	r17,r5,r2
 8002c60:	0021883a 	mov	r16,zero
 8002c64:	003fa206 	br	8002af0 <__subdf3+0x84>
 8002c68:	2090b03a 	or	r8,r4,r2
 8002c6c:	40018e26 	beq	r8,zero,80032a8 <__subdf3+0x83c>
 8002c70:	1007883a 	mov	r3,r2
 8002c74:	2023883a 	mov	r17,r4
 8002c78:	888001cc 	andi	r2,r17,7
 8002c7c:	103f9e1e 	bne	r2,zero,8002af8 <__subdf3+0x8c>
 8002c80:	1804977a 	slli	r2,r3,29
 8002c84:	8822d0fa 	srli	r17,r17,3
 8002c88:	1810d0fa 	srli	r8,r3,3
 8002c8c:	9100004c 	andi	r4,r18,1
 8002c90:	1444b03a 	or	r2,r2,r17
 8002c94:	00c1ffc4 	movi	r3,2047
 8002c98:	80c02826 	beq	r16,r3,8002d3c <__subdf3+0x2d0>
 8002c9c:	01400434 	movhi	r5,16
 8002ca0:	297fffc4 	addi	r5,r5,-1
 8002ca4:	80e0703a 	and	r16,r16,r3
 8002ca8:	414a703a 	and	r5,r8,r5
 8002cac:	003fa806 	br	8002b50 <__subdf3+0xe4>
 8002cb0:	0080630e 	bge	zero,r2,8002e40 <__subdf3+0x3d4>
 8002cb4:	48003026 	beq	r9,zero,8002d78 <__subdf3+0x30c>
 8002cb8:	0101ffc4 	movi	r4,2047
 8002cbc:	813f8c26 	beq	r16,r4,8002af0 <__subdf3+0x84>
 8002cc0:	29402034 	orhi	r5,r5,128
 8002cc4:	01000e04 	movi	r4,56
 8002cc8:	2080a90e 	bge	r4,r2,8002f70 <__subdf3+0x504>
 8002ccc:	298cb03a 	or	r6,r5,r6
 8002cd0:	3012c03a 	cmpne	r9,r6,zero
 8002cd4:	0005883a 	mov	r2,zero
 8002cd8:	4c53883a 	add	r9,r9,r17
 8002cdc:	4c63803a 	cmpltu	r17,r9,r17
 8002ce0:	10c7883a 	add	r3,r2,r3
 8002ce4:	88c7883a 	add	r3,r17,r3
 8002ce8:	4823883a 	mov	r17,r9
 8002cec:	1880202c 	andhi	r2,r3,128
 8002cf0:	1000d026 	beq	r2,zero,8003034 <__subdf3+0x5c8>
 8002cf4:	84000044 	addi	r16,r16,1
 8002cf8:	0081ffc4 	movi	r2,2047
 8002cfc:	8080fe26 	beq	r16,r2,80030f8 <__subdf3+0x68c>
 8002d00:	00bfe034 	movhi	r2,65408
 8002d04:	10bfffc4 	addi	r2,r2,-1
 8002d08:	1886703a 	and	r3,r3,r2
 8002d0c:	880ad07a 	srli	r5,r17,1
 8002d10:	180497fa 	slli	r2,r3,31
 8002d14:	8900004c 	andi	r4,r17,1
 8002d18:	2922b03a 	or	r17,r5,r4
 8002d1c:	1806d07a 	srli	r3,r3,1
 8002d20:	1462b03a 	or	r17,r2,r17
 8002d24:	3825883a 	mov	r18,r7
 8002d28:	003f7106 	br	8002af0 <__subdf3+0x84>
 8002d2c:	2984b03a 	or	r2,r5,r6
 8002d30:	103f6826 	beq	r2,zero,8002ad4 <__subdf3+0x68>
 8002d34:	39c03fcc 	andi	r7,r7,255
 8002d38:	003f6706 	br	8002ad8 <__subdf3+0x6c>
 8002d3c:	4086b03a 	or	r3,r8,r2
 8002d40:	18015226 	beq	r3,zero,800328c <__subdf3+0x820>
 8002d44:	00c00434 	movhi	r3,16
 8002d48:	41400234 	orhi	r5,r8,8
 8002d4c:	18ffffc4 	addi	r3,r3,-1
 8002d50:	28ca703a 	and	r5,r5,r3
 8002d54:	003f7e06 	br	8002b50 <__subdf3+0xe4>
 8002d58:	10bfffc4 	addi	r2,r2,-1
 8002d5c:	1000491e 	bne	r2,zero,8002e84 <__subdf3+0x418>
 8002d60:	898fc83a 	sub	r7,r17,r6
 8002d64:	89e3803a 	cmpltu	r17,r17,r7
 8002d68:	1947c83a 	sub	r3,r3,r5
 8002d6c:	1c47c83a 	sub	r3,r3,r17
 8002d70:	3823883a 	mov	r17,r7
 8002d74:	003f9b06 	br	8002be4 <__subdf3+0x178>
 8002d78:	2988b03a 	or	r4,r5,r6
 8002d7c:	203f5c26 	beq	r4,zero,8002af0 <__subdf3+0x84>
 8002d80:	10bfffc4 	addi	r2,r2,-1
 8002d84:	1000931e 	bne	r2,zero,8002fd4 <__subdf3+0x568>
 8002d88:	898d883a 	add	r6,r17,r6
 8002d8c:	3463803a 	cmpltu	r17,r6,r17
 8002d90:	1947883a 	add	r3,r3,r5
 8002d94:	88c7883a 	add	r3,r17,r3
 8002d98:	3023883a 	mov	r17,r6
 8002d9c:	003fd306 	br	8002cec <__subdf3+0x280>
 8002da0:	1000541e 	bne	r2,zero,8002ef4 <__subdf3+0x488>
 8002da4:	80800044 	addi	r2,r16,1
 8002da8:	1081ffcc 	andi	r2,r2,2047
 8002dac:	01000044 	movi	r4,1
 8002db0:	2080a20e 	bge	r4,r2,800303c <__subdf3+0x5d0>
 8002db4:	8989c83a 	sub	r4,r17,r6
 8002db8:	8905803a 	cmpltu	r2,r17,r4
 8002dbc:	1967c83a 	sub	r19,r3,r5
 8002dc0:	98a7c83a 	sub	r19,r19,r2
 8002dc4:	9880202c 	andhi	r2,r19,128
 8002dc8:	10006326 	beq	r2,zero,8002f58 <__subdf3+0x4ec>
 8002dcc:	3463c83a 	sub	r17,r6,r17
 8002dd0:	28c7c83a 	sub	r3,r5,r3
 8002dd4:	344d803a 	cmpltu	r6,r6,r17
 8002dd8:	19a7c83a 	sub	r19,r3,r6
 8002ddc:	3825883a 	mov	r18,r7
 8002de0:	983f861e 	bne	r19,zero,8002bfc <__subdf3+0x190>
 8002de4:	8809883a 	mov	r4,r17
 8002de8:	80036c80 	call	80036c8 <__clzsi2>
 8002dec:	10800804 	addi	r2,r2,32
 8002df0:	113ffe04 	addi	r4,r2,-8
 8002df4:	00c007c4 	movi	r3,31
 8002df8:	193f850e 	bge	r3,r4,8002c10 <__subdf3+0x1a4>
 8002dfc:	10bff604 	addi	r2,r2,-40
 8002e00:	8884983a 	sll	r2,r17,r2
 8002e04:	0023883a 	mov	r17,zero
 8002e08:	243f880e 	bge	r4,r16,8002c2c <__subdf3+0x1c0>
 8002e0c:	00ffe034 	movhi	r3,65408
 8002e10:	18ffffc4 	addi	r3,r3,-1
 8002e14:	8121c83a 	sub	r16,r16,r4
 8002e18:	10c6703a 	and	r3,r2,r3
 8002e1c:	003f3406 	br	8002af0 <__subdf3+0x84>
 8002e20:	9100004c 	andi	r4,r18,1
 8002e24:	000b883a 	mov	r5,zero
 8002e28:	0005883a 	mov	r2,zero
 8002e2c:	003f4806 	br	8002b50 <__subdf3+0xe4>
 8002e30:	298cb03a 	or	r6,r5,r6
 8002e34:	300cc03a 	cmpne	r6,r6,zero
 8002e38:	0005883a 	mov	r2,zero
 8002e3c:	003f6406 	br	8002bd0 <__subdf3+0x164>
 8002e40:	10009a1e 	bne	r2,zero,80030ac <__subdf3+0x640>
 8002e44:	82400044 	addi	r9,r16,1
 8002e48:	4881ffcc 	andi	r2,r9,2047
 8002e4c:	02800044 	movi	r10,1
 8002e50:	5080670e 	bge	r10,r2,8002ff0 <__subdf3+0x584>
 8002e54:	0081ffc4 	movi	r2,2047
 8002e58:	4880af26 	beq	r9,r2,8003118 <__subdf3+0x6ac>
 8002e5c:	898d883a 	add	r6,r17,r6
 8002e60:	1945883a 	add	r2,r3,r5
 8002e64:	3447803a 	cmpltu	r3,r6,r17
 8002e68:	1887883a 	add	r3,r3,r2
 8002e6c:	182297fa 	slli	r17,r3,31
 8002e70:	300cd07a 	srli	r6,r6,1
 8002e74:	1806d07a 	srli	r3,r3,1
 8002e78:	4821883a 	mov	r16,r9
 8002e7c:	89a2b03a 	or	r17,r17,r6
 8002e80:	003f1b06 	br	8002af0 <__subdf3+0x84>
 8002e84:	0101ffc4 	movi	r4,2047
 8002e88:	813f441e 	bne	r16,r4,8002b9c <__subdf3+0x130>
 8002e8c:	003f1806 	br	8002af0 <__subdf3+0x84>
 8002e90:	843ff844 	addi	r16,r16,-31
 8002e94:	01400804 	movi	r5,32
 8002e98:	1408d83a 	srl	r4,r2,r16
 8002e9c:	19405026 	beq	r3,r5,8002fe0 <__subdf3+0x574>
 8002ea0:	01401004 	movi	r5,64
 8002ea4:	28c7c83a 	sub	r3,r5,r3
 8002ea8:	10c4983a 	sll	r2,r2,r3
 8002eac:	88a2b03a 	or	r17,r17,r2
 8002eb0:	8822c03a 	cmpne	r17,r17,zero
 8002eb4:	2462b03a 	or	r17,r4,r17
 8002eb8:	0007883a 	mov	r3,zero
 8002ebc:	0021883a 	mov	r16,zero
 8002ec0:	003f6d06 	br	8002c78 <__subdf3+0x20c>
 8002ec4:	11fff804 	addi	r7,r2,-32
 8002ec8:	01000804 	movi	r4,32
 8002ecc:	29ced83a 	srl	r7,r5,r7
 8002ed0:	11004526 	beq	r2,r4,8002fe8 <__subdf3+0x57c>
 8002ed4:	01001004 	movi	r4,64
 8002ed8:	2089c83a 	sub	r4,r4,r2
 8002edc:	2904983a 	sll	r2,r5,r4
 8002ee0:	118cb03a 	or	r6,r2,r6
 8002ee4:	300cc03a 	cmpne	r6,r6,zero
 8002ee8:	398cb03a 	or	r6,r7,r6
 8002eec:	0005883a 	mov	r2,zero
 8002ef0:	003f3706 	br	8002bd0 <__subdf3+0x164>
 8002ef4:	80002a26 	beq	r16,zero,8002fa0 <__subdf3+0x534>
 8002ef8:	0101ffc4 	movi	r4,2047
 8002efc:	49006626 	beq	r9,r4,8003098 <__subdf3+0x62c>
 8002f00:	0085c83a 	sub	r2,zero,r2
 8002f04:	18c02034 	orhi	r3,r3,128
 8002f08:	01000e04 	movi	r4,56
 8002f0c:	20807e16 	blt	r4,r2,8003108 <__subdf3+0x69c>
 8002f10:	010007c4 	movi	r4,31
 8002f14:	2080e716 	blt	r4,r2,80032b4 <__subdf3+0x848>
 8002f18:	01000804 	movi	r4,32
 8002f1c:	2089c83a 	sub	r4,r4,r2
 8002f20:	1914983a 	sll	r10,r3,r4
 8002f24:	8890d83a 	srl	r8,r17,r2
 8002f28:	8908983a 	sll	r4,r17,r4
 8002f2c:	1884d83a 	srl	r2,r3,r2
 8002f30:	5222b03a 	or	r17,r10,r8
 8002f34:	2006c03a 	cmpne	r3,r4,zero
 8002f38:	88e2b03a 	or	r17,r17,r3
 8002f3c:	3463c83a 	sub	r17,r6,r17
 8002f40:	2885c83a 	sub	r2,r5,r2
 8002f44:	344d803a 	cmpltu	r6,r6,r17
 8002f48:	1187c83a 	sub	r3,r2,r6
 8002f4c:	4821883a 	mov	r16,r9
 8002f50:	3825883a 	mov	r18,r7
 8002f54:	003f2306 	br	8002be4 <__subdf3+0x178>
 8002f58:	24d0b03a 	or	r8,r4,r19
 8002f5c:	40001b1e 	bne	r8,zero,8002fcc <__subdf3+0x560>
 8002f60:	0005883a 	mov	r2,zero
 8002f64:	0009883a 	mov	r4,zero
 8002f68:	0021883a 	mov	r16,zero
 8002f6c:	003f4906 	br	8002c94 <__subdf3+0x228>
 8002f70:	010007c4 	movi	r4,31
 8002f74:	20803a16 	blt	r4,r2,8003060 <__subdf3+0x5f4>
 8002f78:	01000804 	movi	r4,32
 8002f7c:	2089c83a 	sub	r4,r4,r2
 8002f80:	2912983a 	sll	r9,r5,r4
 8002f84:	3090d83a 	srl	r8,r6,r2
 8002f88:	3108983a 	sll	r4,r6,r4
 8002f8c:	2884d83a 	srl	r2,r5,r2
 8002f90:	4a12b03a 	or	r9,r9,r8
 8002f94:	2008c03a 	cmpne	r4,r4,zero
 8002f98:	4912b03a 	or	r9,r9,r4
 8002f9c:	003f4e06 	br	8002cd8 <__subdf3+0x26c>
 8002fa0:	1c48b03a 	or	r4,r3,r17
 8002fa4:	20003c26 	beq	r4,zero,8003098 <__subdf3+0x62c>
 8002fa8:	0084303a 	nor	r2,zero,r2
 8002fac:	1000381e 	bne	r2,zero,8003090 <__subdf3+0x624>
 8002fb0:	3463c83a 	sub	r17,r6,r17
 8002fb4:	28c5c83a 	sub	r2,r5,r3
 8002fb8:	344d803a 	cmpltu	r6,r6,r17
 8002fbc:	1187c83a 	sub	r3,r2,r6
 8002fc0:	4821883a 	mov	r16,r9
 8002fc4:	3825883a 	mov	r18,r7
 8002fc8:	003f0606 	br	8002be4 <__subdf3+0x178>
 8002fcc:	2023883a 	mov	r17,r4
 8002fd0:	003f0906 	br	8002bf8 <__subdf3+0x18c>
 8002fd4:	0101ffc4 	movi	r4,2047
 8002fd8:	813f3a1e 	bne	r16,r4,8002cc4 <__subdf3+0x258>
 8002fdc:	003ec406 	br	8002af0 <__subdf3+0x84>
 8002fe0:	0005883a 	mov	r2,zero
 8002fe4:	003fb106 	br	8002eac <__subdf3+0x440>
 8002fe8:	0005883a 	mov	r2,zero
 8002fec:	003fbc06 	br	8002ee0 <__subdf3+0x474>
 8002ff0:	1c44b03a 	or	r2,r3,r17
 8002ff4:	80008e1e 	bne	r16,zero,8003230 <__subdf3+0x7c4>
 8002ff8:	1000c826 	beq	r2,zero,800331c <__subdf3+0x8b0>
 8002ffc:	2984b03a 	or	r2,r5,r6
 8003000:	103ebb26 	beq	r2,zero,8002af0 <__subdf3+0x84>
 8003004:	8989883a 	add	r4,r17,r6
 8003008:	1945883a 	add	r2,r3,r5
 800300c:	2447803a 	cmpltu	r3,r4,r17
 8003010:	1887883a 	add	r3,r3,r2
 8003014:	1880202c 	andhi	r2,r3,128
 8003018:	2023883a 	mov	r17,r4
 800301c:	103f1626 	beq	r2,zero,8002c78 <__subdf3+0x20c>
 8003020:	00bfe034 	movhi	r2,65408
 8003024:	10bfffc4 	addi	r2,r2,-1
 8003028:	5021883a 	mov	r16,r10
 800302c:	1886703a 	and	r3,r3,r2
 8003030:	003eaf06 	br	8002af0 <__subdf3+0x84>
 8003034:	3825883a 	mov	r18,r7
 8003038:	003f0f06 	br	8002c78 <__subdf3+0x20c>
 800303c:	1c44b03a 	or	r2,r3,r17
 8003040:	8000251e 	bne	r16,zero,80030d8 <__subdf3+0x66c>
 8003044:	1000661e 	bne	r2,zero,80031e0 <__subdf3+0x774>
 8003048:	2990b03a 	or	r8,r5,r6
 800304c:	40009626 	beq	r8,zero,80032a8 <__subdf3+0x83c>
 8003050:	2807883a 	mov	r3,r5
 8003054:	3023883a 	mov	r17,r6
 8003058:	3825883a 	mov	r18,r7
 800305c:	003ea406 	br	8002af0 <__subdf3+0x84>
 8003060:	127ff804 	addi	r9,r2,-32
 8003064:	01000804 	movi	r4,32
 8003068:	2a52d83a 	srl	r9,r5,r9
 800306c:	11008c26 	beq	r2,r4,80032a0 <__subdf3+0x834>
 8003070:	01001004 	movi	r4,64
 8003074:	2085c83a 	sub	r2,r4,r2
 8003078:	2884983a 	sll	r2,r5,r2
 800307c:	118cb03a 	or	r6,r2,r6
 8003080:	300cc03a 	cmpne	r6,r6,zero
 8003084:	4992b03a 	or	r9,r9,r6
 8003088:	0005883a 	mov	r2,zero
 800308c:	003f1206 	br	8002cd8 <__subdf3+0x26c>
 8003090:	0101ffc4 	movi	r4,2047
 8003094:	493f9c1e 	bne	r9,r4,8002f08 <__subdf3+0x49c>
 8003098:	2807883a 	mov	r3,r5
 800309c:	3023883a 	mov	r17,r6
 80030a0:	4821883a 	mov	r16,r9
 80030a4:	3825883a 	mov	r18,r7
 80030a8:	003e9106 	br	8002af0 <__subdf3+0x84>
 80030ac:	80001f1e 	bne	r16,zero,800312c <__subdf3+0x6c0>
 80030b0:	1c48b03a 	or	r4,r3,r17
 80030b4:	20005a26 	beq	r4,zero,8003220 <__subdf3+0x7b4>
 80030b8:	0084303a 	nor	r2,zero,r2
 80030bc:	1000561e 	bne	r2,zero,8003218 <__subdf3+0x7ac>
 80030c0:	89a3883a 	add	r17,r17,r6
 80030c4:	1945883a 	add	r2,r3,r5
 80030c8:	898d803a 	cmpltu	r6,r17,r6
 80030cc:	3087883a 	add	r3,r6,r2
 80030d0:	4821883a 	mov	r16,r9
 80030d4:	003f0506 	br	8002cec <__subdf3+0x280>
 80030d8:	10002b1e 	bne	r2,zero,8003188 <__subdf3+0x71c>
 80030dc:	2984b03a 	or	r2,r5,r6
 80030e0:	10008026 	beq	r2,zero,80032e4 <__subdf3+0x878>
 80030e4:	2807883a 	mov	r3,r5
 80030e8:	3023883a 	mov	r17,r6
 80030ec:	3825883a 	mov	r18,r7
 80030f0:	0401ffc4 	movi	r16,2047
 80030f4:	003e7e06 	br	8002af0 <__subdf3+0x84>
 80030f8:	3809883a 	mov	r4,r7
 80030fc:	0011883a 	mov	r8,zero
 8003100:	0005883a 	mov	r2,zero
 8003104:	003ee306 	br	8002c94 <__subdf3+0x228>
 8003108:	1c62b03a 	or	r17,r3,r17
 800310c:	8822c03a 	cmpne	r17,r17,zero
 8003110:	0005883a 	mov	r2,zero
 8003114:	003f8906 	br	8002f3c <__subdf3+0x4d0>
 8003118:	3809883a 	mov	r4,r7
 800311c:	4821883a 	mov	r16,r9
 8003120:	0011883a 	mov	r8,zero
 8003124:	0005883a 	mov	r2,zero
 8003128:	003eda06 	br	8002c94 <__subdf3+0x228>
 800312c:	0101ffc4 	movi	r4,2047
 8003130:	49003b26 	beq	r9,r4,8003220 <__subdf3+0x7b4>
 8003134:	0085c83a 	sub	r2,zero,r2
 8003138:	18c02034 	orhi	r3,r3,128
 800313c:	01000e04 	movi	r4,56
 8003140:	20806e16 	blt	r4,r2,80032fc <__subdf3+0x890>
 8003144:	010007c4 	movi	r4,31
 8003148:	20807716 	blt	r4,r2,8003328 <__subdf3+0x8bc>
 800314c:	01000804 	movi	r4,32
 8003150:	2089c83a 	sub	r4,r4,r2
 8003154:	1914983a 	sll	r10,r3,r4
 8003158:	8890d83a 	srl	r8,r17,r2
 800315c:	8908983a 	sll	r4,r17,r4
 8003160:	1884d83a 	srl	r2,r3,r2
 8003164:	5222b03a 	or	r17,r10,r8
 8003168:	2006c03a 	cmpne	r3,r4,zero
 800316c:	88e2b03a 	or	r17,r17,r3
 8003170:	89a3883a 	add	r17,r17,r6
 8003174:	1145883a 	add	r2,r2,r5
 8003178:	898d803a 	cmpltu	r6,r17,r6
 800317c:	3087883a 	add	r3,r6,r2
 8003180:	4821883a 	mov	r16,r9
 8003184:	003ed906 	br	8002cec <__subdf3+0x280>
 8003188:	2984b03a 	or	r2,r5,r6
 800318c:	10004226 	beq	r2,zero,8003298 <__subdf3+0x82c>
 8003190:	1808d0fa 	srli	r4,r3,3
 8003194:	8822d0fa 	srli	r17,r17,3
 8003198:	1806977a 	slli	r3,r3,29
 800319c:	2080022c 	andhi	r2,r4,8
 80031a0:	1c62b03a 	or	r17,r3,r17
 80031a4:	10000826 	beq	r2,zero,80031c8 <__subdf3+0x75c>
 80031a8:	2812d0fa 	srli	r9,r5,3
 80031ac:	4880022c 	andhi	r2,r9,8
 80031b0:	1000051e 	bne	r2,zero,80031c8 <__subdf3+0x75c>
 80031b4:	300cd0fa 	srli	r6,r6,3
 80031b8:	2804977a 	slli	r2,r5,29
 80031bc:	4809883a 	mov	r4,r9
 80031c0:	3825883a 	mov	r18,r7
 80031c4:	11a2b03a 	or	r17,r2,r6
 80031c8:	8806d77a 	srli	r3,r17,29
 80031cc:	200890fa 	slli	r4,r4,3
 80031d0:	882290fa 	slli	r17,r17,3
 80031d4:	0401ffc4 	movi	r16,2047
 80031d8:	1906b03a 	or	r3,r3,r4
 80031dc:	003e4406 	br	8002af0 <__subdf3+0x84>
 80031e0:	2984b03a 	or	r2,r5,r6
 80031e4:	103e4226 	beq	r2,zero,8002af0 <__subdf3+0x84>
 80031e8:	8989c83a 	sub	r4,r17,r6
 80031ec:	8911803a 	cmpltu	r8,r17,r4
 80031f0:	1945c83a 	sub	r2,r3,r5
 80031f4:	1205c83a 	sub	r2,r2,r8
 80031f8:	1200202c 	andhi	r8,r2,128
 80031fc:	403e9a26 	beq	r8,zero,8002c68 <__subdf3+0x1fc>
 8003200:	3463c83a 	sub	r17,r6,r17
 8003204:	28c5c83a 	sub	r2,r5,r3
 8003208:	344d803a 	cmpltu	r6,r6,r17
 800320c:	1187c83a 	sub	r3,r2,r6
 8003210:	3825883a 	mov	r18,r7
 8003214:	003e3606 	br	8002af0 <__subdf3+0x84>
 8003218:	0101ffc4 	movi	r4,2047
 800321c:	493fc71e 	bne	r9,r4,800313c <__subdf3+0x6d0>
 8003220:	2807883a 	mov	r3,r5
 8003224:	3023883a 	mov	r17,r6
 8003228:	4821883a 	mov	r16,r9
 800322c:	003e3006 	br	8002af0 <__subdf3+0x84>
 8003230:	10003626 	beq	r2,zero,800330c <__subdf3+0x8a0>
 8003234:	2984b03a 	or	r2,r5,r6
 8003238:	10001726 	beq	r2,zero,8003298 <__subdf3+0x82c>
 800323c:	1808d0fa 	srli	r4,r3,3
 8003240:	8822d0fa 	srli	r17,r17,3
 8003244:	1806977a 	slli	r3,r3,29
 8003248:	2080022c 	andhi	r2,r4,8
 800324c:	1c62b03a 	or	r17,r3,r17
 8003250:	10000726 	beq	r2,zero,8003270 <__subdf3+0x804>
 8003254:	2812d0fa 	srli	r9,r5,3
 8003258:	4880022c 	andhi	r2,r9,8
 800325c:	1000041e 	bne	r2,zero,8003270 <__subdf3+0x804>
 8003260:	300cd0fa 	srli	r6,r6,3
 8003264:	2804977a 	slli	r2,r5,29
 8003268:	4809883a 	mov	r4,r9
 800326c:	11a2b03a 	or	r17,r2,r6
 8003270:	8806d77a 	srli	r3,r17,29
 8003274:	200890fa 	slli	r4,r4,3
 8003278:	882290fa 	slli	r17,r17,3
 800327c:	3825883a 	mov	r18,r7
 8003280:	1906b03a 	or	r3,r3,r4
 8003284:	0401ffc4 	movi	r16,2047
 8003288:	003e1906 	br	8002af0 <__subdf3+0x84>
 800328c:	000b883a 	mov	r5,zero
 8003290:	0005883a 	mov	r2,zero
 8003294:	003e2e06 	br	8002b50 <__subdf3+0xe4>
 8003298:	0401ffc4 	movi	r16,2047
 800329c:	003e1406 	br	8002af0 <__subdf3+0x84>
 80032a0:	0005883a 	mov	r2,zero
 80032a4:	003f7506 	br	800307c <__subdf3+0x610>
 80032a8:	0005883a 	mov	r2,zero
 80032ac:	0009883a 	mov	r4,zero
 80032b0:	003e7806 	br	8002c94 <__subdf3+0x228>
 80032b4:	123ff804 	addi	r8,r2,-32
 80032b8:	01000804 	movi	r4,32
 80032bc:	1a10d83a 	srl	r8,r3,r8
 80032c0:	11002526 	beq	r2,r4,8003358 <__subdf3+0x8ec>
 80032c4:	01001004 	movi	r4,64
 80032c8:	2085c83a 	sub	r2,r4,r2
 80032cc:	1884983a 	sll	r2,r3,r2
 80032d0:	1444b03a 	or	r2,r2,r17
 80032d4:	1004c03a 	cmpne	r2,r2,zero
 80032d8:	40a2b03a 	or	r17,r8,r2
 80032dc:	0005883a 	mov	r2,zero
 80032e0:	003f1606 	br	8002f3c <__subdf3+0x4d0>
 80032e4:	02000434 	movhi	r8,16
 80032e8:	0009883a 	mov	r4,zero
 80032ec:	423fffc4 	addi	r8,r8,-1
 80032f0:	00bfffc4 	movi	r2,-1
 80032f4:	0401ffc4 	movi	r16,2047
 80032f8:	003e6606 	br	8002c94 <__subdf3+0x228>
 80032fc:	1c62b03a 	or	r17,r3,r17
 8003300:	8822c03a 	cmpne	r17,r17,zero
 8003304:	0005883a 	mov	r2,zero
 8003308:	003f9906 	br	8003170 <__subdf3+0x704>
 800330c:	2807883a 	mov	r3,r5
 8003310:	3023883a 	mov	r17,r6
 8003314:	0401ffc4 	movi	r16,2047
 8003318:	003df506 	br	8002af0 <__subdf3+0x84>
 800331c:	2807883a 	mov	r3,r5
 8003320:	3023883a 	mov	r17,r6
 8003324:	003df206 	br	8002af0 <__subdf3+0x84>
 8003328:	123ff804 	addi	r8,r2,-32
 800332c:	01000804 	movi	r4,32
 8003330:	1a10d83a 	srl	r8,r3,r8
 8003334:	11000a26 	beq	r2,r4,8003360 <__subdf3+0x8f4>
 8003338:	01001004 	movi	r4,64
 800333c:	2085c83a 	sub	r2,r4,r2
 8003340:	1884983a 	sll	r2,r3,r2
 8003344:	1444b03a 	or	r2,r2,r17
 8003348:	1004c03a 	cmpne	r2,r2,zero
 800334c:	40a2b03a 	or	r17,r8,r2
 8003350:	0005883a 	mov	r2,zero
 8003354:	003f8606 	br	8003170 <__subdf3+0x704>
 8003358:	0005883a 	mov	r2,zero
 800335c:	003fdc06 	br	80032d0 <__subdf3+0x864>
 8003360:	0005883a 	mov	r2,zero
 8003364:	003ff706 	br	8003344 <__subdf3+0x8d8>

08003368 <__floatunsidf>:
 8003368:	defffe04 	addi	sp,sp,-8
 800336c:	dc000015 	stw	r16,0(sp)
 8003370:	dfc00115 	stw	ra,4(sp)
 8003374:	2021883a 	mov	r16,r4
 8003378:	20002226 	beq	r4,zero,8003404 <__floatunsidf+0x9c>
 800337c:	80036c80 	call	80036c8 <__clzsi2>
 8003380:	01010784 	movi	r4,1054
 8003384:	2089c83a 	sub	r4,r4,r2
 8003388:	01810cc4 	movi	r6,1075
 800338c:	310dc83a 	sub	r6,r6,r4
 8003390:	00c007c4 	movi	r3,31
 8003394:	1980120e 	bge	r3,r6,80033e0 <__floatunsidf+0x78>
 8003398:	00c104c4 	movi	r3,1043
 800339c:	1907c83a 	sub	r3,r3,r4
 80033a0:	80ca983a 	sll	r5,r16,r3
 80033a4:	00800434 	movhi	r2,16
 80033a8:	10bfffc4 	addi	r2,r2,-1
 80033ac:	2101ffcc 	andi	r4,r4,2047
 80033b0:	0021883a 	mov	r16,zero
 80033b4:	288a703a 	and	r5,r5,r2
 80033b8:	2008953a 	slli	r4,r4,20
 80033bc:	00c00434 	movhi	r3,16
 80033c0:	18ffffc4 	addi	r3,r3,-1
 80033c4:	28c6703a 	and	r3,r5,r3
 80033c8:	8005883a 	mov	r2,r16
 80033cc:	1906b03a 	or	r3,r3,r4
 80033d0:	dfc00117 	ldw	ra,4(sp)
 80033d4:	dc000017 	ldw	r16,0(sp)
 80033d8:	dec00204 	addi	sp,sp,8
 80033dc:	f800283a 	ret
 80033e0:	00c002c4 	movi	r3,11
 80033e4:	188bc83a 	sub	r5,r3,r2
 80033e8:	814ad83a 	srl	r5,r16,r5
 80033ec:	00c00434 	movhi	r3,16
 80033f0:	18ffffc4 	addi	r3,r3,-1
 80033f4:	81a0983a 	sll	r16,r16,r6
 80033f8:	2101ffcc 	andi	r4,r4,2047
 80033fc:	28ca703a 	and	r5,r5,r3
 8003400:	003fed06 	br	80033b8 <__floatunsidf+0x50>
 8003404:	0009883a 	mov	r4,zero
 8003408:	000b883a 	mov	r5,zero
 800340c:	003fea06 	br	80033b8 <__floatunsidf+0x50>

08003410 <__extendsfdf2>:
 8003410:	200ad5fa 	srli	r5,r4,23
 8003414:	defffd04 	addi	sp,sp,-12
 8003418:	dc400115 	stw	r17,4(sp)
 800341c:	29403fcc 	andi	r5,r5,255
 8003420:	29800044 	addi	r6,r5,1
 8003424:	04402034 	movhi	r17,128
 8003428:	dc000015 	stw	r16,0(sp)
 800342c:	8c7fffc4 	addi	r17,r17,-1
 8003430:	dfc00215 	stw	ra,8(sp)
 8003434:	31803fcc 	andi	r6,r6,255
 8003438:	00800044 	movi	r2,1
 800343c:	8922703a 	and	r17,r17,r4
 8003440:	2020d7fa 	srli	r16,r4,31
 8003444:	1180110e 	bge	r2,r6,800348c <__extendsfdf2+0x7c>
 8003448:	880cd0fa 	srli	r6,r17,3
 800344c:	8822977a 	slli	r17,r17,29
 8003450:	2940e004 	addi	r5,r5,896
 8003454:	2941ffcc 	andi	r5,r5,2047
 8003458:	2804953a 	slli	r2,r5,20
 800345c:	01400434 	movhi	r5,16
 8003460:	800697fa 	slli	r3,r16,31
 8003464:	297fffc4 	addi	r5,r5,-1
 8003468:	314a703a 	and	r5,r6,r5
 800346c:	288ab03a 	or	r5,r5,r2
 8003470:	28c6b03a 	or	r3,r5,r3
 8003474:	8805883a 	mov	r2,r17
 8003478:	dfc00217 	ldw	ra,8(sp)
 800347c:	dc400117 	ldw	r17,4(sp)
 8003480:	dc000017 	ldw	r16,0(sp)
 8003484:	dec00304 	addi	sp,sp,12
 8003488:	f800283a 	ret
 800348c:	2800111e 	bne	r5,zero,80034d4 <__extendsfdf2+0xc4>
 8003490:	88001c26 	beq	r17,zero,8003504 <__extendsfdf2+0xf4>
 8003494:	8809883a 	mov	r4,r17
 8003498:	80036c80 	call	80036c8 <__clzsi2>
 800349c:	00c00284 	movi	r3,10
 80034a0:	18801b16 	blt	r3,r2,8003510 <__extendsfdf2+0x100>
 80034a4:	018002c4 	movi	r6,11
 80034a8:	308dc83a 	sub	r6,r6,r2
 80034ac:	11000544 	addi	r4,r2,21
 80034b0:	8986d83a 	srl	r3,r17,r6
 80034b4:	8922983a 	sll	r17,r17,r4
 80034b8:	0180e244 	movi	r6,905
 80034bc:	01400434 	movhi	r5,16
 80034c0:	3085c83a 	sub	r2,r6,r2
 80034c4:	297fffc4 	addi	r5,r5,-1
 80034c8:	194c703a 	and	r6,r3,r5
 80034cc:	1141ffcc 	andi	r5,r2,2047
 80034d0:	003fe006 	br	8003454 <__extendsfdf2+0x44>
 80034d4:	88000826 	beq	r17,zero,80034f8 <__extendsfdf2+0xe8>
 80034d8:	880cd0fa 	srli	r6,r17,3
 80034dc:	00800434 	movhi	r2,16
 80034e0:	10bfffc4 	addi	r2,r2,-1
 80034e4:	31800234 	orhi	r6,r6,8
 80034e8:	8822977a 	slli	r17,r17,29
 80034ec:	308c703a 	and	r6,r6,r2
 80034f0:	0141ffc4 	movi	r5,2047
 80034f4:	003fd706 	br	8003454 <__extendsfdf2+0x44>
 80034f8:	0141ffc4 	movi	r5,2047
 80034fc:	000d883a 	mov	r6,zero
 8003500:	003fd406 	br	8003454 <__extendsfdf2+0x44>
 8003504:	000b883a 	mov	r5,zero
 8003508:	000d883a 	mov	r6,zero
 800350c:	003fd106 	br	8003454 <__extendsfdf2+0x44>
 8003510:	11bffd44 	addi	r6,r2,-11
 8003514:	8986983a 	sll	r3,r17,r6
 8003518:	0023883a 	mov	r17,zero
 800351c:	003fe606 	br	80034b8 <__extendsfdf2+0xa8>

08003520 <__truncdfsf2>:
 8003520:	2810d53a 	srli	r8,r5,20
 8003524:	01c00434 	movhi	r7,16
 8003528:	39ffffc4 	addi	r7,r7,-1
 800352c:	29ce703a 	and	r7,r5,r7
 8003530:	4201ffcc 	andi	r8,r8,2047
 8003534:	380e90fa 	slli	r7,r7,3
 8003538:	200cd77a 	srli	r6,r4,29
 800353c:	42400044 	addi	r9,r8,1
 8003540:	4a41ffcc 	andi	r9,r9,2047
 8003544:	00c00044 	movi	r3,1
 8003548:	280ad7fa 	srli	r5,r5,31
 800354c:	31ceb03a 	or	r7,r6,r7
 8003550:	200490fa 	slli	r2,r4,3
 8003554:	1a40230e 	bge	r3,r9,80035e4 <__truncdfsf2+0xc4>
 8003558:	40ff2004 	addi	r3,r8,-896
 800355c:	01803f84 	movi	r6,254
 8003560:	30c01516 	blt	r6,r3,80035b8 <__truncdfsf2+0x98>
 8003564:	00c0380e 	bge	zero,r3,8003648 <__truncdfsf2+0x128>
 8003568:	200c91ba 	slli	r6,r4,6
 800356c:	380e90fa 	slli	r7,r7,3
 8003570:	1004d77a 	srli	r2,r2,29
 8003574:	300cc03a 	cmpne	r6,r6,zero
 8003578:	31ccb03a 	or	r6,r6,r7
 800357c:	308cb03a 	or	r6,r6,r2
 8003580:	308001cc 	andi	r2,r6,7
 8003584:	10000426 	beq	r2,zero,8003598 <__truncdfsf2+0x78>
 8003588:	308003cc 	andi	r2,r6,15
 800358c:	01000104 	movi	r4,4
 8003590:	11000126 	beq	r2,r4,8003598 <__truncdfsf2+0x78>
 8003594:	31800104 	addi	r6,r6,4
 8003598:	3081002c 	andhi	r2,r6,1024
 800359c:	10001626 	beq	r2,zero,80035f8 <__truncdfsf2+0xd8>
 80035a0:	18c00044 	addi	r3,r3,1
 80035a4:	00803fc4 	movi	r2,255
 80035a8:	18800326 	beq	r3,r2,80035b8 <__truncdfsf2+0x98>
 80035ac:	300c91ba 	slli	r6,r6,6
 80035b0:	300cd27a 	srli	r6,r6,9
 80035b4:	00000206 	br	80035c0 <__truncdfsf2+0xa0>
 80035b8:	00ffffc4 	movi	r3,-1
 80035bc:	000d883a 	mov	r6,zero
 80035c0:	18c03fcc 	andi	r3,r3,255
 80035c4:	180895fa 	slli	r4,r3,23
 80035c8:	00c02034 	movhi	r3,128
 80035cc:	280a97fa 	slli	r5,r5,31
 80035d0:	18ffffc4 	addi	r3,r3,-1
 80035d4:	30c6703a 	and	r3,r6,r3
 80035d8:	1906b03a 	or	r3,r3,r4
 80035dc:	1944b03a 	or	r2,r3,r5
 80035e0:	f800283a 	ret
 80035e4:	40000b1e 	bne	r8,zero,8003614 <__truncdfsf2+0xf4>
 80035e8:	388cb03a 	or	r6,r7,r2
 80035ec:	0007883a 	mov	r3,zero
 80035f0:	30000426 	beq	r6,zero,8003604 <__truncdfsf2+0xe4>
 80035f4:	01800144 	movi	r6,5
 80035f8:	00803fc4 	movi	r2,255
 80035fc:	300cd0fa 	srli	r6,r6,3
 8003600:	18800a26 	beq	r3,r2,800362c <__truncdfsf2+0x10c>
 8003604:	00802034 	movhi	r2,128
 8003608:	10bfffc4 	addi	r2,r2,-1
 800360c:	308c703a 	and	r6,r6,r2
 8003610:	003feb06 	br	80035c0 <__truncdfsf2+0xa0>
 8003614:	3888b03a 	or	r4,r7,r2
 8003618:	203fe726 	beq	r4,zero,80035b8 <__truncdfsf2+0x98>
 800361c:	380c90fa 	slli	r6,r7,3
 8003620:	00c03fc4 	movi	r3,255
 8003624:	31808034 	orhi	r6,r6,512
 8003628:	003fd506 	br	8003580 <__truncdfsf2+0x60>
 800362c:	303fe226 	beq	r6,zero,80035b8 <__truncdfsf2+0x98>
 8003630:	00802034 	movhi	r2,128
 8003634:	31801034 	orhi	r6,r6,64
 8003638:	10bfffc4 	addi	r2,r2,-1
 800363c:	00ffffc4 	movi	r3,-1
 8003640:	308c703a 	and	r6,r6,r2
 8003644:	003fde06 	br	80035c0 <__truncdfsf2+0xa0>
 8003648:	013ffa44 	movi	r4,-23
 800364c:	19000e16 	blt	r3,r4,8003688 <__truncdfsf2+0x168>
 8003650:	01000784 	movi	r4,30
 8003654:	20c9c83a 	sub	r4,r4,r3
 8003658:	018007c4 	movi	r6,31
 800365c:	39c02034 	orhi	r7,r7,128
 8003660:	31000b16 	blt	r6,r4,8003690 <__truncdfsf2+0x170>
 8003664:	423f2084 	addi	r8,r8,-894
 8003668:	120c983a 	sll	r6,r2,r8
 800366c:	3a0e983a 	sll	r7,r7,r8
 8003670:	1104d83a 	srl	r2,r2,r4
 8003674:	300cc03a 	cmpne	r6,r6,zero
 8003678:	31ceb03a 	or	r7,r6,r7
 800367c:	388cb03a 	or	r6,r7,r2
 8003680:	0007883a 	mov	r3,zero
 8003684:	003fbe06 	br	8003580 <__truncdfsf2+0x60>
 8003688:	0007883a 	mov	r3,zero
 800368c:	003fd906 	br	80035f4 <__truncdfsf2+0xd4>
 8003690:	01bfff84 	movi	r6,-2
 8003694:	30cdc83a 	sub	r6,r6,r3
 8003698:	00c00804 	movi	r3,32
 800369c:	398cd83a 	srl	r6,r7,r6
 80036a0:	20c00726 	beq	r4,r3,80036c0 <__truncdfsf2+0x1a0>
 80036a4:	423f2884 	addi	r8,r8,-862
 80036a8:	3a0e983a 	sll	r7,r7,r8
 80036ac:	3884b03a 	or	r2,r7,r2
 80036b0:	1004c03a 	cmpne	r2,r2,zero
 80036b4:	118cb03a 	or	r6,r2,r6
 80036b8:	0007883a 	mov	r3,zero
 80036bc:	003fb006 	br	8003580 <__truncdfsf2+0x60>
 80036c0:	000f883a 	mov	r7,zero
 80036c4:	003ff906 	br	80036ac <__truncdfsf2+0x18c>

080036c8 <__clzsi2>:
 80036c8:	00bfffd4 	movui	r2,65535
 80036cc:	11000536 	bltu	r2,r4,80036e4 <__clzsi2+0x1c>
 80036d0:	00803fc4 	movi	r2,255
 80036d4:	11000f36 	bltu	r2,r4,8003714 <__clzsi2+0x4c>
 80036d8:	00800804 	movi	r2,32
 80036dc:	0007883a 	mov	r3,zero
 80036e0:	00000506 	br	80036f8 <__clzsi2+0x30>
 80036e4:	00804034 	movhi	r2,256
 80036e8:	10bfffc4 	addi	r2,r2,-1
 80036ec:	11000c2e 	bgeu	r2,r4,8003720 <__clzsi2+0x58>
 80036f0:	00800204 	movi	r2,8
 80036f4:	00c00604 	movi	r3,24
 80036f8:	20c8d83a 	srl	r4,r4,r3
 80036fc:	00c20074 	movhi	r3,2049
 8003700:	18e43784 	addi	r3,r3,-28450
 8003704:	1909883a 	add	r4,r3,r4
 8003708:	20c00003 	ldbu	r3,0(r4)
 800370c:	10c5c83a 	sub	r2,r2,r3
 8003710:	f800283a 	ret
 8003714:	00800604 	movi	r2,24
 8003718:	00c00204 	movi	r3,8
 800371c:	003ff606 	br	80036f8 <__clzsi2+0x30>
 8003720:	00800404 	movi	r2,16
 8003724:	1007883a 	mov	r3,r2
 8003728:	003ff306 	br	80036f8 <__clzsi2+0x30>

0800372c <__fixunsdfsi>:
 800372c:	defffd04 	addi	sp,sp,-12
 8003730:	000d883a 	mov	r6,zero
 8003734:	01d07834 	movhi	r7,16864
 8003738:	dc400115 	stw	r17,4(sp)
 800373c:	dc000015 	stw	r16,0(sp)
 8003740:	dfc00215 	stw	ra,8(sp)
 8003744:	2023883a 	mov	r17,r4
 8003748:	2821883a 	mov	r16,r5
 800374c:	80037a00 	call	80037a0 <__gedf2>
 8003750:	1000080e 	bge	r2,zero,8003774 <__fixunsdfsi+0x48>
 8003754:	8809883a 	mov	r4,r17
 8003758:	800b883a 	mov	r5,r16
 800375c:	800387c0 	call	800387c <__fixdfsi>
 8003760:	dfc00217 	ldw	ra,8(sp)
 8003764:	dc400117 	ldw	r17,4(sp)
 8003768:	dc000017 	ldw	r16,0(sp)
 800376c:	dec00304 	addi	sp,sp,12
 8003770:	f800283a 	ret
 8003774:	000d883a 	mov	r6,zero
 8003778:	01d07834 	movhi	r7,16864
 800377c:	8809883a 	mov	r4,r17
 8003780:	800b883a 	mov	r5,r16
 8003784:	8002a6c0 	call	8002a6c <__subdf3>
 8003788:	180b883a 	mov	r5,r3
 800378c:	1009883a 	mov	r4,r2
 8003790:	800387c0 	call	800387c <__fixdfsi>
 8003794:	00e00034 	movhi	r3,32768
 8003798:	10c5883a 	add	r2,r2,r3
 800379c:	003ff006 	br	8003760 <__fixunsdfsi+0x34>

080037a0 <__gedf2>:
 80037a0:	2804d53a 	srli	r2,r5,20
 80037a4:	3806d53a 	srli	r3,r7,20
 80037a8:	02000434 	movhi	r8,16
 80037ac:	423fffc4 	addi	r8,r8,-1
 80037b0:	1081ffcc 	andi	r2,r2,2047
 80037b4:	0241ffc4 	movi	r9,2047
 80037b8:	2a14703a 	and	r10,r5,r8
 80037bc:	18c1ffcc 	andi	r3,r3,2047
 80037c0:	3a10703a 	and	r8,r7,r8
 80037c4:	280ad7fa 	srli	r5,r5,31
 80037c8:	380ed7fa 	srli	r7,r7,31
 80037cc:	12401d26 	beq	r2,r9,8003844 <__gedf2+0xa4>
 80037d0:	0241ffc4 	movi	r9,2047
 80037d4:	1a401226 	beq	r3,r9,8003820 <__gedf2+0x80>
 80037d8:	1000081e 	bne	r2,zero,80037fc <__gedf2+0x5c>
 80037dc:	2296b03a 	or	r11,r4,r10
 80037e0:	5813003a 	cmpeq	r9,r11,zero
 80037e4:	1800091e 	bne	r3,zero,800380c <__gedf2+0x6c>
 80037e8:	3218b03a 	or	r12,r6,r8
 80037ec:	6000071e 	bne	r12,zero,800380c <__gedf2+0x6c>
 80037f0:	0005883a 	mov	r2,zero
 80037f4:	5800101e 	bne	r11,zero,8003838 <__gedf2+0x98>
 80037f8:	f800283a 	ret
 80037fc:	18000c1e 	bne	r3,zero,8003830 <__gedf2+0x90>
 8003800:	3212b03a 	or	r9,r6,r8
 8003804:	48000c26 	beq	r9,zero,8003838 <__gedf2+0x98>
 8003808:	0013883a 	mov	r9,zero
 800380c:	39c03fcc 	andi	r7,r7,255
 8003810:	48000826 	beq	r9,zero,8003834 <__gedf2+0x94>
 8003814:	38000926 	beq	r7,zero,800383c <__gedf2+0x9c>
 8003818:	00800044 	movi	r2,1
 800381c:	f800283a 	ret
 8003820:	3212b03a 	or	r9,r6,r8
 8003824:	483fec26 	beq	r9,zero,80037d8 <__gedf2+0x38>
 8003828:	00bfff84 	movi	r2,-2
 800382c:	f800283a 	ret
 8003830:	39c03fcc 	andi	r7,r7,255
 8003834:	29c00626 	beq	r5,r7,8003850 <__gedf2+0xb0>
 8003838:	283ff726 	beq	r5,zero,8003818 <__gedf2+0x78>
 800383c:	00bfffc4 	movi	r2,-1
 8003840:	f800283a 	ret
 8003844:	2292b03a 	or	r9,r4,r10
 8003848:	483fe126 	beq	r9,zero,80037d0 <__gedf2+0x30>
 800384c:	003ff606 	br	8003828 <__gedf2+0x88>
 8003850:	18bff916 	blt	r3,r2,8003838 <__gedf2+0x98>
 8003854:	10c00316 	blt	r2,r3,8003864 <__gedf2+0xc4>
 8003858:	42bff736 	bltu	r8,r10,8003838 <__gedf2+0x98>
 800385c:	52000326 	beq	r10,r8,800386c <__gedf2+0xcc>
 8003860:	5200042e 	bgeu	r10,r8,8003874 <__gedf2+0xd4>
 8003864:	283fec1e 	bne	r5,zero,8003818 <__gedf2+0x78>
 8003868:	003ff406 	br	800383c <__gedf2+0x9c>
 800386c:	313ff236 	bltu	r6,r4,8003838 <__gedf2+0x98>
 8003870:	21bffc36 	bltu	r4,r6,8003864 <__gedf2+0xc4>
 8003874:	0005883a 	mov	r2,zero
 8003878:	f800283a 	ret

0800387c <__fixdfsi>:
 800387c:	280cd53a 	srli	r6,r5,20
 8003880:	00c00434 	movhi	r3,16
 8003884:	18ffffc4 	addi	r3,r3,-1
 8003888:	3181ffcc 	andi	r6,r6,2047
 800388c:	01c0ff84 	movi	r7,1022
 8003890:	28c6703a 	and	r3,r5,r3
 8003894:	280ad7fa 	srli	r5,r5,31
 8003898:	3980120e 	bge	r7,r6,80038e4 <__fixdfsi+0x68>
 800389c:	00810744 	movi	r2,1053
 80038a0:	11800c16 	blt	r2,r6,80038d4 <__fixdfsi+0x58>
 80038a4:	00810cc4 	movi	r2,1075
 80038a8:	1185c83a 	sub	r2,r2,r6
 80038ac:	01c007c4 	movi	r7,31
 80038b0:	18c00434 	orhi	r3,r3,16
 80038b4:	38800d16 	blt	r7,r2,80038ec <__fixdfsi+0x70>
 80038b8:	31befb44 	addi	r6,r6,-1043
 80038bc:	2084d83a 	srl	r2,r4,r2
 80038c0:	1986983a 	sll	r3,r3,r6
 80038c4:	1884b03a 	or	r2,r3,r2
 80038c8:	28000726 	beq	r5,zero,80038e8 <__fixdfsi+0x6c>
 80038cc:	0085c83a 	sub	r2,zero,r2
 80038d0:	f800283a 	ret
 80038d4:	00a00034 	movhi	r2,32768
 80038d8:	10bfffc4 	addi	r2,r2,-1
 80038dc:	2885883a 	add	r2,r5,r2
 80038e0:	f800283a 	ret
 80038e4:	0005883a 	mov	r2,zero
 80038e8:	f800283a 	ret
 80038ec:	008104c4 	movi	r2,1043
 80038f0:	1185c83a 	sub	r2,r2,r6
 80038f4:	1884d83a 	srl	r2,r3,r2
 80038f8:	003ff306 	br	80038c8 <__fixdfsi+0x4c>

080038fc <_puts_r>:
 80038fc:	defff604 	addi	sp,sp,-40
 8003900:	dc000715 	stw	r16,28(sp)
 8003904:	2021883a 	mov	r16,r4
 8003908:	2809883a 	mov	r4,r5
 800390c:	dc400815 	stw	r17,32(sp)
 8003910:	dfc00915 	stw	ra,36(sp)
 8003914:	2823883a 	mov	r17,r5
 8003918:	8003a4c0 	call	8003a4c <strlen>
 800391c:	10c00044 	addi	r3,r2,1
 8003920:	d8800115 	stw	r2,4(sp)
 8003924:	00820074 	movhi	r2,2049
 8003928:	10a47804 	addi	r2,r2,-28192
 800392c:	d8800215 	stw	r2,8(sp)
 8003930:	00800044 	movi	r2,1
 8003934:	d8800315 	stw	r2,12(sp)
 8003938:	00800084 	movi	r2,2
 800393c:	dc400015 	stw	r17,0(sp)
 8003940:	d8c00615 	stw	r3,24(sp)
 8003944:	dec00415 	stw	sp,16(sp)
 8003948:	d8800515 	stw	r2,20(sp)
 800394c:	80000226 	beq	r16,zero,8003958 <_puts_r+0x5c>
 8003950:	80800e17 	ldw	r2,56(r16)
 8003954:	10001426 	beq	r2,zero,80039a8 <_puts_r+0xac>
 8003958:	81400217 	ldw	r5,8(r16)
 800395c:	2880030b 	ldhu	r2,12(r5)
 8003960:	10c8000c 	andi	r3,r2,8192
 8003964:	1800061e 	bne	r3,zero,8003980 <_puts_r+0x84>
 8003968:	29001917 	ldw	r4,100(r5)
 800396c:	00f7ffc4 	movi	r3,-8193
 8003970:	10880014 	ori	r2,r2,8192
 8003974:	20c6703a 	and	r3,r4,r3
 8003978:	2880030d 	sth	r2,12(r5)
 800397c:	28c01915 	stw	r3,100(r5)
 8003980:	d9800404 	addi	r6,sp,16
 8003984:	8009883a 	mov	r4,r16
 8003988:	8003ed40 	call	8003ed4 <__sfvwrite_r>
 800398c:	1000091e 	bne	r2,zero,80039b4 <_puts_r+0xb8>
 8003990:	00800284 	movi	r2,10
 8003994:	dfc00917 	ldw	ra,36(sp)
 8003998:	dc400817 	ldw	r17,32(sp)
 800399c:	dc000717 	ldw	r16,28(sp)
 80039a0:	dec00a04 	addi	sp,sp,40
 80039a4:	f800283a 	ret
 80039a8:	8009883a 	mov	r4,r16
 80039ac:	8003e840 	call	8003e84 <__sinit>
 80039b0:	003fe906 	br	8003958 <_puts_r+0x5c>
 80039b4:	00bfffc4 	movi	r2,-1
 80039b8:	003ff606 	br	8003994 <_puts_r+0x98>

080039bc <puts>:
 80039bc:	00820074 	movhi	r2,2049
 80039c0:	10ab1704 	addi	r2,r2,-21412
 80039c4:	200b883a 	mov	r5,r4
 80039c8:	11000017 	ldw	r4,0(r2)
 80039cc:	80038fc1 	jmpi	80038fc <_puts_r>

080039d0 <srand>:
 80039d0:	00820074 	movhi	r2,2049
 80039d4:	10ab1704 	addi	r2,r2,-21412
 80039d8:	10800017 	ldw	r2,0(r2)
 80039dc:	11002915 	stw	r4,164(r2)
 80039e0:	10002a15 	stw	zero,168(r2)
 80039e4:	f800283a 	ret

080039e8 <rand>:
 80039e8:	00820074 	movhi	r2,2049
 80039ec:	defffe04 	addi	sp,sp,-8
 80039f0:	10ab1704 	addi	r2,r2,-21412
 80039f4:	dc000015 	stw	r16,0(sp)
 80039f8:	14000017 	ldw	r16,0(r2)
 80039fc:	dfc00115 	stw	ra,4(sp)
 8003a00:	01932574 	movhi	r6,19605
 8003a04:	81002917 	ldw	r4,164(r16)
 8003a08:	81402a17 	ldw	r5,168(r16)
 8003a0c:	01d614b4 	movhi	r7,22610
 8003a10:	319fcb44 	addi	r6,r6,32557
 8003a14:	39fd0b44 	addi	r7,r7,-3027
 8003a18:	80066380 	call	8006638 <__muldi3>
 8003a1c:	11000044 	addi	r4,r2,1
 8003a20:	2085803a 	cmpltu	r2,r4,r2
 8003a24:	10c7883a 	add	r3,r2,r3
 8003a28:	00a00034 	movhi	r2,32768
 8003a2c:	10bfffc4 	addi	r2,r2,-1
 8003a30:	1884703a 	and	r2,r3,r2
 8003a34:	81002915 	stw	r4,164(r16)
 8003a38:	80c02a15 	stw	r3,168(r16)
 8003a3c:	dfc00117 	ldw	ra,4(sp)
 8003a40:	dc000017 	ldw	r16,0(sp)
 8003a44:	dec00204 	addi	sp,sp,8
 8003a48:	f800283a 	ret

08003a4c <strlen>:
 8003a4c:	208000cc 	andi	r2,r4,3
 8003a50:	10002026 	beq	r2,zero,8003ad4 <strlen+0x88>
 8003a54:	20800007 	ldb	r2,0(r4)
 8003a58:	10002026 	beq	r2,zero,8003adc <strlen+0x90>
 8003a5c:	2005883a 	mov	r2,r4
 8003a60:	00000206 	br	8003a6c <strlen+0x20>
 8003a64:	10c00007 	ldb	r3,0(r2)
 8003a68:	18001826 	beq	r3,zero,8003acc <strlen+0x80>
 8003a6c:	10800044 	addi	r2,r2,1
 8003a70:	10c000cc 	andi	r3,r2,3
 8003a74:	183ffb1e 	bne	r3,zero,8003a64 <strlen+0x18>
 8003a78:	10c00017 	ldw	r3,0(r2)
 8003a7c:	01ffbff4 	movhi	r7,65279
 8003a80:	39ffbfc4 	addi	r7,r7,-257
 8003a84:	00ca303a 	nor	r5,zero,r3
 8003a88:	01a02074 	movhi	r6,32897
 8003a8c:	19c7883a 	add	r3,r3,r7
 8003a90:	31a02004 	addi	r6,r6,-32640
 8003a94:	1946703a 	and	r3,r3,r5
 8003a98:	1986703a 	and	r3,r3,r6
 8003a9c:	1800091e 	bne	r3,zero,8003ac4 <strlen+0x78>
 8003aa0:	10800104 	addi	r2,r2,4
 8003aa4:	10c00017 	ldw	r3,0(r2)
 8003aa8:	19cb883a 	add	r5,r3,r7
 8003aac:	00c6303a 	nor	r3,zero,r3
 8003ab0:	28c6703a 	and	r3,r5,r3
 8003ab4:	1986703a 	and	r3,r3,r6
 8003ab8:	183ff926 	beq	r3,zero,8003aa0 <strlen+0x54>
 8003abc:	00000106 	br	8003ac4 <strlen+0x78>
 8003ac0:	10800044 	addi	r2,r2,1
 8003ac4:	10c00007 	ldb	r3,0(r2)
 8003ac8:	183ffd1e 	bne	r3,zero,8003ac0 <strlen+0x74>
 8003acc:	1105c83a 	sub	r2,r2,r4
 8003ad0:	f800283a 	ret
 8003ad4:	2005883a 	mov	r2,r4
 8003ad8:	003fe706 	br	8003a78 <strlen+0x2c>
 8003adc:	0005883a 	mov	r2,zero
 8003ae0:	f800283a 	ret

08003ae4 <time>:
 8003ae4:	00820074 	movhi	r2,2049
 8003ae8:	defffc04 	addi	sp,sp,-16
 8003aec:	10ab1704 	addi	r2,r2,-21412
 8003af0:	dc000215 	stw	r16,8(sp)
 8003af4:	2021883a 	mov	r16,r4
 8003af8:	11000017 	ldw	r4,0(r2)
 8003afc:	000d883a 	mov	r6,zero
 8003b00:	d80b883a 	mov	r5,sp
 8003b04:	dfc00315 	stw	ra,12(sp)
 8003b08:	80045180 	call	8004518 <_gettimeofday_r>
 8003b0c:	10000716 	blt	r2,zero,8003b2c <time+0x48>
 8003b10:	d8800017 	ldw	r2,0(sp)
 8003b14:	80000126 	beq	r16,zero,8003b1c <time+0x38>
 8003b18:	80800015 	stw	r2,0(r16)
 8003b1c:	dfc00317 	ldw	ra,12(sp)
 8003b20:	dc000217 	ldw	r16,8(sp)
 8003b24:	dec00404 	addi	sp,sp,16
 8003b28:	f800283a 	ret
 8003b2c:	00bfffc4 	movi	r2,-1
 8003b30:	003ffa06 	br	8003b1c <time+0x38>

08003b34 <__fp_unlock>:
 8003b34:	0005883a 	mov	r2,zero
 8003b38:	f800283a 	ret

08003b3c <_cleanup_r>:
 8003b3c:	01420034 	movhi	r5,2048
 8003b40:	2956cb04 	addi	r5,r5,23340
 8003b44:	80044541 	jmpi	8004454 <_fwalk_reent>

08003b48 <__sinit.part.1>:
 8003b48:	defff704 	addi	sp,sp,-36
 8003b4c:	00c20034 	movhi	r3,2048
 8003b50:	dfc00815 	stw	ra,32(sp)
 8003b54:	ddc00715 	stw	r23,28(sp)
 8003b58:	dd800615 	stw	r22,24(sp)
 8003b5c:	dd400515 	stw	r21,20(sp)
 8003b60:	dd000415 	stw	r20,16(sp)
 8003b64:	dcc00315 	stw	r19,12(sp)
 8003b68:	dc800215 	stw	r18,8(sp)
 8003b6c:	dc400115 	stw	r17,4(sp)
 8003b70:	dc000015 	stw	r16,0(sp)
 8003b74:	18cecf04 	addi	r3,r3,15164
 8003b78:	24000117 	ldw	r16,4(r4)
 8003b7c:	20c00f15 	stw	r3,60(r4)
 8003b80:	2080bb04 	addi	r2,r4,748
 8003b84:	00c000c4 	movi	r3,3
 8003b88:	20c0b915 	stw	r3,740(r4)
 8003b8c:	2080ba15 	stw	r2,744(r4)
 8003b90:	2000b815 	stw	zero,736(r4)
 8003b94:	05c00204 	movi	r23,8
 8003b98:	00800104 	movi	r2,4
 8003b9c:	2025883a 	mov	r18,r4
 8003ba0:	b80d883a 	mov	r6,r23
 8003ba4:	81001704 	addi	r4,r16,92
 8003ba8:	000b883a 	mov	r5,zero
 8003bac:	80000015 	stw	zero,0(r16)
 8003bb0:	80000115 	stw	zero,4(r16)
 8003bb4:	80000215 	stw	zero,8(r16)
 8003bb8:	8080030d 	sth	r2,12(r16)
 8003bbc:	80001915 	stw	zero,100(r16)
 8003bc0:	8000038d 	sth	zero,14(r16)
 8003bc4:	80000415 	stw	zero,16(r16)
 8003bc8:	80000515 	stw	zero,20(r16)
 8003bcc:	80000615 	stw	zero,24(r16)
 8003bd0:	80051080 	call	8005108 <memset>
 8003bd4:	05820034 	movhi	r22,2048
 8003bd8:	94400217 	ldw	r17,8(r18)
 8003bdc:	05420034 	movhi	r21,2048
 8003be0:	05020034 	movhi	r20,2048
 8003be4:	04c20034 	movhi	r19,2048
 8003be8:	b595fa04 	addi	r22,r22,22504
 8003bec:	ad561104 	addi	r21,r21,22596
 8003bf0:	a5163004 	addi	r20,r20,22720
 8003bf4:	9cd64704 	addi	r19,r19,22812
 8003bf8:	85800815 	stw	r22,32(r16)
 8003bfc:	85400915 	stw	r21,36(r16)
 8003c00:	85000a15 	stw	r20,40(r16)
 8003c04:	84c00b15 	stw	r19,44(r16)
 8003c08:	84000715 	stw	r16,28(r16)
 8003c0c:	00800284 	movi	r2,10
 8003c10:	8880030d 	sth	r2,12(r17)
 8003c14:	00800044 	movi	r2,1
 8003c18:	b80d883a 	mov	r6,r23
 8003c1c:	89001704 	addi	r4,r17,92
 8003c20:	000b883a 	mov	r5,zero
 8003c24:	88000015 	stw	zero,0(r17)
 8003c28:	88000115 	stw	zero,4(r17)
 8003c2c:	88000215 	stw	zero,8(r17)
 8003c30:	88001915 	stw	zero,100(r17)
 8003c34:	8880038d 	sth	r2,14(r17)
 8003c38:	88000415 	stw	zero,16(r17)
 8003c3c:	88000515 	stw	zero,20(r17)
 8003c40:	88000615 	stw	zero,24(r17)
 8003c44:	80051080 	call	8005108 <memset>
 8003c48:	94000317 	ldw	r16,12(r18)
 8003c4c:	00800484 	movi	r2,18
 8003c50:	8c400715 	stw	r17,28(r17)
 8003c54:	8d800815 	stw	r22,32(r17)
 8003c58:	8d400915 	stw	r21,36(r17)
 8003c5c:	8d000a15 	stw	r20,40(r17)
 8003c60:	8cc00b15 	stw	r19,44(r17)
 8003c64:	8080030d 	sth	r2,12(r16)
 8003c68:	00800084 	movi	r2,2
 8003c6c:	80000015 	stw	zero,0(r16)
 8003c70:	80000115 	stw	zero,4(r16)
 8003c74:	80000215 	stw	zero,8(r16)
 8003c78:	80001915 	stw	zero,100(r16)
 8003c7c:	8080038d 	sth	r2,14(r16)
 8003c80:	80000415 	stw	zero,16(r16)
 8003c84:	80000515 	stw	zero,20(r16)
 8003c88:	80000615 	stw	zero,24(r16)
 8003c8c:	b80d883a 	mov	r6,r23
 8003c90:	000b883a 	mov	r5,zero
 8003c94:	81001704 	addi	r4,r16,92
 8003c98:	80051080 	call	8005108 <memset>
 8003c9c:	00800044 	movi	r2,1
 8003ca0:	84000715 	stw	r16,28(r16)
 8003ca4:	85800815 	stw	r22,32(r16)
 8003ca8:	85400915 	stw	r21,36(r16)
 8003cac:	85000a15 	stw	r20,40(r16)
 8003cb0:	84c00b15 	stw	r19,44(r16)
 8003cb4:	90800e15 	stw	r2,56(r18)
 8003cb8:	dfc00817 	ldw	ra,32(sp)
 8003cbc:	ddc00717 	ldw	r23,28(sp)
 8003cc0:	dd800617 	ldw	r22,24(sp)
 8003cc4:	dd400517 	ldw	r21,20(sp)
 8003cc8:	dd000417 	ldw	r20,16(sp)
 8003ccc:	dcc00317 	ldw	r19,12(sp)
 8003cd0:	dc800217 	ldw	r18,8(sp)
 8003cd4:	dc400117 	ldw	r17,4(sp)
 8003cd8:	dc000017 	ldw	r16,0(sp)
 8003cdc:	dec00904 	addi	sp,sp,36
 8003ce0:	f800283a 	ret

08003ce4 <__fp_lock>:
 8003ce4:	0005883a 	mov	r2,zero
 8003ce8:	f800283a 	ret

08003cec <__sfmoreglue>:
 8003cec:	defffc04 	addi	sp,sp,-16
 8003cf0:	dc400115 	stw	r17,4(sp)
 8003cf4:	2c7fffc4 	addi	r17,r5,-1
 8003cf8:	8c401a24 	muli	r17,r17,104
 8003cfc:	dc800215 	stw	r18,8(sp)
 8003d00:	2825883a 	mov	r18,r5
 8003d04:	89401d04 	addi	r5,r17,116
 8003d08:	dc000015 	stw	r16,0(sp)
 8003d0c:	dfc00315 	stw	ra,12(sp)
 8003d10:	80045740 	call	8004574 <_malloc_r>
 8003d14:	1021883a 	mov	r16,r2
 8003d18:	10000726 	beq	r2,zero,8003d38 <__sfmoreglue+0x4c>
 8003d1c:	11000304 	addi	r4,r2,12
 8003d20:	10000015 	stw	zero,0(r2)
 8003d24:	14800115 	stw	r18,4(r2)
 8003d28:	11000215 	stw	r4,8(r2)
 8003d2c:	89801a04 	addi	r6,r17,104
 8003d30:	000b883a 	mov	r5,zero
 8003d34:	80051080 	call	8005108 <memset>
 8003d38:	8005883a 	mov	r2,r16
 8003d3c:	dfc00317 	ldw	ra,12(sp)
 8003d40:	dc800217 	ldw	r18,8(sp)
 8003d44:	dc400117 	ldw	r17,4(sp)
 8003d48:	dc000017 	ldw	r16,0(sp)
 8003d4c:	dec00404 	addi	sp,sp,16
 8003d50:	f800283a 	ret

08003d54 <__sfp>:
 8003d54:	defffb04 	addi	sp,sp,-20
 8003d58:	dc000015 	stw	r16,0(sp)
 8003d5c:	04020074 	movhi	r16,2049
 8003d60:	842b1604 	addi	r16,r16,-21416
 8003d64:	dcc00315 	stw	r19,12(sp)
 8003d68:	2027883a 	mov	r19,r4
 8003d6c:	81000017 	ldw	r4,0(r16)
 8003d70:	dfc00415 	stw	ra,16(sp)
 8003d74:	dc800215 	stw	r18,8(sp)
 8003d78:	20800e17 	ldw	r2,56(r4)
 8003d7c:	dc400115 	stw	r17,4(sp)
 8003d80:	1000021e 	bne	r2,zero,8003d8c <__sfp+0x38>
 8003d84:	8003b480 	call	8003b48 <__sinit.part.1>
 8003d88:	81000017 	ldw	r4,0(r16)
 8003d8c:	2480b804 	addi	r18,r4,736
 8003d90:	047fffc4 	movi	r17,-1
 8003d94:	91000117 	ldw	r4,4(r18)
 8003d98:	94000217 	ldw	r16,8(r18)
 8003d9c:	213fffc4 	addi	r4,r4,-1
 8003da0:	20000a16 	blt	r4,zero,8003dcc <__sfp+0x78>
 8003da4:	8080030f 	ldh	r2,12(r16)
 8003da8:	10000c26 	beq	r2,zero,8003ddc <__sfp+0x88>
 8003dac:	80c01d04 	addi	r3,r16,116
 8003db0:	00000206 	br	8003dbc <__sfp+0x68>
 8003db4:	18bfe60f 	ldh	r2,-104(r3)
 8003db8:	10000826 	beq	r2,zero,8003ddc <__sfp+0x88>
 8003dbc:	213fffc4 	addi	r4,r4,-1
 8003dc0:	1c3ffd04 	addi	r16,r3,-12
 8003dc4:	18c01a04 	addi	r3,r3,104
 8003dc8:	247ffa1e 	bne	r4,r17,8003db4 <__sfp+0x60>
 8003dcc:	90800017 	ldw	r2,0(r18)
 8003dd0:	10001d26 	beq	r2,zero,8003e48 <__sfp+0xf4>
 8003dd4:	1025883a 	mov	r18,r2
 8003dd8:	003fee06 	br	8003d94 <__sfp+0x40>
 8003ddc:	00bfffc4 	movi	r2,-1
 8003de0:	8080038d 	sth	r2,14(r16)
 8003de4:	00800044 	movi	r2,1
 8003de8:	8080030d 	sth	r2,12(r16)
 8003dec:	80001915 	stw	zero,100(r16)
 8003df0:	80000015 	stw	zero,0(r16)
 8003df4:	80000215 	stw	zero,8(r16)
 8003df8:	80000115 	stw	zero,4(r16)
 8003dfc:	80000415 	stw	zero,16(r16)
 8003e00:	80000515 	stw	zero,20(r16)
 8003e04:	80000615 	stw	zero,24(r16)
 8003e08:	01800204 	movi	r6,8
 8003e0c:	000b883a 	mov	r5,zero
 8003e10:	81001704 	addi	r4,r16,92
 8003e14:	80051080 	call	8005108 <memset>
 8003e18:	8005883a 	mov	r2,r16
 8003e1c:	80000c15 	stw	zero,48(r16)
 8003e20:	80000d15 	stw	zero,52(r16)
 8003e24:	80001115 	stw	zero,68(r16)
 8003e28:	80001215 	stw	zero,72(r16)
 8003e2c:	dfc00417 	ldw	ra,16(sp)
 8003e30:	dcc00317 	ldw	r19,12(sp)
 8003e34:	dc800217 	ldw	r18,8(sp)
 8003e38:	dc400117 	ldw	r17,4(sp)
 8003e3c:	dc000017 	ldw	r16,0(sp)
 8003e40:	dec00504 	addi	sp,sp,20
 8003e44:	f800283a 	ret
 8003e48:	01400104 	movi	r5,4
 8003e4c:	9809883a 	mov	r4,r19
 8003e50:	8003cec0 	call	8003cec <__sfmoreglue>
 8003e54:	90800015 	stw	r2,0(r18)
 8003e58:	103fde1e 	bne	r2,zero,8003dd4 <__sfp+0x80>
 8003e5c:	00800304 	movi	r2,12
 8003e60:	98800015 	stw	r2,0(r19)
 8003e64:	0005883a 	mov	r2,zero
 8003e68:	003ff006 	br	8003e2c <__sfp+0xd8>

08003e6c <_cleanup>:
 8003e6c:	00820074 	movhi	r2,2049
 8003e70:	10ab1604 	addi	r2,r2,-21416
 8003e74:	11000017 	ldw	r4,0(r2)
 8003e78:	01420034 	movhi	r5,2048
 8003e7c:	2956cb04 	addi	r5,r5,23340
 8003e80:	80044541 	jmpi	8004454 <_fwalk_reent>

08003e84 <__sinit>:
 8003e84:	20800e17 	ldw	r2,56(r4)
 8003e88:	10000126 	beq	r2,zero,8003e90 <__sinit+0xc>
 8003e8c:	f800283a 	ret
 8003e90:	8003b481 	jmpi	8003b48 <__sinit.part.1>

08003e94 <__sfp_lock_acquire>:
 8003e94:	f800283a 	ret

08003e98 <__sfp_lock_release>:
 8003e98:	f800283a 	ret

08003e9c <__sinit_lock_acquire>:
 8003e9c:	f800283a 	ret

08003ea0 <__sinit_lock_release>:
 8003ea0:	f800283a 	ret

08003ea4 <__fp_lock_all>:
 8003ea4:	00820074 	movhi	r2,2049
 8003ea8:	10ab1704 	addi	r2,r2,-21412
 8003eac:	11000017 	ldw	r4,0(r2)
 8003eb0:	01420034 	movhi	r5,2048
 8003eb4:	294f3904 	addi	r5,r5,15588
 8003eb8:	80043901 	jmpi	8004390 <_fwalk>

08003ebc <__fp_unlock_all>:
 8003ebc:	00820074 	movhi	r2,2049
 8003ec0:	10ab1704 	addi	r2,r2,-21412
 8003ec4:	11000017 	ldw	r4,0(r2)
 8003ec8:	01420034 	movhi	r5,2048
 8003ecc:	294ecd04 	addi	r5,r5,15156
 8003ed0:	80043901 	jmpi	8004390 <_fwalk>

08003ed4 <__sfvwrite_r>:
 8003ed4:	30800217 	ldw	r2,8(r6)
 8003ed8:	10006726 	beq	r2,zero,8004078 <__sfvwrite_r+0x1a4>
 8003edc:	28c0030b 	ldhu	r3,12(r5)
 8003ee0:	defff404 	addi	sp,sp,-48
 8003ee4:	dd400715 	stw	r21,28(sp)
 8003ee8:	dd000615 	stw	r20,24(sp)
 8003eec:	dc000215 	stw	r16,8(sp)
 8003ef0:	dfc00b15 	stw	ra,44(sp)
 8003ef4:	df000a15 	stw	fp,40(sp)
 8003ef8:	ddc00915 	stw	r23,36(sp)
 8003efc:	dd800815 	stw	r22,32(sp)
 8003f00:	dcc00515 	stw	r19,20(sp)
 8003f04:	dc800415 	stw	r18,16(sp)
 8003f08:	dc400315 	stw	r17,12(sp)
 8003f0c:	1880020c 	andi	r2,r3,8
 8003f10:	2821883a 	mov	r16,r5
 8003f14:	202b883a 	mov	r21,r4
 8003f18:	3029883a 	mov	r20,r6
 8003f1c:	10002726 	beq	r2,zero,8003fbc <__sfvwrite_r+0xe8>
 8003f20:	28800417 	ldw	r2,16(r5)
 8003f24:	10002526 	beq	r2,zero,8003fbc <__sfvwrite_r+0xe8>
 8003f28:	1880008c 	andi	r2,r3,2
 8003f2c:	a4400017 	ldw	r17,0(r20)
 8003f30:	10002a26 	beq	r2,zero,8003fdc <__sfvwrite_r+0x108>
 8003f34:	05a00034 	movhi	r22,32768
 8003f38:	0027883a 	mov	r19,zero
 8003f3c:	0025883a 	mov	r18,zero
 8003f40:	b5bf0004 	addi	r22,r22,-1024
 8003f44:	980d883a 	mov	r6,r19
 8003f48:	a809883a 	mov	r4,r21
 8003f4c:	90004626 	beq	r18,zero,8004068 <__sfvwrite_r+0x194>
 8003f50:	900f883a 	mov	r7,r18
 8003f54:	b480022e 	bgeu	r22,r18,8003f60 <__sfvwrite_r+0x8c>
 8003f58:	01e00034 	movhi	r7,32768
 8003f5c:	39ff0004 	addi	r7,r7,-1024
 8003f60:	80800917 	ldw	r2,36(r16)
 8003f64:	81400717 	ldw	r5,28(r16)
 8003f68:	103ee83a 	callr	r2
 8003f6c:	0080570e 	bge	zero,r2,80040cc <__sfvwrite_r+0x1f8>
 8003f70:	a0c00217 	ldw	r3,8(r20)
 8003f74:	98a7883a 	add	r19,r19,r2
 8003f78:	90a5c83a 	sub	r18,r18,r2
 8003f7c:	1885c83a 	sub	r2,r3,r2
 8003f80:	a0800215 	stw	r2,8(r20)
 8003f84:	103fef1e 	bne	r2,zero,8003f44 <__sfvwrite_r+0x70>
 8003f88:	0005883a 	mov	r2,zero
 8003f8c:	dfc00b17 	ldw	ra,44(sp)
 8003f90:	df000a17 	ldw	fp,40(sp)
 8003f94:	ddc00917 	ldw	r23,36(sp)
 8003f98:	dd800817 	ldw	r22,32(sp)
 8003f9c:	dd400717 	ldw	r21,28(sp)
 8003fa0:	dd000617 	ldw	r20,24(sp)
 8003fa4:	dcc00517 	ldw	r19,20(sp)
 8003fa8:	dc800417 	ldw	r18,16(sp)
 8003fac:	dc400317 	ldw	r17,12(sp)
 8003fb0:	dc000217 	ldw	r16,8(sp)
 8003fb4:	dec00c04 	addi	sp,sp,48
 8003fb8:	f800283a 	ret
 8003fbc:	800b883a 	mov	r5,r16
 8003fc0:	a809883a 	mov	r4,r21
 8003fc4:	80059840 	call	8005984 <__swsetup_r>
 8003fc8:	1000eb1e 	bne	r2,zero,8004378 <__sfvwrite_r+0x4a4>
 8003fcc:	80c0030b 	ldhu	r3,12(r16)
 8003fd0:	a4400017 	ldw	r17,0(r20)
 8003fd4:	1880008c 	andi	r2,r3,2
 8003fd8:	103fd61e 	bne	r2,zero,8003f34 <__sfvwrite_r+0x60>
 8003fdc:	1880004c 	andi	r2,r3,1
 8003fe0:	10003f1e 	bne	r2,zero,80040e0 <__sfvwrite_r+0x20c>
 8003fe4:	0039883a 	mov	fp,zero
 8003fe8:	0025883a 	mov	r18,zero
 8003fec:	90001a26 	beq	r18,zero,8004058 <__sfvwrite_r+0x184>
 8003ff0:	1880800c 	andi	r2,r3,512
 8003ff4:	84c00217 	ldw	r19,8(r16)
 8003ff8:	10002126 	beq	r2,zero,8004080 <__sfvwrite_r+0x1ac>
 8003ffc:	982f883a 	mov	r23,r19
 8004000:	94c09336 	bltu	r18,r19,8004250 <__sfvwrite_r+0x37c>
 8004004:	1881200c 	andi	r2,r3,1152
 8004008:	10009e1e 	bne	r2,zero,8004284 <__sfvwrite_r+0x3b0>
 800400c:	81000017 	ldw	r4,0(r16)
 8004010:	b80d883a 	mov	r6,r23
 8004014:	e00b883a 	mov	r5,fp
 8004018:	8004fac0 	call	8004fac <memmove>
 800401c:	80c00217 	ldw	r3,8(r16)
 8004020:	81000017 	ldw	r4,0(r16)
 8004024:	9005883a 	mov	r2,r18
 8004028:	1ce7c83a 	sub	r19,r3,r19
 800402c:	25cf883a 	add	r7,r4,r23
 8004030:	84c00215 	stw	r19,8(r16)
 8004034:	81c00015 	stw	r7,0(r16)
 8004038:	a0c00217 	ldw	r3,8(r20)
 800403c:	e0b9883a 	add	fp,fp,r2
 8004040:	90a5c83a 	sub	r18,r18,r2
 8004044:	18a7c83a 	sub	r19,r3,r2
 8004048:	a4c00215 	stw	r19,8(r20)
 800404c:	983fce26 	beq	r19,zero,8003f88 <__sfvwrite_r+0xb4>
 8004050:	80c0030b 	ldhu	r3,12(r16)
 8004054:	903fe61e 	bne	r18,zero,8003ff0 <__sfvwrite_r+0x11c>
 8004058:	8f000017 	ldw	fp,0(r17)
 800405c:	8c800117 	ldw	r18,4(r17)
 8004060:	8c400204 	addi	r17,r17,8
 8004064:	003fe106 	br	8003fec <__sfvwrite_r+0x118>
 8004068:	8cc00017 	ldw	r19,0(r17)
 800406c:	8c800117 	ldw	r18,4(r17)
 8004070:	8c400204 	addi	r17,r17,8
 8004074:	003fb306 	br	8003f44 <__sfvwrite_r+0x70>
 8004078:	0005883a 	mov	r2,zero
 800407c:	f800283a 	ret
 8004080:	81000017 	ldw	r4,0(r16)
 8004084:	80800417 	ldw	r2,16(r16)
 8004088:	11005736 	bltu	r2,r4,80041e8 <__sfvwrite_r+0x314>
 800408c:	85c00517 	ldw	r23,20(r16)
 8004090:	95c05536 	bltu	r18,r23,80041e8 <__sfvwrite_r+0x314>
 8004094:	00a00034 	movhi	r2,32768
 8004098:	10bfffc4 	addi	r2,r2,-1
 800409c:	9009883a 	mov	r4,r18
 80040a0:	1480012e 	bgeu	r2,r18,80040a8 <__sfvwrite_r+0x1d4>
 80040a4:	1009883a 	mov	r4,r2
 80040a8:	b80b883a 	mov	r5,r23
 80040ac:	8000bf00 	call	8000bf0 <__divsi3>
 80040b0:	15cf383a 	mul	r7,r2,r23
 80040b4:	81400717 	ldw	r5,28(r16)
 80040b8:	80800917 	ldw	r2,36(r16)
 80040bc:	e00d883a 	mov	r6,fp
 80040c0:	a809883a 	mov	r4,r21
 80040c4:	103ee83a 	callr	r2
 80040c8:	00bfdb16 	blt	zero,r2,8004038 <__sfvwrite_r+0x164>
 80040cc:	8080030b 	ldhu	r2,12(r16)
 80040d0:	10801014 	ori	r2,r2,64
 80040d4:	8080030d 	sth	r2,12(r16)
 80040d8:	00bfffc4 	movi	r2,-1
 80040dc:	003fab06 	br	8003f8c <__sfvwrite_r+0xb8>
 80040e0:	0027883a 	mov	r19,zero
 80040e4:	0011883a 	mov	r8,zero
 80040e8:	0039883a 	mov	fp,zero
 80040ec:	0025883a 	mov	r18,zero
 80040f0:	90001f26 	beq	r18,zero,8004170 <__sfvwrite_r+0x29c>
 80040f4:	40005a26 	beq	r8,zero,8004260 <__sfvwrite_r+0x38c>
 80040f8:	982d883a 	mov	r22,r19
 80040fc:	94c0012e 	bgeu	r18,r19,8004104 <__sfvwrite_r+0x230>
 8004100:	902d883a 	mov	r22,r18
 8004104:	81000017 	ldw	r4,0(r16)
 8004108:	80800417 	ldw	r2,16(r16)
 800410c:	b02f883a 	mov	r23,r22
 8004110:	81c00517 	ldw	r7,20(r16)
 8004114:	1100032e 	bgeu	r2,r4,8004124 <__sfvwrite_r+0x250>
 8004118:	80c00217 	ldw	r3,8(r16)
 800411c:	38c7883a 	add	r3,r7,r3
 8004120:	1d801816 	blt	r3,r22,8004184 <__sfvwrite_r+0x2b0>
 8004124:	b1c03e16 	blt	r22,r7,8004220 <__sfvwrite_r+0x34c>
 8004128:	80800917 	ldw	r2,36(r16)
 800412c:	81400717 	ldw	r5,28(r16)
 8004130:	e00d883a 	mov	r6,fp
 8004134:	da000115 	stw	r8,4(sp)
 8004138:	a809883a 	mov	r4,r21
 800413c:	103ee83a 	callr	r2
 8004140:	102f883a 	mov	r23,r2
 8004144:	da000117 	ldw	r8,4(sp)
 8004148:	00bfe00e 	bge	zero,r2,80040cc <__sfvwrite_r+0x1f8>
 800414c:	9de7c83a 	sub	r19,r19,r23
 8004150:	98001f26 	beq	r19,zero,80041d0 <__sfvwrite_r+0x2fc>
 8004154:	a0800217 	ldw	r2,8(r20)
 8004158:	e5f9883a 	add	fp,fp,r23
 800415c:	95e5c83a 	sub	r18,r18,r23
 8004160:	15efc83a 	sub	r23,r2,r23
 8004164:	a5c00215 	stw	r23,8(r20)
 8004168:	b83f8726 	beq	r23,zero,8003f88 <__sfvwrite_r+0xb4>
 800416c:	903fe11e 	bne	r18,zero,80040f4 <__sfvwrite_r+0x220>
 8004170:	8f000017 	ldw	fp,0(r17)
 8004174:	8c800117 	ldw	r18,4(r17)
 8004178:	0011883a 	mov	r8,zero
 800417c:	8c400204 	addi	r17,r17,8
 8004180:	003fdb06 	br	80040f0 <__sfvwrite_r+0x21c>
 8004184:	180d883a 	mov	r6,r3
 8004188:	e00b883a 	mov	r5,fp
 800418c:	da000115 	stw	r8,4(sp)
 8004190:	d8c00015 	stw	r3,0(sp)
 8004194:	8004fac0 	call	8004fac <memmove>
 8004198:	d8c00017 	ldw	r3,0(sp)
 800419c:	80800017 	ldw	r2,0(r16)
 80041a0:	800b883a 	mov	r5,r16
 80041a4:	a809883a 	mov	r4,r21
 80041a8:	10c5883a 	add	r2,r2,r3
 80041ac:	80800015 	stw	r2,0(r16)
 80041b0:	d8c00015 	stw	r3,0(sp)
 80041b4:	8005e4c0 	call	8005e4c <_fflush_r>
 80041b8:	d8c00017 	ldw	r3,0(sp)
 80041bc:	da000117 	ldw	r8,4(sp)
 80041c0:	103fc21e 	bne	r2,zero,80040cc <__sfvwrite_r+0x1f8>
 80041c4:	182f883a 	mov	r23,r3
 80041c8:	9de7c83a 	sub	r19,r19,r23
 80041cc:	983fe11e 	bne	r19,zero,8004154 <__sfvwrite_r+0x280>
 80041d0:	800b883a 	mov	r5,r16
 80041d4:	a809883a 	mov	r4,r21
 80041d8:	8005e4c0 	call	8005e4c <_fflush_r>
 80041dc:	103fbb1e 	bne	r2,zero,80040cc <__sfvwrite_r+0x1f8>
 80041e0:	0011883a 	mov	r8,zero
 80041e4:	003fdb06 	br	8004154 <__sfvwrite_r+0x280>
 80041e8:	94c0012e 	bgeu	r18,r19,80041f0 <__sfvwrite_r+0x31c>
 80041ec:	9027883a 	mov	r19,r18
 80041f0:	980d883a 	mov	r6,r19
 80041f4:	e00b883a 	mov	r5,fp
 80041f8:	8004fac0 	call	8004fac <memmove>
 80041fc:	80800217 	ldw	r2,8(r16)
 8004200:	80c00017 	ldw	r3,0(r16)
 8004204:	14c5c83a 	sub	r2,r2,r19
 8004208:	1cc7883a 	add	r3,r3,r19
 800420c:	80800215 	stw	r2,8(r16)
 8004210:	80c00015 	stw	r3,0(r16)
 8004214:	10004326 	beq	r2,zero,8004324 <__sfvwrite_r+0x450>
 8004218:	9805883a 	mov	r2,r19
 800421c:	003f8606 	br	8004038 <__sfvwrite_r+0x164>
 8004220:	b00d883a 	mov	r6,r22
 8004224:	e00b883a 	mov	r5,fp
 8004228:	da000115 	stw	r8,4(sp)
 800422c:	8004fac0 	call	8004fac <memmove>
 8004230:	80800217 	ldw	r2,8(r16)
 8004234:	80c00017 	ldw	r3,0(r16)
 8004238:	da000117 	ldw	r8,4(sp)
 800423c:	1585c83a 	sub	r2,r2,r22
 8004240:	1dad883a 	add	r22,r3,r22
 8004244:	80800215 	stw	r2,8(r16)
 8004248:	85800015 	stw	r22,0(r16)
 800424c:	003fbf06 	br	800414c <__sfvwrite_r+0x278>
 8004250:	81000017 	ldw	r4,0(r16)
 8004254:	9027883a 	mov	r19,r18
 8004258:	902f883a 	mov	r23,r18
 800425c:	003f6c06 	br	8004010 <__sfvwrite_r+0x13c>
 8004260:	900d883a 	mov	r6,r18
 8004264:	01400284 	movi	r5,10
 8004268:	e009883a 	mov	r4,fp
 800426c:	8004d800 	call	8004d80 <memchr>
 8004270:	10003e26 	beq	r2,zero,800436c <__sfvwrite_r+0x498>
 8004274:	10800044 	addi	r2,r2,1
 8004278:	1727c83a 	sub	r19,r2,fp
 800427c:	02000044 	movi	r8,1
 8004280:	003f9d06 	br	80040f8 <__sfvwrite_r+0x224>
 8004284:	80800517 	ldw	r2,20(r16)
 8004288:	81400417 	ldw	r5,16(r16)
 800428c:	81c00017 	ldw	r7,0(r16)
 8004290:	10a7883a 	add	r19,r2,r2
 8004294:	9885883a 	add	r2,r19,r2
 8004298:	1026d7fa 	srli	r19,r2,31
 800429c:	396dc83a 	sub	r22,r7,r5
 80042a0:	b1000044 	addi	r4,r22,1
 80042a4:	9885883a 	add	r2,r19,r2
 80042a8:	1027d07a 	srai	r19,r2,1
 80042ac:	2485883a 	add	r2,r4,r18
 80042b0:	980d883a 	mov	r6,r19
 80042b4:	9880022e 	bgeu	r19,r2,80042c0 <__sfvwrite_r+0x3ec>
 80042b8:	1027883a 	mov	r19,r2
 80042bc:	100d883a 	mov	r6,r2
 80042c0:	18c1000c 	andi	r3,r3,1024
 80042c4:	18001c26 	beq	r3,zero,8004338 <__sfvwrite_r+0x464>
 80042c8:	300b883a 	mov	r5,r6
 80042cc:	a809883a 	mov	r4,r21
 80042d0:	80045740 	call	8004574 <_malloc_r>
 80042d4:	102f883a 	mov	r23,r2
 80042d8:	10002926 	beq	r2,zero,8004380 <__sfvwrite_r+0x4ac>
 80042dc:	81400417 	ldw	r5,16(r16)
 80042e0:	b00d883a 	mov	r6,r22
 80042e4:	1009883a 	mov	r4,r2
 80042e8:	8004e640 	call	8004e64 <memcpy>
 80042ec:	8080030b 	ldhu	r2,12(r16)
 80042f0:	00fedfc4 	movi	r3,-1153
 80042f4:	10c4703a 	and	r2,r2,r3
 80042f8:	10802014 	ori	r2,r2,128
 80042fc:	8080030d 	sth	r2,12(r16)
 8004300:	bd89883a 	add	r4,r23,r22
 8004304:	9d8fc83a 	sub	r7,r19,r22
 8004308:	85c00415 	stw	r23,16(r16)
 800430c:	84c00515 	stw	r19,20(r16)
 8004310:	81000015 	stw	r4,0(r16)
 8004314:	9027883a 	mov	r19,r18
 8004318:	81c00215 	stw	r7,8(r16)
 800431c:	902f883a 	mov	r23,r18
 8004320:	003f3b06 	br	8004010 <__sfvwrite_r+0x13c>
 8004324:	800b883a 	mov	r5,r16
 8004328:	a809883a 	mov	r4,r21
 800432c:	8005e4c0 	call	8005e4c <_fflush_r>
 8004330:	103fb926 	beq	r2,zero,8004218 <__sfvwrite_r+0x344>
 8004334:	003f6506 	br	80040cc <__sfvwrite_r+0x1f8>
 8004338:	a809883a 	mov	r4,r21
 800433c:	80052300 	call	8005230 <_realloc_r>
 8004340:	102f883a 	mov	r23,r2
 8004344:	103fee1e 	bne	r2,zero,8004300 <__sfvwrite_r+0x42c>
 8004348:	81400417 	ldw	r5,16(r16)
 800434c:	a809883a 	mov	r4,r21
 8004350:	8005ffc0 	call	8005ffc <_free_r>
 8004354:	8080030b 	ldhu	r2,12(r16)
 8004358:	00ffdfc4 	movi	r3,-129
 800435c:	1884703a 	and	r2,r3,r2
 8004360:	00c00304 	movi	r3,12
 8004364:	a8c00015 	stw	r3,0(r21)
 8004368:	003f5906 	br	80040d0 <__sfvwrite_r+0x1fc>
 800436c:	94c00044 	addi	r19,r18,1
 8004370:	02000044 	movi	r8,1
 8004374:	003f6006 	br	80040f8 <__sfvwrite_r+0x224>
 8004378:	00bfffc4 	movi	r2,-1
 800437c:	003f0306 	br	8003f8c <__sfvwrite_r+0xb8>
 8004380:	00800304 	movi	r2,12
 8004384:	a8800015 	stw	r2,0(r21)
 8004388:	8080030b 	ldhu	r2,12(r16)
 800438c:	003f5006 	br	80040d0 <__sfvwrite_r+0x1fc>

08004390 <_fwalk>:
 8004390:	defff704 	addi	sp,sp,-36
 8004394:	dd000415 	stw	r20,16(sp)
 8004398:	dfc00815 	stw	ra,32(sp)
 800439c:	ddc00715 	stw	r23,28(sp)
 80043a0:	dd800615 	stw	r22,24(sp)
 80043a4:	dd400515 	stw	r21,20(sp)
 80043a8:	dcc00315 	stw	r19,12(sp)
 80043ac:	dc800215 	stw	r18,8(sp)
 80043b0:	dc400115 	stw	r17,4(sp)
 80043b4:	dc000015 	stw	r16,0(sp)
 80043b8:	2500b804 	addi	r20,r4,736
 80043bc:	a0002326 	beq	r20,zero,800444c <_fwalk+0xbc>
 80043c0:	282b883a 	mov	r21,r5
 80043c4:	002f883a 	mov	r23,zero
 80043c8:	05800044 	movi	r22,1
 80043cc:	04ffffc4 	movi	r19,-1
 80043d0:	a4400117 	ldw	r17,4(r20)
 80043d4:	a4800217 	ldw	r18,8(r20)
 80043d8:	8c7fffc4 	addi	r17,r17,-1
 80043dc:	88000d16 	blt	r17,zero,8004414 <_fwalk+0x84>
 80043e0:	94000304 	addi	r16,r18,12
 80043e4:	94800384 	addi	r18,r18,14
 80043e8:	8080000b 	ldhu	r2,0(r16)
 80043ec:	8c7fffc4 	addi	r17,r17,-1
 80043f0:	813ffd04 	addi	r4,r16,-12
 80043f4:	b080042e 	bgeu	r22,r2,8004408 <_fwalk+0x78>
 80043f8:	9080000f 	ldh	r2,0(r18)
 80043fc:	14c00226 	beq	r2,r19,8004408 <_fwalk+0x78>
 8004400:	a83ee83a 	callr	r21
 8004404:	b8aeb03a 	or	r23,r23,r2
 8004408:	84001a04 	addi	r16,r16,104
 800440c:	94801a04 	addi	r18,r18,104
 8004410:	8cfff51e 	bne	r17,r19,80043e8 <_fwalk+0x58>
 8004414:	a5000017 	ldw	r20,0(r20)
 8004418:	a03fed1e 	bne	r20,zero,80043d0 <_fwalk+0x40>
 800441c:	b805883a 	mov	r2,r23
 8004420:	dfc00817 	ldw	ra,32(sp)
 8004424:	ddc00717 	ldw	r23,28(sp)
 8004428:	dd800617 	ldw	r22,24(sp)
 800442c:	dd400517 	ldw	r21,20(sp)
 8004430:	dd000417 	ldw	r20,16(sp)
 8004434:	dcc00317 	ldw	r19,12(sp)
 8004438:	dc800217 	ldw	r18,8(sp)
 800443c:	dc400117 	ldw	r17,4(sp)
 8004440:	dc000017 	ldw	r16,0(sp)
 8004444:	dec00904 	addi	sp,sp,36
 8004448:	f800283a 	ret
 800444c:	002f883a 	mov	r23,zero
 8004450:	003ff206 	br	800441c <_fwalk+0x8c>

08004454 <_fwalk_reent>:
 8004454:	defff704 	addi	sp,sp,-36
 8004458:	dd000415 	stw	r20,16(sp)
 800445c:	dfc00815 	stw	ra,32(sp)
 8004460:	ddc00715 	stw	r23,28(sp)
 8004464:	dd800615 	stw	r22,24(sp)
 8004468:	dd400515 	stw	r21,20(sp)
 800446c:	dcc00315 	stw	r19,12(sp)
 8004470:	dc800215 	stw	r18,8(sp)
 8004474:	dc400115 	stw	r17,4(sp)
 8004478:	dc000015 	stw	r16,0(sp)
 800447c:	2500b804 	addi	r20,r4,736
 8004480:	a0002326 	beq	r20,zero,8004510 <_fwalk_reent+0xbc>
 8004484:	282b883a 	mov	r21,r5
 8004488:	2027883a 	mov	r19,r4
 800448c:	002f883a 	mov	r23,zero
 8004490:	05800044 	movi	r22,1
 8004494:	04bfffc4 	movi	r18,-1
 8004498:	a4400117 	ldw	r17,4(r20)
 800449c:	a4000217 	ldw	r16,8(r20)
 80044a0:	8c7fffc4 	addi	r17,r17,-1
 80044a4:	88000c16 	blt	r17,zero,80044d8 <_fwalk_reent+0x84>
 80044a8:	84000304 	addi	r16,r16,12
 80044ac:	8080000b 	ldhu	r2,0(r16)
 80044b0:	8c7fffc4 	addi	r17,r17,-1
 80044b4:	817ffd04 	addi	r5,r16,-12
 80044b8:	b080052e 	bgeu	r22,r2,80044d0 <_fwalk_reent+0x7c>
 80044bc:	8080008f 	ldh	r2,2(r16)
 80044c0:	9809883a 	mov	r4,r19
 80044c4:	14800226 	beq	r2,r18,80044d0 <_fwalk_reent+0x7c>
 80044c8:	a83ee83a 	callr	r21
 80044cc:	b8aeb03a 	or	r23,r23,r2
 80044d0:	84001a04 	addi	r16,r16,104
 80044d4:	8cbff51e 	bne	r17,r18,80044ac <_fwalk_reent+0x58>
 80044d8:	a5000017 	ldw	r20,0(r20)
 80044dc:	a03fee1e 	bne	r20,zero,8004498 <_fwalk_reent+0x44>
 80044e0:	b805883a 	mov	r2,r23
 80044e4:	dfc00817 	ldw	ra,32(sp)
 80044e8:	ddc00717 	ldw	r23,28(sp)
 80044ec:	dd800617 	ldw	r22,24(sp)
 80044f0:	dd400517 	ldw	r21,20(sp)
 80044f4:	dd000417 	ldw	r20,16(sp)
 80044f8:	dcc00317 	ldw	r19,12(sp)
 80044fc:	dc800217 	ldw	r18,8(sp)
 8004500:	dc400117 	ldw	r17,4(sp)
 8004504:	dc000017 	ldw	r16,0(sp)
 8004508:	dec00904 	addi	sp,sp,36
 800450c:	f800283a 	ret
 8004510:	002f883a 	mov	r23,zero
 8004514:	003ff206 	br	80044e0 <_fwalk_reent+0x8c>

08004518 <_gettimeofday_r>:
 8004518:	defffd04 	addi	sp,sp,-12
 800451c:	2805883a 	mov	r2,r5
 8004520:	dc000015 	stw	r16,0(sp)
 8004524:	04020074 	movhi	r16,2049
 8004528:	dc400115 	stw	r17,4(sp)
 800452c:	8431c104 	addi	r16,r16,-14588
 8004530:	2023883a 	mov	r17,r4
 8004534:	300b883a 	mov	r5,r6
 8004538:	1009883a 	mov	r4,r2
 800453c:	dfc00215 	stw	ra,8(sp)
 8004540:	80000015 	stw	zero,0(r16)
 8004544:	80068bc0 	call	80068bc <gettimeofday>
 8004548:	00ffffc4 	movi	r3,-1
 800454c:	10c00526 	beq	r2,r3,8004564 <_gettimeofday_r+0x4c>
 8004550:	dfc00217 	ldw	ra,8(sp)
 8004554:	dc400117 	ldw	r17,4(sp)
 8004558:	dc000017 	ldw	r16,0(sp)
 800455c:	dec00304 	addi	sp,sp,12
 8004560:	f800283a 	ret
 8004564:	80c00017 	ldw	r3,0(r16)
 8004568:	183ff926 	beq	r3,zero,8004550 <_gettimeofday_r+0x38>
 800456c:	88c00015 	stw	r3,0(r17)
 8004570:	003ff706 	br	8004550 <_gettimeofday_r+0x38>

08004574 <_malloc_r>:
 8004574:	defff504 	addi	sp,sp,-44
 8004578:	dc800315 	stw	r18,12(sp)
 800457c:	dfc00a15 	stw	ra,40(sp)
 8004580:	df000915 	stw	fp,36(sp)
 8004584:	ddc00815 	stw	r23,32(sp)
 8004588:	dd800715 	stw	r22,28(sp)
 800458c:	dd400615 	stw	r21,24(sp)
 8004590:	dd000515 	stw	r20,20(sp)
 8004594:	dcc00415 	stw	r19,16(sp)
 8004598:	dc400215 	stw	r17,8(sp)
 800459c:	dc000115 	stw	r16,4(sp)
 80045a0:	288002c4 	addi	r2,r5,11
 80045a4:	00c00584 	movi	r3,22
 80045a8:	2025883a 	mov	r18,r4
 80045ac:	18807f2e 	bgeu	r3,r2,80047ac <_malloc_r+0x238>
 80045b0:	047ffe04 	movi	r17,-8
 80045b4:	1462703a 	and	r17,r2,r17
 80045b8:	8800a316 	blt	r17,zero,8004848 <_malloc_r+0x2d4>
 80045bc:	8940a236 	bltu	r17,r5,8004848 <_malloc_r+0x2d4>
 80045c0:	8006e080 	call	8006e08 <__malloc_lock>
 80045c4:	00807dc4 	movi	r2,503
 80045c8:	1441e92e 	bgeu	r2,r17,8004d70 <_malloc_r+0x7fc>
 80045cc:	8804d27a 	srli	r2,r17,9
 80045d0:	1000a126 	beq	r2,zero,8004858 <_malloc_r+0x2e4>
 80045d4:	00c00104 	movi	r3,4
 80045d8:	18811e36 	bltu	r3,r2,8004a54 <_malloc_r+0x4e0>
 80045dc:	8804d1ba 	srli	r2,r17,6
 80045e0:	12000e44 	addi	r8,r2,57
 80045e4:	11c00e04 	addi	r7,r2,56
 80045e8:	4209883a 	add	r4,r8,r8
 80045ec:	04c20074 	movhi	r19,2049
 80045f0:	2109883a 	add	r4,r4,r4
 80045f4:	9ce59004 	addi	r19,r19,-27072
 80045f8:	2109883a 	add	r4,r4,r4
 80045fc:	9909883a 	add	r4,r19,r4
 8004600:	24000117 	ldw	r16,4(r4)
 8004604:	213ffe04 	addi	r4,r4,-8
 8004608:	24009726 	beq	r4,r16,8004868 <_malloc_r+0x2f4>
 800460c:	80800117 	ldw	r2,4(r16)
 8004610:	01bfff04 	movi	r6,-4
 8004614:	014003c4 	movi	r5,15
 8004618:	1184703a 	and	r2,r2,r6
 800461c:	1447c83a 	sub	r3,r2,r17
 8004620:	28c00716 	blt	r5,r3,8004640 <_malloc_r+0xcc>
 8004624:	1800920e 	bge	r3,zero,8004870 <_malloc_r+0x2fc>
 8004628:	84000317 	ldw	r16,12(r16)
 800462c:	24008e26 	beq	r4,r16,8004868 <_malloc_r+0x2f4>
 8004630:	80800117 	ldw	r2,4(r16)
 8004634:	1184703a 	and	r2,r2,r6
 8004638:	1447c83a 	sub	r3,r2,r17
 800463c:	28fff90e 	bge	r5,r3,8004624 <_malloc_r+0xb0>
 8004640:	3809883a 	mov	r4,r7
 8004644:	01820074 	movhi	r6,2049
 8004648:	9c000417 	ldw	r16,16(r19)
 800464c:	31a59004 	addi	r6,r6,-27072
 8004650:	32000204 	addi	r8,r6,8
 8004654:	82013426 	beq	r16,r8,8004b28 <_malloc_r+0x5b4>
 8004658:	80c00117 	ldw	r3,4(r16)
 800465c:	00bfff04 	movi	r2,-4
 8004660:	188e703a 	and	r7,r3,r2
 8004664:	3c45c83a 	sub	r2,r7,r17
 8004668:	00c003c4 	movi	r3,15
 800466c:	18811f16 	blt	r3,r2,8004aec <_malloc_r+0x578>
 8004670:	32000515 	stw	r8,20(r6)
 8004674:	32000415 	stw	r8,16(r6)
 8004678:	10007f0e 	bge	r2,zero,8004878 <_malloc_r+0x304>
 800467c:	00807fc4 	movi	r2,511
 8004680:	11c0fd36 	bltu	r2,r7,8004a78 <_malloc_r+0x504>
 8004684:	3806d0fa 	srli	r3,r7,3
 8004688:	01c00044 	movi	r7,1
 800468c:	30800117 	ldw	r2,4(r6)
 8004690:	19400044 	addi	r5,r3,1
 8004694:	294b883a 	add	r5,r5,r5
 8004698:	1807d0ba 	srai	r3,r3,2
 800469c:	294b883a 	add	r5,r5,r5
 80046a0:	294b883a 	add	r5,r5,r5
 80046a4:	298b883a 	add	r5,r5,r6
 80046a8:	38c6983a 	sll	r3,r7,r3
 80046ac:	29c00017 	ldw	r7,0(r5)
 80046b0:	2a7ffe04 	addi	r9,r5,-8
 80046b4:	1886b03a 	or	r3,r3,r2
 80046b8:	82400315 	stw	r9,12(r16)
 80046bc:	81c00215 	stw	r7,8(r16)
 80046c0:	30c00115 	stw	r3,4(r6)
 80046c4:	2c000015 	stw	r16,0(r5)
 80046c8:	3c000315 	stw	r16,12(r7)
 80046cc:	2005d0ba 	srai	r2,r4,2
 80046d0:	01400044 	movi	r5,1
 80046d4:	288a983a 	sll	r5,r5,r2
 80046d8:	19406f36 	bltu	r3,r5,8004898 <_malloc_r+0x324>
 80046dc:	28c4703a 	and	r2,r5,r3
 80046e0:	10000a1e 	bne	r2,zero,800470c <_malloc_r+0x198>
 80046e4:	00bfff04 	movi	r2,-4
 80046e8:	294b883a 	add	r5,r5,r5
 80046ec:	2088703a 	and	r4,r4,r2
 80046f0:	28c4703a 	and	r2,r5,r3
 80046f4:	21000104 	addi	r4,r4,4
 80046f8:	1000041e 	bne	r2,zero,800470c <_malloc_r+0x198>
 80046fc:	294b883a 	add	r5,r5,r5
 8004700:	28c4703a 	and	r2,r5,r3
 8004704:	21000104 	addi	r4,r4,4
 8004708:	103ffc26 	beq	r2,zero,80046fc <_malloc_r+0x188>
 800470c:	02bfff04 	movi	r10,-4
 8004710:	024003c4 	movi	r9,15
 8004714:	21800044 	addi	r6,r4,1
 8004718:	318d883a 	add	r6,r6,r6
 800471c:	318d883a 	add	r6,r6,r6
 8004720:	318d883a 	add	r6,r6,r6
 8004724:	998d883a 	add	r6,r19,r6
 8004728:	333ffe04 	addi	r12,r6,-8
 800472c:	2017883a 	mov	r11,r4
 8004730:	31800104 	addi	r6,r6,4
 8004734:	34000017 	ldw	r16,0(r6)
 8004738:	31fffd04 	addi	r7,r6,-12
 800473c:	81c0041e 	bne	r16,r7,8004750 <_malloc_r+0x1dc>
 8004740:	0000fb06 	br	8004b30 <_malloc_r+0x5bc>
 8004744:	1801030e 	bge	r3,zero,8004b54 <_malloc_r+0x5e0>
 8004748:	84000317 	ldw	r16,12(r16)
 800474c:	81c0f826 	beq	r16,r7,8004b30 <_malloc_r+0x5bc>
 8004750:	80800117 	ldw	r2,4(r16)
 8004754:	1284703a 	and	r2,r2,r10
 8004758:	1447c83a 	sub	r3,r2,r17
 800475c:	48fff90e 	bge	r9,r3,8004744 <_malloc_r+0x1d0>
 8004760:	80800317 	ldw	r2,12(r16)
 8004764:	81000217 	ldw	r4,8(r16)
 8004768:	89400054 	ori	r5,r17,1
 800476c:	81400115 	stw	r5,4(r16)
 8004770:	20800315 	stw	r2,12(r4)
 8004774:	11000215 	stw	r4,8(r2)
 8004778:	8463883a 	add	r17,r16,r17
 800477c:	9c400515 	stw	r17,20(r19)
 8004780:	9c400415 	stw	r17,16(r19)
 8004784:	18800054 	ori	r2,r3,1
 8004788:	88800115 	stw	r2,4(r17)
 800478c:	8a000315 	stw	r8,12(r17)
 8004790:	8a000215 	stw	r8,8(r17)
 8004794:	88e3883a 	add	r17,r17,r3
 8004798:	88c00015 	stw	r3,0(r17)
 800479c:	9009883a 	mov	r4,r18
 80047a0:	8006e2c0 	call	8006e2c <__malloc_unlock>
 80047a4:	80800204 	addi	r2,r16,8
 80047a8:	00001b06 	br	8004818 <_malloc_r+0x2a4>
 80047ac:	04400404 	movi	r17,16
 80047b0:	89402536 	bltu	r17,r5,8004848 <_malloc_r+0x2d4>
 80047b4:	8006e080 	call	8006e08 <__malloc_lock>
 80047b8:	00800184 	movi	r2,6
 80047bc:	01000084 	movi	r4,2
 80047c0:	04c20074 	movhi	r19,2049
 80047c4:	1085883a 	add	r2,r2,r2
 80047c8:	9ce59004 	addi	r19,r19,-27072
 80047cc:	1085883a 	add	r2,r2,r2
 80047d0:	9885883a 	add	r2,r19,r2
 80047d4:	14000117 	ldw	r16,4(r2)
 80047d8:	10fffe04 	addi	r3,r2,-8
 80047dc:	80c0d926 	beq	r16,r3,8004b44 <_malloc_r+0x5d0>
 80047e0:	80c00117 	ldw	r3,4(r16)
 80047e4:	81000317 	ldw	r4,12(r16)
 80047e8:	00bfff04 	movi	r2,-4
 80047ec:	1884703a 	and	r2,r3,r2
 80047f0:	81400217 	ldw	r5,8(r16)
 80047f4:	8085883a 	add	r2,r16,r2
 80047f8:	10c00117 	ldw	r3,4(r2)
 80047fc:	29000315 	stw	r4,12(r5)
 8004800:	21400215 	stw	r5,8(r4)
 8004804:	18c00054 	ori	r3,r3,1
 8004808:	10c00115 	stw	r3,4(r2)
 800480c:	9009883a 	mov	r4,r18
 8004810:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004814:	80800204 	addi	r2,r16,8
 8004818:	dfc00a17 	ldw	ra,40(sp)
 800481c:	df000917 	ldw	fp,36(sp)
 8004820:	ddc00817 	ldw	r23,32(sp)
 8004824:	dd800717 	ldw	r22,28(sp)
 8004828:	dd400617 	ldw	r21,24(sp)
 800482c:	dd000517 	ldw	r20,20(sp)
 8004830:	dcc00417 	ldw	r19,16(sp)
 8004834:	dc800317 	ldw	r18,12(sp)
 8004838:	dc400217 	ldw	r17,8(sp)
 800483c:	dc000117 	ldw	r16,4(sp)
 8004840:	dec00b04 	addi	sp,sp,44
 8004844:	f800283a 	ret
 8004848:	00800304 	movi	r2,12
 800484c:	90800015 	stw	r2,0(r18)
 8004850:	0005883a 	mov	r2,zero
 8004854:	003ff006 	br	8004818 <_malloc_r+0x2a4>
 8004858:	01002004 	movi	r4,128
 800485c:	02001004 	movi	r8,64
 8004860:	01c00fc4 	movi	r7,63
 8004864:	003f6106 	br	80045ec <_malloc_r+0x78>
 8004868:	4009883a 	mov	r4,r8
 800486c:	003f7506 	br	8004644 <_malloc_r+0xd0>
 8004870:	81000317 	ldw	r4,12(r16)
 8004874:	003fde06 	br	80047f0 <_malloc_r+0x27c>
 8004878:	81c5883a 	add	r2,r16,r7
 800487c:	11400117 	ldw	r5,4(r2)
 8004880:	9009883a 	mov	r4,r18
 8004884:	29400054 	ori	r5,r5,1
 8004888:	11400115 	stw	r5,4(r2)
 800488c:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004890:	80800204 	addi	r2,r16,8
 8004894:	003fe006 	br	8004818 <_malloc_r+0x2a4>
 8004898:	9c000217 	ldw	r16,8(r19)
 800489c:	00bfff04 	movi	r2,-4
 80048a0:	85800117 	ldw	r22,4(r16)
 80048a4:	b0ac703a 	and	r22,r22,r2
 80048a8:	b4400336 	bltu	r22,r17,80048b8 <_malloc_r+0x344>
 80048ac:	b445c83a 	sub	r2,r22,r17
 80048b0:	00c003c4 	movi	r3,15
 80048b4:	18805d16 	blt	r3,r2,8004a2c <_malloc_r+0x4b8>
 80048b8:	05c20074 	movhi	r23,2049
 80048bc:	00820074 	movhi	r2,2049
 80048c0:	10b1c404 	addi	r2,r2,-14576
 80048c4:	bdeb1804 	addi	r23,r23,-21408
 80048c8:	15400017 	ldw	r21,0(r2)
 80048cc:	b8c00017 	ldw	r3,0(r23)
 80048d0:	00bfffc4 	movi	r2,-1
 80048d4:	858d883a 	add	r6,r16,r22
 80048d8:	8d6b883a 	add	r21,r17,r21
 80048dc:	1880ea26 	beq	r3,r2,8004c88 <_malloc_r+0x714>
 80048e0:	ad4403c4 	addi	r21,r21,4111
 80048e4:	00bc0004 	movi	r2,-4096
 80048e8:	a8aa703a 	and	r21,r21,r2
 80048ec:	a80b883a 	mov	r5,r21
 80048f0:	9009883a 	mov	r4,r18
 80048f4:	d9800015 	stw	r6,0(sp)
 80048f8:	80057940 	call	8005794 <_sbrk_r>
 80048fc:	1029883a 	mov	r20,r2
 8004900:	00bfffc4 	movi	r2,-1
 8004904:	d9800017 	ldw	r6,0(sp)
 8004908:	a080e826 	beq	r20,r2,8004cac <_malloc_r+0x738>
 800490c:	a180a636 	bltu	r20,r6,8004ba8 <_malloc_r+0x634>
 8004910:	07020074 	movhi	fp,2049
 8004914:	e731d004 	addi	fp,fp,-14528
 8004918:	e0800017 	ldw	r2,0(fp)
 800491c:	a887883a 	add	r3,r21,r2
 8004920:	e0c00015 	stw	r3,0(fp)
 8004924:	3500e626 	beq	r6,r20,8004cc0 <_malloc_r+0x74c>
 8004928:	b9000017 	ldw	r4,0(r23)
 800492c:	00bfffc4 	movi	r2,-1
 8004930:	2080ee26 	beq	r4,r2,8004cec <_malloc_r+0x778>
 8004934:	a185c83a 	sub	r2,r20,r6
 8004938:	10c5883a 	add	r2,r2,r3
 800493c:	e0800015 	stw	r2,0(fp)
 8004940:	a0c001cc 	andi	r3,r20,7
 8004944:	1800bc26 	beq	r3,zero,8004c38 <_malloc_r+0x6c4>
 8004948:	a0e9c83a 	sub	r20,r20,r3
 800494c:	00840204 	movi	r2,4104
 8004950:	a5000204 	addi	r20,r20,8
 8004954:	10c7c83a 	sub	r3,r2,r3
 8004958:	a545883a 	add	r2,r20,r21
 800495c:	1083ffcc 	andi	r2,r2,4095
 8004960:	18abc83a 	sub	r21,r3,r2
 8004964:	a80b883a 	mov	r5,r21
 8004968:	9009883a 	mov	r4,r18
 800496c:	80057940 	call	8005794 <_sbrk_r>
 8004970:	00ffffc4 	movi	r3,-1
 8004974:	10c0e126 	beq	r2,r3,8004cfc <_malloc_r+0x788>
 8004978:	1505c83a 	sub	r2,r2,r20
 800497c:	1545883a 	add	r2,r2,r21
 8004980:	10800054 	ori	r2,r2,1
 8004984:	e0c00017 	ldw	r3,0(fp)
 8004988:	9d000215 	stw	r20,8(r19)
 800498c:	a0800115 	stw	r2,4(r20)
 8004990:	a8c7883a 	add	r3,r21,r3
 8004994:	e0c00015 	stw	r3,0(fp)
 8004998:	84c00e26 	beq	r16,r19,80049d4 <_malloc_r+0x460>
 800499c:	018003c4 	movi	r6,15
 80049a0:	3580a72e 	bgeu	r6,r22,8004c40 <_malloc_r+0x6cc>
 80049a4:	81400117 	ldw	r5,4(r16)
 80049a8:	013ffe04 	movi	r4,-8
 80049ac:	b0bffd04 	addi	r2,r22,-12
 80049b0:	1104703a 	and	r2,r2,r4
 80049b4:	2900004c 	andi	r4,r5,1
 80049b8:	2088b03a 	or	r4,r4,r2
 80049bc:	81000115 	stw	r4,4(r16)
 80049c0:	01400144 	movi	r5,5
 80049c4:	8089883a 	add	r4,r16,r2
 80049c8:	21400115 	stw	r5,4(r4)
 80049cc:	21400215 	stw	r5,8(r4)
 80049d0:	3080cd36 	bltu	r6,r2,8004d08 <_malloc_r+0x794>
 80049d4:	00820074 	movhi	r2,2049
 80049d8:	10b1c304 	addi	r2,r2,-14580
 80049dc:	11000017 	ldw	r4,0(r2)
 80049e0:	20c0012e 	bgeu	r4,r3,80049e8 <_malloc_r+0x474>
 80049e4:	10c00015 	stw	r3,0(r2)
 80049e8:	00820074 	movhi	r2,2049
 80049ec:	10b1c204 	addi	r2,r2,-14584
 80049f0:	11000017 	ldw	r4,0(r2)
 80049f4:	9c000217 	ldw	r16,8(r19)
 80049f8:	20c0012e 	bgeu	r4,r3,8004a00 <_malloc_r+0x48c>
 80049fc:	10c00015 	stw	r3,0(r2)
 8004a00:	80c00117 	ldw	r3,4(r16)
 8004a04:	00bfff04 	movi	r2,-4
 8004a08:	1886703a 	and	r3,r3,r2
 8004a0c:	1c45c83a 	sub	r2,r3,r17
 8004a10:	1c400236 	bltu	r3,r17,8004a1c <_malloc_r+0x4a8>
 8004a14:	00c003c4 	movi	r3,15
 8004a18:	18800416 	blt	r3,r2,8004a2c <_malloc_r+0x4b8>
 8004a1c:	9009883a 	mov	r4,r18
 8004a20:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004a24:	0005883a 	mov	r2,zero
 8004a28:	003f7b06 	br	8004818 <_malloc_r+0x2a4>
 8004a2c:	88c00054 	ori	r3,r17,1
 8004a30:	80c00115 	stw	r3,4(r16)
 8004a34:	8463883a 	add	r17,r16,r17
 8004a38:	10800054 	ori	r2,r2,1
 8004a3c:	9c400215 	stw	r17,8(r19)
 8004a40:	88800115 	stw	r2,4(r17)
 8004a44:	9009883a 	mov	r4,r18
 8004a48:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004a4c:	80800204 	addi	r2,r16,8
 8004a50:	003f7106 	br	8004818 <_malloc_r+0x2a4>
 8004a54:	00c00504 	movi	r3,20
 8004a58:	18804a2e 	bgeu	r3,r2,8004b84 <_malloc_r+0x610>
 8004a5c:	00c01504 	movi	r3,84
 8004a60:	18806e36 	bltu	r3,r2,8004c1c <_malloc_r+0x6a8>
 8004a64:	8804d33a 	srli	r2,r17,12
 8004a68:	12001bc4 	addi	r8,r2,111
 8004a6c:	11c01b84 	addi	r7,r2,110
 8004a70:	4209883a 	add	r4,r8,r8
 8004a74:	003edd06 	br	80045ec <_malloc_r+0x78>
 8004a78:	3804d27a 	srli	r2,r7,9
 8004a7c:	00c00104 	movi	r3,4
 8004a80:	1880442e 	bgeu	r3,r2,8004b94 <_malloc_r+0x620>
 8004a84:	00c00504 	movi	r3,20
 8004a88:	18808136 	bltu	r3,r2,8004c90 <_malloc_r+0x71c>
 8004a8c:	11401704 	addi	r5,r2,92
 8004a90:	10c016c4 	addi	r3,r2,91
 8004a94:	294b883a 	add	r5,r5,r5
 8004a98:	294b883a 	add	r5,r5,r5
 8004a9c:	294b883a 	add	r5,r5,r5
 8004aa0:	994b883a 	add	r5,r19,r5
 8004aa4:	28800017 	ldw	r2,0(r5)
 8004aa8:	01820074 	movhi	r6,2049
 8004aac:	297ffe04 	addi	r5,r5,-8
 8004ab0:	31a59004 	addi	r6,r6,-27072
 8004ab4:	28806526 	beq	r5,r2,8004c4c <_malloc_r+0x6d8>
 8004ab8:	01bfff04 	movi	r6,-4
 8004abc:	10c00117 	ldw	r3,4(r2)
 8004ac0:	1986703a 	and	r3,r3,r6
 8004ac4:	38c0022e 	bgeu	r7,r3,8004ad0 <_malloc_r+0x55c>
 8004ac8:	10800217 	ldw	r2,8(r2)
 8004acc:	28bffb1e 	bne	r5,r2,8004abc <_malloc_r+0x548>
 8004ad0:	11400317 	ldw	r5,12(r2)
 8004ad4:	98c00117 	ldw	r3,4(r19)
 8004ad8:	81400315 	stw	r5,12(r16)
 8004adc:	80800215 	stw	r2,8(r16)
 8004ae0:	2c000215 	stw	r16,8(r5)
 8004ae4:	14000315 	stw	r16,12(r2)
 8004ae8:	003ef806 	br	80046cc <_malloc_r+0x158>
 8004aec:	88c00054 	ori	r3,r17,1
 8004af0:	80c00115 	stw	r3,4(r16)
 8004af4:	8463883a 	add	r17,r16,r17
 8004af8:	34400515 	stw	r17,20(r6)
 8004afc:	34400415 	stw	r17,16(r6)
 8004b00:	10c00054 	ori	r3,r2,1
 8004b04:	8a000315 	stw	r8,12(r17)
 8004b08:	8a000215 	stw	r8,8(r17)
 8004b0c:	88c00115 	stw	r3,4(r17)
 8004b10:	88a3883a 	add	r17,r17,r2
 8004b14:	88800015 	stw	r2,0(r17)
 8004b18:	9009883a 	mov	r4,r18
 8004b1c:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004b20:	80800204 	addi	r2,r16,8
 8004b24:	003f3c06 	br	8004818 <_malloc_r+0x2a4>
 8004b28:	30c00117 	ldw	r3,4(r6)
 8004b2c:	003ee706 	br	80046cc <_malloc_r+0x158>
 8004b30:	5ac00044 	addi	r11,r11,1
 8004b34:	588000cc 	andi	r2,r11,3
 8004b38:	31800204 	addi	r6,r6,8
 8004b3c:	103efd1e 	bne	r2,zero,8004734 <_malloc_r+0x1c0>
 8004b40:	00002406 	br	8004bd4 <_malloc_r+0x660>
 8004b44:	14000317 	ldw	r16,12(r2)
 8004b48:	143f251e 	bne	r2,r16,80047e0 <_malloc_r+0x26c>
 8004b4c:	21000084 	addi	r4,r4,2
 8004b50:	003ebc06 	br	8004644 <_malloc_r+0xd0>
 8004b54:	8085883a 	add	r2,r16,r2
 8004b58:	10c00117 	ldw	r3,4(r2)
 8004b5c:	81000317 	ldw	r4,12(r16)
 8004b60:	81400217 	ldw	r5,8(r16)
 8004b64:	18c00054 	ori	r3,r3,1
 8004b68:	10c00115 	stw	r3,4(r2)
 8004b6c:	29000315 	stw	r4,12(r5)
 8004b70:	21400215 	stw	r5,8(r4)
 8004b74:	9009883a 	mov	r4,r18
 8004b78:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8004b7c:	80800204 	addi	r2,r16,8
 8004b80:	003f2506 	br	8004818 <_malloc_r+0x2a4>
 8004b84:	12001704 	addi	r8,r2,92
 8004b88:	11c016c4 	addi	r7,r2,91
 8004b8c:	4209883a 	add	r4,r8,r8
 8004b90:	003e9606 	br	80045ec <_malloc_r+0x78>
 8004b94:	3804d1ba 	srli	r2,r7,6
 8004b98:	11400e44 	addi	r5,r2,57
 8004b9c:	10c00e04 	addi	r3,r2,56
 8004ba0:	294b883a 	add	r5,r5,r5
 8004ba4:	003fbc06 	br	8004a98 <_malloc_r+0x524>
 8004ba8:	84ff5926 	beq	r16,r19,8004910 <_malloc_r+0x39c>
 8004bac:	00820074 	movhi	r2,2049
 8004bb0:	10a59004 	addi	r2,r2,-27072
 8004bb4:	14000217 	ldw	r16,8(r2)
 8004bb8:	00bfff04 	movi	r2,-4
 8004bbc:	80c00117 	ldw	r3,4(r16)
 8004bc0:	1886703a 	and	r3,r3,r2
 8004bc4:	003f9106 	br	8004a0c <_malloc_r+0x498>
 8004bc8:	60800217 	ldw	r2,8(r12)
 8004bcc:	213fffc4 	addi	r4,r4,-1
 8004bd0:	1300651e 	bne	r2,r12,8004d68 <_malloc_r+0x7f4>
 8004bd4:	208000cc 	andi	r2,r4,3
 8004bd8:	633ffe04 	addi	r12,r12,-8
 8004bdc:	103ffa1e 	bne	r2,zero,8004bc8 <_malloc_r+0x654>
 8004be0:	98800117 	ldw	r2,4(r19)
 8004be4:	0146303a 	nor	r3,zero,r5
 8004be8:	1884703a 	and	r2,r3,r2
 8004bec:	98800115 	stw	r2,4(r19)
 8004bf0:	294b883a 	add	r5,r5,r5
 8004bf4:	117f2836 	bltu	r2,r5,8004898 <_malloc_r+0x324>
 8004bf8:	283f2726 	beq	r5,zero,8004898 <_malloc_r+0x324>
 8004bfc:	2886703a 	and	r3,r5,r2
 8004c00:	5809883a 	mov	r4,r11
 8004c04:	183ec31e 	bne	r3,zero,8004714 <_malloc_r+0x1a0>
 8004c08:	294b883a 	add	r5,r5,r5
 8004c0c:	2886703a 	and	r3,r5,r2
 8004c10:	21000104 	addi	r4,r4,4
 8004c14:	183ffc26 	beq	r3,zero,8004c08 <_malloc_r+0x694>
 8004c18:	003ebe06 	br	8004714 <_malloc_r+0x1a0>
 8004c1c:	00c05504 	movi	r3,340
 8004c20:	18801236 	bltu	r3,r2,8004c6c <_malloc_r+0x6f8>
 8004c24:	8804d3fa 	srli	r2,r17,15
 8004c28:	12001e04 	addi	r8,r2,120
 8004c2c:	11c01dc4 	addi	r7,r2,119
 8004c30:	4209883a 	add	r4,r8,r8
 8004c34:	003e6d06 	br	80045ec <_malloc_r+0x78>
 8004c38:	00c40004 	movi	r3,4096
 8004c3c:	003f4606 	br	8004958 <_malloc_r+0x3e4>
 8004c40:	00800044 	movi	r2,1
 8004c44:	a0800115 	stw	r2,4(r20)
 8004c48:	003f7406 	br	8004a1c <_malloc_r+0x4a8>
 8004c4c:	1805d0ba 	srai	r2,r3,2
 8004c50:	01c00044 	movi	r7,1
 8004c54:	30c00117 	ldw	r3,4(r6)
 8004c58:	388e983a 	sll	r7,r7,r2
 8004c5c:	2805883a 	mov	r2,r5
 8004c60:	38c6b03a 	or	r3,r7,r3
 8004c64:	30c00115 	stw	r3,4(r6)
 8004c68:	003f9b06 	br	8004ad8 <_malloc_r+0x564>
 8004c6c:	00c15504 	movi	r3,1364
 8004c70:	18801a36 	bltu	r3,r2,8004cdc <_malloc_r+0x768>
 8004c74:	8804d4ba 	srli	r2,r17,18
 8004c78:	12001f44 	addi	r8,r2,125
 8004c7c:	11c01f04 	addi	r7,r2,124
 8004c80:	4209883a 	add	r4,r8,r8
 8004c84:	003e5906 	br	80045ec <_malloc_r+0x78>
 8004c88:	ad400404 	addi	r21,r21,16
 8004c8c:	003f1706 	br	80048ec <_malloc_r+0x378>
 8004c90:	00c01504 	movi	r3,84
 8004c94:	18802336 	bltu	r3,r2,8004d24 <_malloc_r+0x7b0>
 8004c98:	3804d33a 	srli	r2,r7,12
 8004c9c:	11401bc4 	addi	r5,r2,111
 8004ca0:	10c01b84 	addi	r3,r2,110
 8004ca4:	294b883a 	add	r5,r5,r5
 8004ca8:	003f7b06 	br	8004a98 <_malloc_r+0x524>
 8004cac:	9c000217 	ldw	r16,8(r19)
 8004cb0:	00bfff04 	movi	r2,-4
 8004cb4:	80c00117 	ldw	r3,4(r16)
 8004cb8:	1886703a 	and	r3,r3,r2
 8004cbc:	003f5306 	br	8004a0c <_malloc_r+0x498>
 8004cc0:	3083ffcc 	andi	r2,r6,4095
 8004cc4:	103f181e 	bne	r2,zero,8004928 <_malloc_r+0x3b4>
 8004cc8:	99000217 	ldw	r4,8(r19)
 8004ccc:	b545883a 	add	r2,r22,r21
 8004cd0:	10800054 	ori	r2,r2,1
 8004cd4:	20800115 	stw	r2,4(r4)
 8004cd8:	003f3e06 	br	80049d4 <_malloc_r+0x460>
 8004cdc:	01003f84 	movi	r4,254
 8004ce0:	02001fc4 	movi	r8,127
 8004ce4:	01c01f84 	movi	r7,126
 8004ce8:	003e4006 	br	80045ec <_malloc_r+0x78>
 8004cec:	00820074 	movhi	r2,2049
 8004cf0:	10ab1804 	addi	r2,r2,-21408
 8004cf4:	15000015 	stw	r20,0(r2)
 8004cf8:	003f1106 	br	8004940 <_malloc_r+0x3cc>
 8004cfc:	00800044 	movi	r2,1
 8004d00:	002b883a 	mov	r21,zero
 8004d04:	003f1f06 	br	8004984 <_malloc_r+0x410>
 8004d08:	81400204 	addi	r5,r16,8
 8004d0c:	9009883a 	mov	r4,r18
 8004d10:	8005ffc0 	call	8005ffc <_free_r>
 8004d14:	00820074 	movhi	r2,2049
 8004d18:	10b1d004 	addi	r2,r2,-14528
 8004d1c:	10c00017 	ldw	r3,0(r2)
 8004d20:	003f2c06 	br	80049d4 <_malloc_r+0x460>
 8004d24:	00c05504 	movi	r3,340
 8004d28:	18800536 	bltu	r3,r2,8004d40 <_malloc_r+0x7cc>
 8004d2c:	3804d3fa 	srli	r2,r7,15
 8004d30:	11401e04 	addi	r5,r2,120
 8004d34:	10c01dc4 	addi	r3,r2,119
 8004d38:	294b883a 	add	r5,r5,r5
 8004d3c:	003f5606 	br	8004a98 <_malloc_r+0x524>
 8004d40:	00c15504 	movi	r3,1364
 8004d44:	18800536 	bltu	r3,r2,8004d5c <_malloc_r+0x7e8>
 8004d48:	3804d4ba 	srli	r2,r7,18
 8004d4c:	11401f44 	addi	r5,r2,125
 8004d50:	10c01f04 	addi	r3,r2,124
 8004d54:	294b883a 	add	r5,r5,r5
 8004d58:	003f4f06 	br	8004a98 <_malloc_r+0x524>
 8004d5c:	01403f84 	movi	r5,254
 8004d60:	00c01f84 	movi	r3,126
 8004d64:	003f4c06 	br	8004a98 <_malloc_r+0x524>
 8004d68:	98800117 	ldw	r2,4(r19)
 8004d6c:	003fa006 	br	8004bf0 <_malloc_r+0x67c>
 8004d70:	8808d0fa 	srli	r4,r17,3
 8004d74:	20800044 	addi	r2,r4,1
 8004d78:	1085883a 	add	r2,r2,r2
 8004d7c:	003e9006 	br	80047c0 <_malloc_r+0x24c>

08004d80 <memchr>:
 8004d80:	208000cc 	andi	r2,r4,3
 8004d84:	280f883a 	mov	r7,r5
 8004d88:	10003426 	beq	r2,zero,8004e5c <memchr+0xdc>
 8004d8c:	30bfffc4 	addi	r2,r6,-1
 8004d90:	30001a26 	beq	r6,zero,8004dfc <memchr+0x7c>
 8004d94:	20c00003 	ldbu	r3,0(r4)
 8004d98:	29803fcc 	andi	r6,r5,255
 8004d9c:	30c0051e 	bne	r6,r3,8004db4 <memchr+0x34>
 8004da0:	00001806 	br	8004e04 <memchr+0x84>
 8004da4:	10001526 	beq	r2,zero,8004dfc <memchr+0x7c>
 8004da8:	20c00003 	ldbu	r3,0(r4)
 8004dac:	10bfffc4 	addi	r2,r2,-1
 8004db0:	30c01426 	beq	r6,r3,8004e04 <memchr+0x84>
 8004db4:	21000044 	addi	r4,r4,1
 8004db8:	20c000cc 	andi	r3,r4,3
 8004dbc:	183ff91e 	bne	r3,zero,8004da4 <memchr+0x24>
 8004dc0:	020000c4 	movi	r8,3
 8004dc4:	40801136 	bltu	r8,r2,8004e0c <memchr+0x8c>
 8004dc8:	10000c26 	beq	r2,zero,8004dfc <memchr+0x7c>
 8004dcc:	20c00003 	ldbu	r3,0(r4)
 8004dd0:	29403fcc 	andi	r5,r5,255
 8004dd4:	28c00b26 	beq	r5,r3,8004e04 <memchr+0x84>
 8004dd8:	20c00044 	addi	r3,r4,1
 8004ddc:	39803fcc 	andi	r6,r7,255
 8004de0:	2089883a 	add	r4,r4,r2
 8004de4:	00000306 	br	8004df4 <memchr+0x74>
 8004de8:	18c00044 	addi	r3,r3,1
 8004dec:	197fffc3 	ldbu	r5,-1(r3)
 8004df0:	31400526 	beq	r6,r5,8004e08 <memchr+0x88>
 8004df4:	1805883a 	mov	r2,r3
 8004df8:	20fffb1e 	bne	r4,r3,8004de8 <memchr+0x68>
 8004dfc:	0005883a 	mov	r2,zero
 8004e00:	f800283a 	ret
 8004e04:	2005883a 	mov	r2,r4
 8004e08:	f800283a 	ret
 8004e0c:	28c03fcc 	andi	r3,r5,255
 8004e10:	1812923a 	slli	r9,r3,8
 8004e14:	02ffbff4 	movhi	r11,65279
 8004e18:	02a02074 	movhi	r10,32897
 8004e1c:	48d2b03a 	or	r9,r9,r3
 8004e20:	4806943a 	slli	r3,r9,16
 8004e24:	5affbfc4 	addi	r11,r11,-257
 8004e28:	52a02004 	addi	r10,r10,-32640
 8004e2c:	48d2b03a 	or	r9,r9,r3
 8004e30:	20c00017 	ldw	r3,0(r4)
 8004e34:	48c6f03a 	xor	r3,r9,r3
 8004e38:	1acd883a 	add	r6,r3,r11
 8004e3c:	00c6303a 	nor	r3,zero,r3
 8004e40:	30c6703a 	and	r3,r6,r3
 8004e44:	1a86703a 	and	r3,r3,r10
 8004e48:	183fe01e 	bne	r3,zero,8004dcc <memchr+0x4c>
 8004e4c:	10bfff04 	addi	r2,r2,-4
 8004e50:	21000104 	addi	r4,r4,4
 8004e54:	40bff636 	bltu	r8,r2,8004e30 <memchr+0xb0>
 8004e58:	003fdb06 	br	8004dc8 <memchr+0x48>
 8004e5c:	3005883a 	mov	r2,r6
 8004e60:	003fd706 	br	8004dc0 <memchr+0x40>

08004e64 <memcpy>:
 8004e64:	defffd04 	addi	sp,sp,-12
 8004e68:	dfc00215 	stw	ra,8(sp)
 8004e6c:	dc400115 	stw	r17,4(sp)
 8004e70:	dc000015 	stw	r16,0(sp)
 8004e74:	00c003c4 	movi	r3,15
 8004e78:	2005883a 	mov	r2,r4
 8004e7c:	1980452e 	bgeu	r3,r6,8004f94 <memcpy+0x130>
 8004e80:	2906b03a 	or	r3,r5,r4
 8004e84:	18c000cc 	andi	r3,r3,3
 8004e88:	1800441e 	bne	r3,zero,8004f9c <memcpy+0x138>
 8004e8c:	347ffc04 	addi	r17,r6,-16
 8004e90:	8822d13a 	srli	r17,r17,4
 8004e94:	28c00104 	addi	r3,r5,4
 8004e98:	23400104 	addi	r13,r4,4
 8004e9c:	8820913a 	slli	r16,r17,4
 8004ea0:	2b000204 	addi	r12,r5,8
 8004ea4:	22c00204 	addi	r11,r4,8
 8004ea8:	84000504 	addi	r16,r16,20
 8004eac:	2a800304 	addi	r10,r5,12
 8004eb0:	22400304 	addi	r9,r4,12
 8004eb4:	2c21883a 	add	r16,r5,r16
 8004eb8:	2811883a 	mov	r8,r5
 8004ebc:	200f883a 	mov	r7,r4
 8004ec0:	41000017 	ldw	r4,0(r8)
 8004ec4:	1fc00017 	ldw	ra,0(r3)
 8004ec8:	63c00017 	ldw	r15,0(r12)
 8004ecc:	39000015 	stw	r4,0(r7)
 8004ed0:	53800017 	ldw	r14,0(r10)
 8004ed4:	6fc00015 	stw	ra,0(r13)
 8004ed8:	5bc00015 	stw	r15,0(r11)
 8004edc:	4b800015 	stw	r14,0(r9)
 8004ee0:	18c00404 	addi	r3,r3,16
 8004ee4:	39c00404 	addi	r7,r7,16
 8004ee8:	42000404 	addi	r8,r8,16
 8004eec:	6b400404 	addi	r13,r13,16
 8004ef0:	63000404 	addi	r12,r12,16
 8004ef4:	5ac00404 	addi	r11,r11,16
 8004ef8:	52800404 	addi	r10,r10,16
 8004efc:	4a400404 	addi	r9,r9,16
 8004f00:	1c3fef1e 	bne	r3,r16,8004ec0 <memcpy+0x5c>
 8004f04:	89c00044 	addi	r7,r17,1
 8004f08:	380e913a 	slli	r7,r7,4
 8004f0c:	310003cc 	andi	r4,r6,15
 8004f10:	02c000c4 	movi	r11,3
 8004f14:	11c7883a 	add	r3,r2,r7
 8004f18:	29cb883a 	add	r5,r5,r7
 8004f1c:	5900212e 	bgeu	r11,r4,8004fa4 <memcpy+0x140>
 8004f20:	1813883a 	mov	r9,r3
 8004f24:	2811883a 	mov	r8,r5
 8004f28:	200f883a 	mov	r7,r4
 8004f2c:	42800017 	ldw	r10,0(r8)
 8004f30:	4a400104 	addi	r9,r9,4
 8004f34:	39ffff04 	addi	r7,r7,-4
 8004f38:	4abfff15 	stw	r10,-4(r9)
 8004f3c:	42000104 	addi	r8,r8,4
 8004f40:	59fffa36 	bltu	r11,r7,8004f2c <memcpy+0xc8>
 8004f44:	213fff04 	addi	r4,r4,-4
 8004f48:	2008d0ba 	srli	r4,r4,2
 8004f4c:	318000cc 	andi	r6,r6,3
 8004f50:	21000044 	addi	r4,r4,1
 8004f54:	2109883a 	add	r4,r4,r4
 8004f58:	2109883a 	add	r4,r4,r4
 8004f5c:	1907883a 	add	r3,r3,r4
 8004f60:	290b883a 	add	r5,r5,r4
 8004f64:	30000626 	beq	r6,zero,8004f80 <memcpy+0x11c>
 8004f68:	198d883a 	add	r6,r3,r6
 8004f6c:	29c00003 	ldbu	r7,0(r5)
 8004f70:	18c00044 	addi	r3,r3,1
 8004f74:	29400044 	addi	r5,r5,1
 8004f78:	19ffffc5 	stb	r7,-1(r3)
 8004f7c:	19bffb1e 	bne	r3,r6,8004f6c <memcpy+0x108>
 8004f80:	dfc00217 	ldw	ra,8(sp)
 8004f84:	dc400117 	ldw	r17,4(sp)
 8004f88:	dc000017 	ldw	r16,0(sp)
 8004f8c:	dec00304 	addi	sp,sp,12
 8004f90:	f800283a 	ret
 8004f94:	2007883a 	mov	r3,r4
 8004f98:	003ff206 	br	8004f64 <memcpy+0x100>
 8004f9c:	2007883a 	mov	r3,r4
 8004fa0:	003ff106 	br	8004f68 <memcpy+0x104>
 8004fa4:	200d883a 	mov	r6,r4
 8004fa8:	003fee06 	br	8004f64 <memcpy+0x100>

08004fac <memmove>:
 8004fac:	2005883a 	mov	r2,r4
 8004fb0:	29000b2e 	bgeu	r5,r4,8004fe0 <memmove+0x34>
 8004fb4:	298f883a 	add	r7,r5,r6
 8004fb8:	21c0092e 	bgeu	r4,r7,8004fe0 <memmove+0x34>
 8004fbc:	2187883a 	add	r3,r4,r6
 8004fc0:	198bc83a 	sub	r5,r3,r6
 8004fc4:	30004826 	beq	r6,zero,80050e8 <memmove+0x13c>
 8004fc8:	39ffffc4 	addi	r7,r7,-1
 8004fcc:	39000003 	ldbu	r4,0(r7)
 8004fd0:	18ffffc4 	addi	r3,r3,-1
 8004fd4:	19000005 	stb	r4,0(r3)
 8004fd8:	28fffb1e 	bne	r5,r3,8004fc8 <memmove+0x1c>
 8004fdc:	f800283a 	ret
 8004fe0:	00c003c4 	movi	r3,15
 8004fe4:	1980412e 	bgeu	r3,r6,80050ec <memmove+0x140>
 8004fe8:	2886b03a 	or	r3,r5,r2
 8004fec:	18c000cc 	andi	r3,r3,3
 8004ff0:	1800401e 	bne	r3,zero,80050f4 <memmove+0x148>
 8004ff4:	33fffc04 	addi	r15,r6,-16
 8004ff8:	781ed13a 	srli	r15,r15,4
 8004ffc:	28c00104 	addi	r3,r5,4
 8005000:	13400104 	addi	r13,r2,4
 8005004:	781c913a 	slli	r14,r15,4
 8005008:	2b000204 	addi	r12,r5,8
 800500c:	12c00204 	addi	r11,r2,8
 8005010:	73800504 	addi	r14,r14,20
 8005014:	2a800304 	addi	r10,r5,12
 8005018:	12400304 	addi	r9,r2,12
 800501c:	2b9d883a 	add	r14,r5,r14
 8005020:	2811883a 	mov	r8,r5
 8005024:	100f883a 	mov	r7,r2
 8005028:	41000017 	ldw	r4,0(r8)
 800502c:	39c00404 	addi	r7,r7,16
 8005030:	18c00404 	addi	r3,r3,16
 8005034:	393ffc15 	stw	r4,-16(r7)
 8005038:	193ffc17 	ldw	r4,-16(r3)
 800503c:	6b400404 	addi	r13,r13,16
 8005040:	5ac00404 	addi	r11,r11,16
 8005044:	693ffc15 	stw	r4,-16(r13)
 8005048:	61000017 	ldw	r4,0(r12)
 800504c:	4a400404 	addi	r9,r9,16
 8005050:	42000404 	addi	r8,r8,16
 8005054:	593ffc15 	stw	r4,-16(r11)
 8005058:	51000017 	ldw	r4,0(r10)
 800505c:	63000404 	addi	r12,r12,16
 8005060:	52800404 	addi	r10,r10,16
 8005064:	493ffc15 	stw	r4,-16(r9)
 8005068:	1bbfef1e 	bne	r3,r14,8005028 <memmove+0x7c>
 800506c:	79000044 	addi	r4,r15,1
 8005070:	2008913a 	slli	r4,r4,4
 8005074:	328003cc 	andi	r10,r6,15
 8005078:	02c000c4 	movi	r11,3
 800507c:	1107883a 	add	r3,r2,r4
 8005080:	290b883a 	add	r5,r5,r4
 8005084:	5a801e2e 	bgeu	r11,r10,8005100 <memmove+0x154>
 8005088:	1813883a 	mov	r9,r3
 800508c:	2811883a 	mov	r8,r5
 8005090:	500f883a 	mov	r7,r10
 8005094:	41000017 	ldw	r4,0(r8)
 8005098:	4a400104 	addi	r9,r9,4
 800509c:	39ffff04 	addi	r7,r7,-4
 80050a0:	493fff15 	stw	r4,-4(r9)
 80050a4:	42000104 	addi	r8,r8,4
 80050a8:	59fffa36 	bltu	r11,r7,8005094 <memmove+0xe8>
 80050ac:	513fff04 	addi	r4,r10,-4
 80050b0:	2008d0ba 	srli	r4,r4,2
 80050b4:	318000cc 	andi	r6,r6,3
 80050b8:	21000044 	addi	r4,r4,1
 80050bc:	2109883a 	add	r4,r4,r4
 80050c0:	2109883a 	add	r4,r4,r4
 80050c4:	1907883a 	add	r3,r3,r4
 80050c8:	290b883a 	add	r5,r5,r4
 80050cc:	30000b26 	beq	r6,zero,80050fc <memmove+0x150>
 80050d0:	198d883a 	add	r6,r3,r6
 80050d4:	29c00003 	ldbu	r7,0(r5)
 80050d8:	18c00044 	addi	r3,r3,1
 80050dc:	29400044 	addi	r5,r5,1
 80050e0:	19ffffc5 	stb	r7,-1(r3)
 80050e4:	19bffb1e 	bne	r3,r6,80050d4 <memmove+0x128>
 80050e8:	f800283a 	ret
 80050ec:	1007883a 	mov	r3,r2
 80050f0:	003ff606 	br	80050cc <memmove+0x120>
 80050f4:	1007883a 	mov	r3,r2
 80050f8:	003ff506 	br	80050d0 <memmove+0x124>
 80050fc:	f800283a 	ret
 8005100:	500d883a 	mov	r6,r10
 8005104:	003ff106 	br	80050cc <memmove+0x120>

08005108 <memset>:
 8005108:	20c000cc 	andi	r3,r4,3
 800510c:	2005883a 	mov	r2,r4
 8005110:	18004426 	beq	r3,zero,8005224 <memset+0x11c>
 8005114:	31ffffc4 	addi	r7,r6,-1
 8005118:	30004026 	beq	r6,zero,800521c <memset+0x114>
 800511c:	2813883a 	mov	r9,r5
 8005120:	200d883a 	mov	r6,r4
 8005124:	2007883a 	mov	r3,r4
 8005128:	00000406 	br	800513c <memset+0x34>
 800512c:	3a3fffc4 	addi	r8,r7,-1
 8005130:	31800044 	addi	r6,r6,1
 8005134:	38003926 	beq	r7,zero,800521c <memset+0x114>
 8005138:	400f883a 	mov	r7,r8
 800513c:	18c00044 	addi	r3,r3,1
 8005140:	32400005 	stb	r9,0(r6)
 8005144:	1a0000cc 	andi	r8,r3,3
 8005148:	403ff81e 	bne	r8,zero,800512c <memset+0x24>
 800514c:	010000c4 	movi	r4,3
 8005150:	21c02d2e 	bgeu	r4,r7,8005208 <memset+0x100>
 8005154:	29003fcc 	andi	r4,r5,255
 8005158:	200c923a 	slli	r6,r4,8
 800515c:	3108b03a 	or	r4,r6,r4
 8005160:	200c943a 	slli	r6,r4,16
 8005164:	218cb03a 	or	r6,r4,r6
 8005168:	010003c4 	movi	r4,15
 800516c:	21c0182e 	bgeu	r4,r7,80051d0 <memset+0xc8>
 8005170:	3b3ffc04 	addi	r12,r7,-16
 8005174:	6018d13a 	srli	r12,r12,4
 8005178:	1a000104 	addi	r8,r3,4
 800517c:	1ac00204 	addi	r11,r3,8
 8005180:	6008913a 	slli	r4,r12,4
 8005184:	1a800304 	addi	r10,r3,12
 8005188:	1813883a 	mov	r9,r3
 800518c:	21000504 	addi	r4,r4,20
 8005190:	1909883a 	add	r4,r3,r4
 8005194:	49800015 	stw	r6,0(r9)
 8005198:	41800015 	stw	r6,0(r8)
 800519c:	59800015 	stw	r6,0(r11)
 80051a0:	51800015 	stw	r6,0(r10)
 80051a4:	42000404 	addi	r8,r8,16
 80051a8:	4a400404 	addi	r9,r9,16
 80051ac:	5ac00404 	addi	r11,r11,16
 80051b0:	52800404 	addi	r10,r10,16
 80051b4:	413ff71e 	bne	r8,r4,8005194 <memset+0x8c>
 80051b8:	63000044 	addi	r12,r12,1
 80051bc:	6018913a 	slli	r12,r12,4
 80051c0:	39c003cc 	andi	r7,r7,15
 80051c4:	010000c4 	movi	r4,3
 80051c8:	1b07883a 	add	r3,r3,r12
 80051cc:	21c00e2e 	bgeu	r4,r7,8005208 <memset+0x100>
 80051d0:	1813883a 	mov	r9,r3
 80051d4:	3811883a 	mov	r8,r7
 80051d8:	010000c4 	movi	r4,3
 80051dc:	49800015 	stw	r6,0(r9)
 80051e0:	423fff04 	addi	r8,r8,-4
 80051e4:	4a400104 	addi	r9,r9,4
 80051e8:	223ffc36 	bltu	r4,r8,80051dc <memset+0xd4>
 80051ec:	393fff04 	addi	r4,r7,-4
 80051f0:	2008d0ba 	srli	r4,r4,2
 80051f4:	39c000cc 	andi	r7,r7,3
 80051f8:	21000044 	addi	r4,r4,1
 80051fc:	2109883a 	add	r4,r4,r4
 8005200:	2109883a 	add	r4,r4,r4
 8005204:	1907883a 	add	r3,r3,r4
 8005208:	38000526 	beq	r7,zero,8005220 <memset+0x118>
 800520c:	19cf883a 	add	r7,r3,r7
 8005210:	19400005 	stb	r5,0(r3)
 8005214:	18c00044 	addi	r3,r3,1
 8005218:	38fffd1e 	bne	r7,r3,8005210 <memset+0x108>
 800521c:	f800283a 	ret
 8005220:	f800283a 	ret
 8005224:	2007883a 	mov	r3,r4
 8005228:	300f883a 	mov	r7,r6
 800522c:	003fc706 	br	800514c <memset+0x44>

08005230 <_realloc_r>:
 8005230:	defff604 	addi	sp,sp,-40
 8005234:	dc800215 	stw	r18,8(sp)
 8005238:	dfc00915 	stw	ra,36(sp)
 800523c:	df000815 	stw	fp,32(sp)
 8005240:	ddc00715 	stw	r23,28(sp)
 8005244:	dd800615 	stw	r22,24(sp)
 8005248:	dd400515 	stw	r21,20(sp)
 800524c:	dd000415 	stw	r20,16(sp)
 8005250:	dcc00315 	stw	r19,12(sp)
 8005254:	dc400115 	stw	r17,4(sp)
 8005258:	dc000015 	stw	r16,0(sp)
 800525c:	3025883a 	mov	r18,r6
 8005260:	2800b726 	beq	r5,zero,8005540 <_realloc_r+0x310>
 8005264:	282b883a 	mov	r21,r5
 8005268:	2029883a 	mov	r20,r4
 800526c:	8006e080 	call	8006e08 <__malloc_lock>
 8005270:	a8bfff17 	ldw	r2,-4(r21)
 8005274:	043fff04 	movi	r16,-4
 8005278:	90c002c4 	addi	r3,r18,11
 800527c:	01000584 	movi	r4,22
 8005280:	acfffe04 	addi	r19,r21,-8
 8005284:	1420703a 	and	r16,r2,r16
 8005288:	20c0332e 	bgeu	r4,r3,8005358 <_realloc_r+0x128>
 800528c:	047ffe04 	movi	r17,-8
 8005290:	1c62703a 	and	r17,r3,r17
 8005294:	8807883a 	mov	r3,r17
 8005298:	88005816 	blt	r17,zero,80053fc <_realloc_r+0x1cc>
 800529c:	8c805736 	bltu	r17,r18,80053fc <_realloc_r+0x1cc>
 80052a0:	80c0300e 	bge	r16,r3,8005364 <_realloc_r+0x134>
 80052a4:	07020074 	movhi	fp,2049
 80052a8:	e7259004 	addi	fp,fp,-27072
 80052ac:	e1c00217 	ldw	r7,8(fp)
 80052b0:	9c09883a 	add	r4,r19,r16
 80052b4:	22000117 	ldw	r8,4(r4)
 80052b8:	21c06326 	beq	r4,r7,8005448 <_realloc_r+0x218>
 80052bc:	017fff84 	movi	r5,-2
 80052c0:	414a703a 	and	r5,r8,r5
 80052c4:	214b883a 	add	r5,r4,r5
 80052c8:	29800117 	ldw	r6,4(r5)
 80052cc:	3180004c 	andi	r6,r6,1
 80052d0:	30003f26 	beq	r6,zero,80053d0 <_realloc_r+0x1a0>
 80052d4:	1080004c 	andi	r2,r2,1
 80052d8:	10008326 	beq	r2,zero,80054e8 <_realloc_r+0x2b8>
 80052dc:	900b883a 	mov	r5,r18
 80052e0:	a009883a 	mov	r4,r20
 80052e4:	80045740 	call	8004574 <_malloc_r>
 80052e8:	1025883a 	mov	r18,r2
 80052ec:	10011e26 	beq	r2,zero,8005768 <_realloc_r+0x538>
 80052f0:	a93fff17 	ldw	r4,-4(r21)
 80052f4:	10fffe04 	addi	r3,r2,-8
 80052f8:	00bfff84 	movi	r2,-2
 80052fc:	2084703a 	and	r2,r4,r2
 8005300:	9885883a 	add	r2,r19,r2
 8005304:	1880ee26 	beq	r3,r2,80056c0 <_realloc_r+0x490>
 8005308:	81bfff04 	addi	r6,r16,-4
 800530c:	00800904 	movi	r2,36
 8005310:	1180b836 	bltu	r2,r6,80055f4 <_realloc_r+0x3c4>
 8005314:	00c004c4 	movi	r3,19
 8005318:	19809636 	bltu	r3,r6,8005574 <_realloc_r+0x344>
 800531c:	9005883a 	mov	r2,r18
 8005320:	a807883a 	mov	r3,r21
 8005324:	19000017 	ldw	r4,0(r3)
 8005328:	11000015 	stw	r4,0(r2)
 800532c:	19000117 	ldw	r4,4(r3)
 8005330:	11000115 	stw	r4,4(r2)
 8005334:	18c00217 	ldw	r3,8(r3)
 8005338:	10c00215 	stw	r3,8(r2)
 800533c:	a80b883a 	mov	r5,r21
 8005340:	a009883a 	mov	r4,r20
 8005344:	8005ffc0 	call	8005ffc <_free_r>
 8005348:	a009883a 	mov	r4,r20
 800534c:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8005350:	9005883a 	mov	r2,r18
 8005354:	00001206 	br	80053a0 <_realloc_r+0x170>
 8005358:	00c00404 	movi	r3,16
 800535c:	1823883a 	mov	r17,r3
 8005360:	003fce06 	br	800529c <_realloc_r+0x6c>
 8005364:	a825883a 	mov	r18,r21
 8005368:	8445c83a 	sub	r2,r16,r17
 800536c:	00c003c4 	movi	r3,15
 8005370:	18802636 	bltu	r3,r2,800540c <_realloc_r+0x1dc>
 8005374:	99800117 	ldw	r6,4(r19)
 8005378:	9c07883a 	add	r3,r19,r16
 800537c:	3180004c 	andi	r6,r6,1
 8005380:	3420b03a 	or	r16,r6,r16
 8005384:	9c000115 	stw	r16,4(r19)
 8005388:	18800117 	ldw	r2,4(r3)
 800538c:	10800054 	ori	r2,r2,1
 8005390:	18800115 	stw	r2,4(r3)
 8005394:	a009883a 	mov	r4,r20
 8005398:	8006e2c0 	call	8006e2c <__malloc_unlock>
 800539c:	9005883a 	mov	r2,r18
 80053a0:	dfc00917 	ldw	ra,36(sp)
 80053a4:	df000817 	ldw	fp,32(sp)
 80053a8:	ddc00717 	ldw	r23,28(sp)
 80053ac:	dd800617 	ldw	r22,24(sp)
 80053b0:	dd400517 	ldw	r21,20(sp)
 80053b4:	dd000417 	ldw	r20,16(sp)
 80053b8:	dcc00317 	ldw	r19,12(sp)
 80053bc:	dc800217 	ldw	r18,8(sp)
 80053c0:	dc400117 	ldw	r17,4(sp)
 80053c4:	dc000017 	ldw	r16,0(sp)
 80053c8:	dec00a04 	addi	sp,sp,40
 80053cc:	f800283a 	ret
 80053d0:	017fff04 	movi	r5,-4
 80053d4:	414a703a 	and	r5,r8,r5
 80053d8:	814d883a 	add	r6,r16,r5
 80053dc:	30c01f16 	blt	r6,r3,800545c <_realloc_r+0x22c>
 80053e0:	20800317 	ldw	r2,12(r4)
 80053e4:	20c00217 	ldw	r3,8(r4)
 80053e8:	a825883a 	mov	r18,r21
 80053ec:	3021883a 	mov	r16,r6
 80053f0:	18800315 	stw	r2,12(r3)
 80053f4:	10c00215 	stw	r3,8(r2)
 80053f8:	003fdb06 	br	8005368 <_realloc_r+0x138>
 80053fc:	00800304 	movi	r2,12
 8005400:	a0800015 	stw	r2,0(r20)
 8005404:	0005883a 	mov	r2,zero
 8005408:	003fe506 	br	80053a0 <_realloc_r+0x170>
 800540c:	98c00117 	ldw	r3,4(r19)
 8005410:	9c4b883a 	add	r5,r19,r17
 8005414:	11000054 	ori	r4,r2,1
 8005418:	18c0004c 	andi	r3,r3,1
 800541c:	1c62b03a 	or	r17,r3,r17
 8005420:	9c400115 	stw	r17,4(r19)
 8005424:	29000115 	stw	r4,4(r5)
 8005428:	2885883a 	add	r2,r5,r2
 800542c:	10c00117 	ldw	r3,4(r2)
 8005430:	29400204 	addi	r5,r5,8
 8005434:	a009883a 	mov	r4,r20
 8005438:	18c00054 	ori	r3,r3,1
 800543c:	10c00115 	stw	r3,4(r2)
 8005440:	8005ffc0 	call	8005ffc <_free_r>
 8005444:	003fd306 	br	8005394 <_realloc_r+0x164>
 8005448:	017fff04 	movi	r5,-4
 800544c:	414a703a 	and	r5,r8,r5
 8005450:	89800404 	addi	r6,r17,16
 8005454:	8151883a 	add	r8,r16,r5
 8005458:	4180590e 	bge	r8,r6,80055c0 <_realloc_r+0x390>
 800545c:	1080004c 	andi	r2,r2,1
 8005460:	103f9e1e 	bne	r2,zero,80052dc <_realloc_r+0xac>
 8005464:	adbffe17 	ldw	r22,-8(r21)
 8005468:	00bfff04 	movi	r2,-4
 800546c:	9dadc83a 	sub	r22,r19,r22
 8005470:	b1800117 	ldw	r6,4(r22)
 8005474:	3084703a 	and	r2,r6,r2
 8005478:	20002026 	beq	r4,zero,80054fc <_realloc_r+0x2cc>
 800547c:	80af883a 	add	r23,r16,r2
 8005480:	b96f883a 	add	r23,r23,r5
 8005484:	21c05f26 	beq	r4,r7,8005604 <_realloc_r+0x3d4>
 8005488:	b8c01c16 	blt	r23,r3,80054fc <_realloc_r+0x2cc>
 800548c:	20800317 	ldw	r2,12(r4)
 8005490:	20c00217 	ldw	r3,8(r4)
 8005494:	81bfff04 	addi	r6,r16,-4
 8005498:	01000904 	movi	r4,36
 800549c:	18800315 	stw	r2,12(r3)
 80054a0:	10c00215 	stw	r3,8(r2)
 80054a4:	b0c00217 	ldw	r3,8(r22)
 80054a8:	b0800317 	ldw	r2,12(r22)
 80054ac:	b4800204 	addi	r18,r22,8
 80054b0:	18800315 	stw	r2,12(r3)
 80054b4:	10c00215 	stw	r3,8(r2)
 80054b8:	21801b36 	bltu	r4,r6,8005528 <_realloc_r+0x2f8>
 80054bc:	008004c4 	movi	r2,19
 80054c0:	1180352e 	bgeu	r2,r6,8005598 <_realloc_r+0x368>
 80054c4:	a8800017 	ldw	r2,0(r21)
 80054c8:	b0800215 	stw	r2,8(r22)
 80054cc:	a8800117 	ldw	r2,4(r21)
 80054d0:	b0800315 	stw	r2,12(r22)
 80054d4:	008006c4 	movi	r2,27
 80054d8:	11807f36 	bltu	r2,r6,80056d8 <_realloc_r+0x4a8>
 80054dc:	b0800404 	addi	r2,r22,16
 80054e0:	ad400204 	addi	r21,r21,8
 80054e4:	00002d06 	br	800559c <_realloc_r+0x36c>
 80054e8:	adbffe17 	ldw	r22,-8(r21)
 80054ec:	00bfff04 	movi	r2,-4
 80054f0:	9dadc83a 	sub	r22,r19,r22
 80054f4:	b1000117 	ldw	r4,4(r22)
 80054f8:	2084703a 	and	r2,r4,r2
 80054fc:	b03f7726 	beq	r22,zero,80052dc <_realloc_r+0xac>
 8005500:	80af883a 	add	r23,r16,r2
 8005504:	b8ff7516 	blt	r23,r3,80052dc <_realloc_r+0xac>
 8005508:	b0800317 	ldw	r2,12(r22)
 800550c:	b0c00217 	ldw	r3,8(r22)
 8005510:	81bfff04 	addi	r6,r16,-4
 8005514:	01000904 	movi	r4,36
 8005518:	18800315 	stw	r2,12(r3)
 800551c:	10c00215 	stw	r3,8(r2)
 8005520:	b4800204 	addi	r18,r22,8
 8005524:	21bfe52e 	bgeu	r4,r6,80054bc <_realloc_r+0x28c>
 8005528:	a80b883a 	mov	r5,r21
 800552c:	9009883a 	mov	r4,r18
 8005530:	8004fac0 	call	8004fac <memmove>
 8005534:	b821883a 	mov	r16,r23
 8005538:	b027883a 	mov	r19,r22
 800553c:	003f8a06 	br	8005368 <_realloc_r+0x138>
 8005540:	300b883a 	mov	r5,r6
 8005544:	dfc00917 	ldw	ra,36(sp)
 8005548:	df000817 	ldw	fp,32(sp)
 800554c:	ddc00717 	ldw	r23,28(sp)
 8005550:	dd800617 	ldw	r22,24(sp)
 8005554:	dd400517 	ldw	r21,20(sp)
 8005558:	dd000417 	ldw	r20,16(sp)
 800555c:	dcc00317 	ldw	r19,12(sp)
 8005560:	dc800217 	ldw	r18,8(sp)
 8005564:	dc400117 	ldw	r17,4(sp)
 8005568:	dc000017 	ldw	r16,0(sp)
 800556c:	dec00a04 	addi	sp,sp,40
 8005570:	80045741 	jmpi	8004574 <_malloc_r>
 8005574:	a8c00017 	ldw	r3,0(r21)
 8005578:	90c00015 	stw	r3,0(r18)
 800557c:	a8c00117 	ldw	r3,4(r21)
 8005580:	90c00115 	stw	r3,4(r18)
 8005584:	00c006c4 	movi	r3,27
 8005588:	19804536 	bltu	r3,r6,80056a0 <_realloc_r+0x470>
 800558c:	90800204 	addi	r2,r18,8
 8005590:	a8c00204 	addi	r3,r21,8
 8005594:	003f6306 	br	8005324 <_realloc_r+0xf4>
 8005598:	9005883a 	mov	r2,r18
 800559c:	a8c00017 	ldw	r3,0(r21)
 80055a0:	b821883a 	mov	r16,r23
 80055a4:	b027883a 	mov	r19,r22
 80055a8:	10c00015 	stw	r3,0(r2)
 80055ac:	a8c00117 	ldw	r3,4(r21)
 80055b0:	10c00115 	stw	r3,4(r2)
 80055b4:	a8c00217 	ldw	r3,8(r21)
 80055b8:	10c00215 	stw	r3,8(r2)
 80055bc:	003f6a06 	br	8005368 <_realloc_r+0x138>
 80055c0:	9c67883a 	add	r19,r19,r17
 80055c4:	4445c83a 	sub	r2,r8,r17
 80055c8:	e4c00215 	stw	r19,8(fp)
 80055cc:	10800054 	ori	r2,r2,1
 80055d0:	98800115 	stw	r2,4(r19)
 80055d4:	a8bfff17 	ldw	r2,-4(r21)
 80055d8:	a009883a 	mov	r4,r20
 80055dc:	1080004c 	andi	r2,r2,1
 80055e0:	1462b03a 	or	r17,r2,r17
 80055e4:	ac7fff15 	stw	r17,-4(r21)
 80055e8:	8006e2c0 	call	8006e2c <__malloc_unlock>
 80055ec:	a805883a 	mov	r2,r21
 80055f0:	003f6b06 	br	80053a0 <_realloc_r+0x170>
 80055f4:	a80b883a 	mov	r5,r21
 80055f8:	9009883a 	mov	r4,r18
 80055fc:	8004fac0 	call	8004fac <memmove>
 8005600:	003f4e06 	br	800533c <_realloc_r+0x10c>
 8005604:	89000404 	addi	r4,r17,16
 8005608:	b93fbc16 	blt	r23,r4,80054fc <_realloc_r+0x2cc>
 800560c:	b0800317 	ldw	r2,12(r22)
 8005610:	b0c00217 	ldw	r3,8(r22)
 8005614:	81bfff04 	addi	r6,r16,-4
 8005618:	01000904 	movi	r4,36
 800561c:	18800315 	stw	r2,12(r3)
 8005620:	10c00215 	stw	r3,8(r2)
 8005624:	b4800204 	addi	r18,r22,8
 8005628:	21804336 	bltu	r4,r6,8005738 <_realloc_r+0x508>
 800562c:	008004c4 	movi	r2,19
 8005630:	11803f2e 	bgeu	r2,r6,8005730 <_realloc_r+0x500>
 8005634:	a8800017 	ldw	r2,0(r21)
 8005638:	b0800215 	stw	r2,8(r22)
 800563c:	a8800117 	ldw	r2,4(r21)
 8005640:	b0800315 	stw	r2,12(r22)
 8005644:	008006c4 	movi	r2,27
 8005648:	11803f36 	bltu	r2,r6,8005748 <_realloc_r+0x518>
 800564c:	b0800404 	addi	r2,r22,16
 8005650:	ad400204 	addi	r21,r21,8
 8005654:	a8c00017 	ldw	r3,0(r21)
 8005658:	10c00015 	stw	r3,0(r2)
 800565c:	a8c00117 	ldw	r3,4(r21)
 8005660:	10c00115 	stw	r3,4(r2)
 8005664:	a8c00217 	ldw	r3,8(r21)
 8005668:	10c00215 	stw	r3,8(r2)
 800566c:	b447883a 	add	r3,r22,r17
 8005670:	bc45c83a 	sub	r2,r23,r17
 8005674:	e0c00215 	stw	r3,8(fp)
 8005678:	10800054 	ori	r2,r2,1
 800567c:	18800115 	stw	r2,4(r3)
 8005680:	b0800117 	ldw	r2,4(r22)
 8005684:	a009883a 	mov	r4,r20
 8005688:	1080004c 	andi	r2,r2,1
 800568c:	1462b03a 	or	r17,r2,r17
 8005690:	b4400115 	stw	r17,4(r22)
 8005694:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8005698:	9005883a 	mov	r2,r18
 800569c:	003f4006 	br	80053a0 <_realloc_r+0x170>
 80056a0:	a8c00217 	ldw	r3,8(r21)
 80056a4:	90c00215 	stw	r3,8(r18)
 80056a8:	a8c00317 	ldw	r3,12(r21)
 80056ac:	90c00315 	stw	r3,12(r18)
 80056b0:	30801126 	beq	r6,r2,80056f8 <_realloc_r+0x4c8>
 80056b4:	90800404 	addi	r2,r18,16
 80056b8:	a8c00404 	addi	r3,r21,16
 80056bc:	003f1906 	br	8005324 <_realloc_r+0xf4>
 80056c0:	90ffff17 	ldw	r3,-4(r18)
 80056c4:	00bfff04 	movi	r2,-4
 80056c8:	a825883a 	mov	r18,r21
 80056cc:	1884703a 	and	r2,r3,r2
 80056d0:	80a1883a 	add	r16,r16,r2
 80056d4:	003f2406 	br	8005368 <_realloc_r+0x138>
 80056d8:	a8800217 	ldw	r2,8(r21)
 80056dc:	b0800415 	stw	r2,16(r22)
 80056e0:	a8800317 	ldw	r2,12(r21)
 80056e4:	b0800515 	stw	r2,20(r22)
 80056e8:	31000a26 	beq	r6,r4,8005714 <_realloc_r+0x4e4>
 80056ec:	b0800604 	addi	r2,r22,24
 80056f0:	ad400404 	addi	r21,r21,16
 80056f4:	003fa906 	br	800559c <_realloc_r+0x36c>
 80056f8:	a9000417 	ldw	r4,16(r21)
 80056fc:	90800604 	addi	r2,r18,24
 8005700:	a8c00604 	addi	r3,r21,24
 8005704:	91000415 	stw	r4,16(r18)
 8005708:	a9000517 	ldw	r4,20(r21)
 800570c:	91000515 	stw	r4,20(r18)
 8005710:	003f0406 	br	8005324 <_realloc_r+0xf4>
 8005714:	a8c00417 	ldw	r3,16(r21)
 8005718:	ad400604 	addi	r21,r21,24
 800571c:	b0800804 	addi	r2,r22,32
 8005720:	b0c00615 	stw	r3,24(r22)
 8005724:	a8ffff17 	ldw	r3,-4(r21)
 8005728:	b0c00715 	stw	r3,28(r22)
 800572c:	003f9b06 	br	800559c <_realloc_r+0x36c>
 8005730:	9005883a 	mov	r2,r18
 8005734:	003fc706 	br	8005654 <_realloc_r+0x424>
 8005738:	a80b883a 	mov	r5,r21
 800573c:	9009883a 	mov	r4,r18
 8005740:	8004fac0 	call	8004fac <memmove>
 8005744:	003fc906 	br	800566c <_realloc_r+0x43c>
 8005748:	a8800217 	ldw	r2,8(r21)
 800574c:	b0800415 	stw	r2,16(r22)
 8005750:	a8800317 	ldw	r2,12(r21)
 8005754:	b0800515 	stw	r2,20(r22)
 8005758:	31000726 	beq	r6,r4,8005778 <_realloc_r+0x548>
 800575c:	b0800604 	addi	r2,r22,24
 8005760:	ad400404 	addi	r21,r21,16
 8005764:	003fbb06 	br	8005654 <_realloc_r+0x424>
 8005768:	a009883a 	mov	r4,r20
 800576c:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8005770:	0005883a 	mov	r2,zero
 8005774:	003f0a06 	br	80053a0 <_realloc_r+0x170>
 8005778:	a8c00417 	ldw	r3,16(r21)
 800577c:	ad400604 	addi	r21,r21,24
 8005780:	b0800804 	addi	r2,r22,32
 8005784:	b0c00615 	stw	r3,24(r22)
 8005788:	a8ffff17 	ldw	r3,-4(r21)
 800578c:	b0c00715 	stw	r3,28(r22)
 8005790:	003fb006 	br	8005654 <_realloc_r+0x424>

08005794 <_sbrk_r>:
 8005794:	defffd04 	addi	sp,sp,-12
 8005798:	dc000015 	stw	r16,0(sp)
 800579c:	04020074 	movhi	r16,2049
 80057a0:	dc400115 	stw	r17,4(sp)
 80057a4:	8431c104 	addi	r16,r16,-14588
 80057a8:	2023883a 	mov	r17,r4
 80057ac:	2809883a 	mov	r4,r5
 80057b0:	dfc00215 	stw	ra,8(sp)
 80057b4:	80000015 	stw	zero,0(r16)
 80057b8:	8006fec0 	call	8006fec <sbrk>
 80057bc:	00ffffc4 	movi	r3,-1
 80057c0:	10c00526 	beq	r2,r3,80057d8 <_sbrk_r+0x44>
 80057c4:	dfc00217 	ldw	ra,8(sp)
 80057c8:	dc400117 	ldw	r17,4(sp)
 80057cc:	dc000017 	ldw	r16,0(sp)
 80057d0:	dec00304 	addi	sp,sp,12
 80057d4:	f800283a 	ret
 80057d8:	80c00017 	ldw	r3,0(r16)
 80057dc:	183ff926 	beq	r3,zero,80057c4 <_sbrk_r+0x30>
 80057e0:	88c00015 	stw	r3,0(r17)
 80057e4:	003ff706 	br	80057c4 <_sbrk_r+0x30>

080057e8 <__sread>:
 80057e8:	defffe04 	addi	sp,sp,-8
 80057ec:	dc000015 	stw	r16,0(sp)
 80057f0:	2821883a 	mov	r16,r5
 80057f4:	2940038f 	ldh	r5,14(r5)
 80057f8:	dfc00115 	stw	ra,4(sp)
 80057fc:	80065280 	call	8006528 <_read_r>
 8005800:	10000716 	blt	r2,zero,8005820 <__sread+0x38>
 8005804:	80c01417 	ldw	r3,80(r16)
 8005808:	1887883a 	add	r3,r3,r2
 800580c:	80c01415 	stw	r3,80(r16)
 8005810:	dfc00117 	ldw	ra,4(sp)
 8005814:	dc000017 	ldw	r16,0(sp)
 8005818:	dec00204 	addi	sp,sp,8
 800581c:	f800283a 	ret
 8005820:	80c0030b 	ldhu	r3,12(r16)
 8005824:	18fbffcc 	andi	r3,r3,61439
 8005828:	80c0030d 	sth	r3,12(r16)
 800582c:	dfc00117 	ldw	ra,4(sp)
 8005830:	dc000017 	ldw	r16,0(sp)
 8005834:	dec00204 	addi	sp,sp,8
 8005838:	f800283a 	ret

0800583c <__seofread>:
 800583c:	0005883a 	mov	r2,zero
 8005840:	f800283a 	ret

08005844 <__swrite>:
 8005844:	2880030b 	ldhu	r2,12(r5)
 8005848:	defffb04 	addi	sp,sp,-20
 800584c:	dcc00315 	stw	r19,12(sp)
 8005850:	dc800215 	stw	r18,8(sp)
 8005854:	dc400115 	stw	r17,4(sp)
 8005858:	dc000015 	stw	r16,0(sp)
 800585c:	dfc00415 	stw	ra,16(sp)
 8005860:	10c0400c 	andi	r3,r2,256
 8005864:	2821883a 	mov	r16,r5
 8005868:	2023883a 	mov	r17,r4
 800586c:	3025883a 	mov	r18,r6
 8005870:	3827883a 	mov	r19,r7
 8005874:	18000526 	beq	r3,zero,800588c <__swrite+0x48>
 8005878:	2940038f 	ldh	r5,14(r5)
 800587c:	01c00084 	movi	r7,2
 8005880:	000d883a 	mov	r6,zero
 8005884:	800630c0 	call	800630c <_lseek_r>
 8005888:	8080030b 	ldhu	r2,12(r16)
 800588c:	8140038f 	ldh	r5,14(r16)
 8005890:	10bbffcc 	andi	r2,r2,61439
 8005894:	980f883a 	mov	r7,r19
 8005898:	900d883a 	mov	r6,r18
 800589c:	8809883a 	mov	r4,r17
 80058a0:	8080030d 	sth	r2,12(r16)
 80058a4:	dfc00417 	ldw	ra,16(sp)
 80058a8:	dcc00317 	ldw	r19,12(sp)
 80058ac:	dc800217 	ldw	r18,8(sp)
 80058b0:	dc400117 	ldw	r17,4(sp)
 80058b4:	dc000017 	ldw	r16,0(sp)
 80058b8:	dec00504 	addi	sp,sp,20
 80058bc:	80059241 	jmpi	8005924 <_write_r>

080058c0 <__sseek>:
 80058c0:	defffe04 	addi	sp,sp,-8
 80058c4:	dc000015 	stw	r16,0(sp)
 80058c8:	2821883a 	mov	r16,r5
 80058cc:	2940038f 	ldh	r5,14(r5)
 80058d0:	dfc00115 	stw	ra,4(sp)
 80058d4:	800630c0 	call	800630c <_lseek_r>
 80058d8:	00ffffc4 	movi	r3,-1
 80058dc:	10c00826 	beq	r2,r3,8005900 <__sseek+0x40>
 80058e0:	80c0030b 	ldhu	r3,12(r16)
 80058e4:	80801415 	stw	r2,80(r16)
 80058e8:	18c40014 	ori	r3,r3,4096
 80058ec:	80c0030d 	sth	r3,12(r16)
 80058f0:	dfc00117 	ldw	ra,4(sp)
 80058f4:	dc000017 	ldw	r16,0(sp)
 80058f8:	dec00204 	addi	sp,sp,8
 80058fc:	f800283a 	ret
 8005900:	80c0030b 	ldhu	r3,12(r16)
 8005904:	18fbffcc 	andi	r3,r3,61439
 8005908:	80c0030d 	sth	r3,12(r16)
 800590c:	dfc00117 	ldw	ra,4(sp)
 8005910:	dc000017 	ldw	r16,0(sp)
 8005914:	dec00204 	addi	sp,sp,8
 8005918:	f800283a 	ret

0800591c <__sclose>:
 800591c:	2940038f 	ldh	r5,14(r5)
 8005920:	8005ad81 	jmpi	8005ad8 <_close_r>

08005924 <_write_r>:
 8005924:	defffd04 	addi	sp,sp,-12
 8005928:	2805883a 	mov	r2,r5
 800592c:	dc000015 	stw	r16,0(sp)
 8005930:	04020074 	movhi	r16,2049
 8005934:	dc400115 	stw	r17,4(sp)
 8005938:	300b883a 	mov	r5,r6
 800593c:	8431c104 	addi	r16,r16,-14588
 8005940:	2023883a 	mov	r17,r4
 8005944:	380d883a 	mov	r6,r7
 8005948:	1009883a 	mov	r4,r2
 800594c:	dfc00215 	stw	ra,8(sp)
 8005950:	80000015 	stw	zero,0(r16)
 8005954:	80072ac0 	call	80072ac <write>
 8005958:	00ffffc4 	movi	r3,-1
 800595c:	10c00526 	beq	r2,r3,8005974 <_write_r+0x50>
 8005960:	dfc00217 	ldw	ra,8(sp)
 8005964:	dc400117 	ldw	r17,4(sp)
 8005968:	dc000017 	ldw	r16,0(sp)
 800596c:	dec00304 	addi	sp,sp,12
 8005970:	f800283a 	ret
 8005974:	80c00017 	ldw	r3,0(r16)
 8005978:	183ff926 	beq	r3,zero,8005960 <_write_r+0x3c>
 800597c:	88c00015 	stw	r3,0(r17)
 8005980:	003ff706 	br	8005960 <_write_r+0x3c>

08005984 <__swsetup_r>:
 8005984:	00820074 	movhi	r2,2049
 8005988:	defffd04 	addi	sp,sp,-12
 800598c:	10ab1704 	addi	r2,r2,-21412
 8005990:	dc400115 	stw	r17,4(sp)
 8005994:	2023883a 	mov	r17,r4
 8005998:	11000017 	ldw	r4,0(r2)
 800599c:	dc000015 	stw	r16,0(sp)
 80059a0:	dfc00215 	stw	ra,8(sp)
 80059a4:	2821883a 	mov	r16,r5
 80059a8:	20000226 	beq	r4,zero,80059b4 <__swsetup_r+0x30>
 80059ac:	20800e17 	ldw	r2,56(r4)
 80059b0:	10003126 	beq	r2,zero,8005a78 <__swsetup_r+0xf4>
 80059b4:	8080030b 	ldhu	r2,12(r16)
 80059b8:	10c0020c 	andi	r3,r2,8
 80059bc:	1009883a 	mov	r4,r2
 80059c0:	18000f26 	beq	r3,zero,8005a00 <__swsetup_r+0x7c>
 80059c4:	80c00417 	ldw	r3,16(r16)
 80059c8:	18001526 	beq	r3,zero,8005a20 <__swsetup_r+0x9c>
 80059cc:	1100004c 	andi	r4,r2,1
 80059d0:	20001c1e 	bne	r4,zero,8005a44 <__swsetup_r+0xc0>
 80059d4:	1080008c 	andi	r2,r2,2
 80059d8:	1000291e 	bne	r2,zero,8005a80 <__swsetup_r+0xfc>
 80059dc:	80800517 	ldw	r2,20(r16)
 80059e0:	80800215 	stw	r2,8(r16)
 80059e4:	18001c26 	beq	r3,zero,8005a58 <__swsetup_r+0xd4>
 80059e8:	0005883a 	mov	r2,zero
 80059ec:	dfc00217 	ldw	ra,8(sp)
 80059f0:	dc400117 	ldw	r17,4(sp)
 80059f4:	dc000017 	ldw	r16,0(sp)
 80059f8:	dec00304 	addi	sp,sp,12
 80059fc:	f800283a 	ret
 8005a00:	2080040c 	andi	r2,r4,16
 8005a04:	10002e26 	beq	r2,zero,8005ac0 <__swsetup_r+0x13c>
 8005a08:	2080010c 	andi	r2,r4,4
 8005a0c:	10001e1e 	bne	r2,zero,8005a88 <__swsetup_r+0x104>
 8005a10:	80c00417 	ldw	r3,16(r16)
 8005a14:	20800214 	ori	r2,r4,8
 8005a18:	8080030d 	sth	r2,12(r16)
 8005a1c:	183feb1e 	bne	r3,zero,80059cc <__swsetup_r+0x48>
 8005a20:	1100a00c 	andi	r4,r2,640
 8005a24:	01408004 	movi	r5,512
 8005a28:	217fe826 	beq	r4,r5,80059cc <__swsetup_r+0x48>
 8005a2c:	800b883a 	mov	r5,r16
 8005a30:	8809883a 	mov	r4,r17
 8005a34:	800636c0 	call	800636c <__smakebuf_r>
 8005a38:	8080030b 	ldhu	r2,12(r16)
 8005a3c:	80c00417 	ldw	r3,16(r16)
 8005a40:	003fe206 	br	80059cc <__swsetup_r+0x48>
 8005a44:	80800517 	ldw	r2,20(r16)
 8005a48:	80000215 	stw	zero,8(r16)
 8005a4c:	0085c83a 	sub	r2,zero,r2
 8005a50:	80800615 	stw	r2,24(r16)
 8005a54:	183fe41e 	bne	r3,zero,80059e8 <__swsetup_r+0x64>
 8005a58:	80c0030b 	ldhu	r3,12(r16)
 8005a5c:	0005883a 	mov	r2,zero
 8005a60:	1900200c 	andi	r4,r3,128
 8005a64:	203fe126 	beq	r4,zero,80059ec <__swsetup_r+0x68>
 8005a68:	18c01014 	ori	r3,r3,64
 8005a6c:	80c0030d 	sth	r3,12(r16)
 8005a70:	00bfffc4 	movi	r2,-1
 8005a74:	003fdd06 	br	80059ec <__swsetup_r+0x68>
 8005a78:	8003e840 	call	8003e84 <__sinit>
 8005a7c:	003fcd06 	br	80059b4 <__swsetup_r+0x30>
 8005a80:	0005883a 	mov	r2,zero
 8005a84:	003fd606 	br	80059e0 <__swsetup_r+0x5c>
 8005a88:	81400c17 	ldw	r5,48(r16)
 8005a8c:	28000626 	beq	r5,zero,8005aa8 <__swsetup_r+0x124>
 8005a90:	80801004 	addi	r2,r16,64
 8005a94:	28800326 	beq	r5,r2,8005aa4 <__swsetup_r+0x120>
 8005a98:	8809883a 	mov	r4,r17
 8005a9c:	8005ffc0 	call	8005ffc <_free_r>
 8005aa0:	8100030b 	ldhu	r4,12(r16)
 8005aa4:	80000c15 	stw	zero,48(r16)
 8005aa8:	80c00417 	ldw	r3,16(r16)
 8005aac:	00bff6c4 	movi	r2,-37
 8005ab0:	1108703a 	and	r4,r2,r4
 8005ab4:	80000115 	stw	zero,4(r16)
 8005ab8:	80c00015 	stw	r3,0(r16)
 8005abc:	003fd506 	br	8005a14 <__swsetup_r+0x90>
 8005ac0:	00800244 	movi	r2,9
 8005ac4:	88800015 	stw	r2,0(r17)
 8005ac8:	20801014 	ori	r2,r4,64
 8005acc:	8080030d 	sth	r2,12(r16)
 8005ad0:	00bfffc4 	movi	r2,-1
 8005ad4:	003fc506 	br	80059ec <__swsetup_r+0x68>

08005ad8 <_close_r>:
 8005ad8:	defffd04 	addi	sp,sp,-12
 8005adc:	dc000015 	stw	r16,0(sp)
 8005ae0:	04020074 	movhi	r16,2049
 8005ae4:	dc400115 	stw	r17,4(sp)
 8005ae8:	8431c104 	addi	r16,r16,-14588
 8005aec:	2023883a 	mov	r17,r4
 8005af0:	2809883a 	mov	r4,r5
 8005af4:	dfc00215 	stw	ra,8(sp)
 8005af8:	80000015 	stw	zero,0(r16)
 8005afc:	80066d40 	call	80066d4 <close>
 8005b00:	00ffffc4 	movi	r3,-1
 8005b04:	10c00526 	beq	r2,r3,8005b1c <_close_r+0x44>
 8005b08:	dfc00217 	ldw	ra,8(sp)
 8005b0c:	dc400117 	ldw	r17,4(sp)
 8005b10:	dc000017 	ldw	r16,0(sp)
 8005b14:	dec00304 	addi	sp,sp,12
 8005b18:	f800283a 	ret
 8005b1c:	80c00017 	ldw	r3,0(r16)
 8005b20:	183ff926 	beq	r3,zero,8005b08 <_close_r+0x30>
 8005b24:	88c00015 	stw	r3,0(r17)
 8005b28:	003ff706 	br	8005b08 <_close_r+0x30>

08005b2c <_fclose_r>:
 8005b2c:	28003926 	beq	r5,zero,8005c14 <_fclose_r+0xe8>
 8005b30:	defffc04 	addi	sp,sp,-16
 8005b34:	dc400115 	stw	r17,4(sp)
 8005b38:	dc000015 	stw	r16,0(sp)
 8005b3c:	dfc00315 	stw	ra,12(sp)
 8005b40:	dc800215 	stw	r18,8(sp)
 8005b44:	2023883a 	mov	r17,r4
 8005b48:	2821883a 	mov	r16,r5
 8005b4c:	20000226 	beq	r4,zero,8005b58 <_fclose_r+0x2c>
 8005b50:	20800e17 	ldw	r2,56(r4)
 8005b54:	10002726 	beq	r2,zero,8005bf4 <_fclose_r+0xc8>
 8005b58:	8080030f 	ldh	r2,12(r16)
 8005b5c:	1000071e 	bne	r2,zero,8005b7c <_fclose_r+0x50>
 8005b60:	0005883a 	mov	r2,zero
 8005b64:	dfc00317 	ldw	ra,12(sp)
 8005b68:	dc800217 	ldw	r18,8(sp)
 8005b6c:	dc400117 	ldw	r17,4(sp)
 8005b70:	dc000017 	ldw	r16,0(sp)
 8005b74:	dec00404 	addi	sp,sp,16
 8005b78:	f800283a 	ret
 8005b7c:	800b883a 	mov	r5,r16
 8005b80:	8809883a 	mov	r4,r17
 8005b84:	8005c300 	call	8005c30 <__sflush_r>
 8005b88:	1025883a 	mov	r18,r2
 8005b8c:	80800b17 	ldw	r2,44(r16)
 8005b90:	10000426 	beq	r2,zero,8005ba4 <_fclose_r+0x78>
 8005b94:	81400717 	ldw	r5,28(r16)
 8005b98:	8809883a 	mov	r4,r17
 8005b9c:	103ee83a 	callr	r2
 8005ba0:	10001616 	blt	r2,zero,8005bfc <_fclose_r+0xd0>
 8005ba4:	8080030b 	ldhu	r2,12(r16)
 8005ba8:	1080200c 	andi	r2,r2,128
 8005bac:	1000151e 	bne	r2,zero,8005c04 <_fclose_r+0xd8>
 8005bb0:	81400c17 	ldw	r5,48(r16)
 8005bb4:	28000526 	beq	r5,zero,8005bcc <_fclose_r+0xa0>
 8005bb8:	80801004 	addi	r2,r16,64
 8005bbc:	28800226 	beq	r5,r2,8005bc8 <_fclose_r+0x9c>
 8005bc0:	8809883a 	mov	r4,r17
 8005bc4:	8005ffc0 	call	8005ffc <_free_r>
 8005bc8:	80000c15 	stw	zero,48(r16)
 8005bcc:	81401117 	ldw	r5,68(r16)
 8005bd0:	28000326 	beq	r5,zero,8005be0 <_fclose_r+0xb4>
 8005bd4:	8809883a 	mov	r4,r17
 8005bd8:	8005ffc0 	call	8005ffc <_free_r>
 8005bdc:	80001115 	stw	zero,68(r16)
 8005be0:	8003e940 	call	8003e94 <__sfp_lock_acquire>
 8005be4:	8000030d 	sth	zero,12(r16)
 8005be8:	8003e980 	call	8003e98 <__sfp_lock_release>
 8005bec:	9005883a 	mov	r2,r18
 8005bf0:	003fdc06 	br	8005b64 <_fclose_r+0x38>
 8005bf4:	8003e840 	call	8003e84 <__sinit>
 8005bf8:	003fd706 	br	8005b58 <_fclose_r+0x2c>
 8005bfc:	04bfffc4 	movi	r18,-1
 8005c00:	003fe806 	br	8005ba4 <_fclose_r+0x78>
 8005c04:	81400417 	ldw	r5,16(r16)
 8005c08:	8809883a 	mov	r4,r17
 8005c0c:	8005ffc0 	call	8005ffc <_free_r>
 8005c10:	003fe706 	br	8005bb0 <_fclose_r+0x84>
 8005c14:	0005883a 	mov	r2,zero
 8005c18:	f800283a 	ret

08005c1c <fclose>:
 8005c1c:	00820074 	movhi	r2,2049
 8005c20:	10ab1704 	addi	r2,r2,-21412
 8005c24:	200b883a 	mov	r5,r4
 8005c28:	11000017 	ldw	r4,0(r2)
 8005c2c:	8005b2c1 	jmpi	8005b2c <_fclose_r>

08005c30 <__sflush_r>:
 8005c30:	2880030b 	ldhu	r2,12(r5)
 8005c34:	defffb04 	addi	sp,sp,-20
 8005c38:	dcc00315 	stw	r19,12(sp)
 8005c3c:	dc400115 	stw	r17,4(sp)
 8005c40:	dfc00415 	stw	ra,16(sp)
 8005c44:	dc800215 	stw	r18,8(sp)
 8005c48:	dc000015 	stw	r16,0(sp)
 8005c4c:	10c0020c 	andi	r3,r2,8
 8005c50:	2823883a 	mov	r17,r5
 8005c54:	2027883a 	mov	r19,r4
 8005c58:	1800311e 	bne	r3,zero,8005d20 <__sflush_r+0xf0>
 8005c5c:	28c00117 	ldw	r3,4(r5)
 8005c60:	10820014 	ori	r2,r2,2048
 8005c64:	2880030d 	sth	r2,12(r5)
 8005c68:	00c04b0e 	bge	zero,r3,8005d98 <__sflush_r+0x168>
 8005c6c:	8a000a17 	ldw	r8,40(r17)
 8005c70:	40002326 	beq	r8,zero,8005d00 <__sflush_r+0xd0>
 8005c74:	9c000017 	ldw	r16,0(r19)
 8005c78:	10c4000c 	andi	r3,r2,4096
 8005c7c:	98000015 	stw	zero,0(r19)
 8005c80:	18004826 	beq	r3,zero,8005da4 <__sflush_r+0x174>
 8005c84:	89801417 	ldw	r6,80(r17)
 8005c88:	10c0010c 	andi	r3,r2,4
 8005c8c:	18000626 	beq	r3,zero,8005ca8 <__sflush_r+0x78>
 8005c90:	88c00117 	ldw	r3,4(r17)
 8005c94:	88800c17 	ldw	r2,48(r17)
 8005c98:	30cdc83a 	sub	r6,r6,r3
 8005c9c:	10000226 	beq	r2,zero,8005ca8 <__sflush_r+0x78>
 8005ca0:	88800f17 	ldw	r2,60(r17)
 8005ca4:	308dc83a 	sub	r6,r6,r2
 8005ca8:	89400717 	ldw	r5,28(r17)
 8005cac:	000f883a 	mov	r7,zero
 8005cb0:	9809883a 	mov	r4,r19
 8005cb4:	403ee83a 	callr	r8
 8005cb8:	00ffffc4 	movi	r3,-1
 8005cbc:	10c04426 	beq	r2,r3,8005dd0 <__sflush_r+0x1a0>
 8005cc0:	88c0030b 	ldhu	r3,12(r17)
 8005cc4:	89000417 	ldw	r4,16(r17)
 8005cc8:	88000115 	stw	zero,4(r17)
 8005ccc:	197dffcc 	andi	r5,r3,63487
 8005cd0:	8940030d 	sth	r5,12(r17)
 8005cd4:	89000015 	stw	r4,0(r17)
 8005cd8:	18c4000c 	andi	r3,r3,4096
 8005cdc:	18002c1e 	bne	r3,zero,8005d90 <__sflush_r+0x160>
 8005ce0:	89400c17 	ldw	r5,48(r17)
 8005ce4:	9c000015 	stw	r16,0(r19)
 8005ce8:	28000526 	beq	r5,zero,8005d00 <__sflush_r+0xd0>
 8005cec:	88801004 	addi	r2,r17,64
 8005cf0:	28800226 	beq	r5,r2,8005cfc <__sflush_r+0xcc>
 8005cf4:	9809883a 	mov	r4,r19
 8005cf8:	8005ffc0 	call	8005ffc <_free_r>
 8005cfc:	88000c15 	stw	zero,48(r17)
 8005d00:	0005883a 	mov	r2,zero
 8005d04:	dfc00417 	ldw	ra,16(sp)
 8005d08:	dcc00317 	ldw	r19,12(sp)
 8005d0c:	dc800217 	ldw	r18,8(sp)
 8005d10:	dc400117 	ldw	r17,4(sp)
 8005d14:	dc000017 	ldw	r16,0(sp)
 8005d18:	dec00504 	addi	sp,sp,20
 8005d1c:	f800283a 	ret
 8005d20:	2c800417 	ldw	r18,16(r5)
 8005d24:	903ff626 	beq	r18,zero,8005d00 <__sflush_r+0xd0>
 8005d28:	2c000017 	ldw	r16,0(r5)
 8005d2c:	108000cc 	andi	r2,r2,3
 8005d30:	2c800015 	stw	r18,0(r5)
 8005d34:	84a1c83a 	sub	r16,r16,r18
 8005d38:	1000131e 	bne	r2,zero,8005d88 <__sflush_r+0x158>
 8005d3c:	28800517 	ldw	r2,20(r5)
 8005d40:	88800215 	stw	r2,8(r17)
 8005d44:	04000316 	blt	zero,r16,8005d54 <__sflush_r+0x124>
 8005d48:	003fed06 	br	8005d00 <__sflush_r+0xd0>
 8005d4c:	90a5883a 	add	r18,r18,r2
 8005d50:	043feb0e 	bge	zero,r16,8005d00 <__sflush_r+0xd0>
 8005d54:	88800917 	ldw	r2,36(r17)
 8005d58:	89400717 	ldw	r5,28(r17)
 8005d5c:	800f883a 	mov	r7,r16
 8005d60:	900d883a 	mov	r6,r18
 8005d64:	9809883a 	mov	r4,r19
 8005d68:	103ee83a 	callr	r2
 8005d6c:	80a1c83a 	sub	r16,r16,r2
 8005d70:	00bff616 	blt	zero,r2,8005d4c <__sflush_r+0x11c>
 8005d74:	88c0030b 	ldhu	r3,12(r17)
 8005d78:	00bfffc4 	movi	r2,-1
 8005d7c:	18c01014 	ori	r3,r3,64
 8005d80:	88c0030d 	sth	r3,12(r17)
 8005d84:	003fdf06 	br	8005d04 <__sflush_r+0xd4>
 8005d88:	0005883a 	mov	r2,zero
 8005d8c:	003fec06 	br	8005d40 <__sflush_r+0x110>
 8005d90:	88801415 	stw	r2,80(r17)
 8005d94:	003fd206 	br	8005ce0 <__sflush_r+0xb0>
 8005d98:	28c00f17 	ldw	r3,60(r5)
 8005d9c:	00ffb316 	blt	zero,r3,8005c6c <__sflush_r+0x3c>
 8005da0:	003fd706 	br	8005d00 <__sflush_r+0xd0>
 8005da4:	89400717 	ldw	r5,28(r17)
 8005da8:	000d883a 	mov	r6,zero
 8005dac:	01c00044 	movi	r7,1
 8005db0:	9809883a 	mov	r4,r19
 8005db4:	403ee83a 	callr	r8
 8005db8:	100d883a 	mov	r6,r2
 8005dbc:	00bfffc4 	movi	r2,-1
 8005dc0:	30801426 	beq	r6,r2,8005e14 <__sflush_r+0x1e4>
 8005dc4:	8880030b 	ldhu	r2,12(r17)
 8005dc8:	8a000a17 	ldw	r8,40(r17)
 8005dcc:	003fae06 	br	8005c88 <__sflush_r+0x58>
 8005dd0:	98c00017 	ldw	r3,0(r19)
 8005dd4:	183fba26 	beq	r3,zero,8005cc0 <__sflush_r+0x90>
 8005dd8:	01000744 	movi	r4,29
 8005ddc:	19000626 	beq	r3,r4,8005df8 <__sflush_r+0x1c8>
 8005de0:	01000584 	movi	r4,22
 8005de4:	19000426 	beq	r3,r4,8005df8 <__sflush_r+0x1c8>
 8005de8:	88c0030b 	ldhu	r3,12(r17)
 8005dec:	18c01014 	ori	r3,r3,64
 8005df0:	88c0030d 	sth	r3,12(r17)
 8005df4:	003fc306 	br	8005d04 <__sflush_r+0xd4>
 8005df8:	8880030b 	ldhu	r2,12(r17)
 8005dfc:	88c00417 	ldw	r3,16(r17)
 8005e00:	88000115 	stw	zero,4(r17)
 8005e04:	10bdffcc 	andi	r2,r2,63487
 8005e08:	8880030d 	sth	r2,12(r17)
 8005e0c:	88c00015 	stw	r3,0(r17)
 8005e10:	003fb306 	br	8005ce0 <__sflush_r+0xb0>
 8005e14:	98800017 	ldw	r2,0(r19)
 8005e18:	103fea26 	beq	r2,zero,8005dc4 <__sflush_r+0x194>
 8005e1c:	00c00744 	movi	r3,29
 8005e20:	10c00226 	beq	r2,r3,8005e2c <__sflush_r+0x1fc>
 8005e24:	00c00584 	movi	r3,22
 8005e28:	10c0031e 	bne	r2,r3,8005e38 <__sflush_r+0x208>
 8005e2c:	9c000015 	stw	r16,0(r19)
 8005e30:	0005883a 	mov	r2,zero
 8005e34:	003fb306 	br	8005d04 <__sflush_r+0xd4>
 8005e38:	88c0030b 	ldhu	r3,12(r17)
 8005e3c:	3005883a 	mov	r2,r6
 8005e40:	18c01014 	ori	r3,r3,64
 8005e44:	88c0030d 	sth	r3,12(r17)
 8005e48:	003fae06 	br	8005d04 <__sflush_r+0xd4>

08005e4c <_fflush_r>:
 8005e4c:	defffd04 	addi	sp,sp,-12
 8005e50:	dc000115 	stw	r16,4(sp)
 8005e54:	dfc00215 	stw	ra,8(sp)
 8005e58:	2021883a 	mov	r16,r4
 8005e5c:	20000226 	beq	r4,zero,8005e68 <_fflush_r+0x1c>
 8005e60:	20800e17 	ldw	r2,56(r4)
 8005e64:	10000c26 	beq	r2,zero,8005e98 <_fflush_r+0x4c>
 8005e68:	2880030f 	ldh	r2,12(r5)
 8005e6c:	1000051e 	bne	r2,zero,8005e84 <_fflush_r+0x38>
 8005e70:	0005883a 	mov	r2,zero
 8005e74:	dfc00217 	ldw	ra,8(sp)
 8005e78:	dc000117 	ldw	r16,4(sp)
 8005e7c:	dec00304 	addi	sp,sp,12
 8005e80:	f800283a 	ret
 8005e84:	8009883a 	mov	r4,r16
 8005e88:	dfc00217 	ldw	ra,8(sp)
 8005e8c:	dc000117 	ldw	r16,4(sp)
 8005e90:	dec00304 	addi	sp,sp,12
 8005e94:	8005c301 	jmpi	8005c30 <__sflush_r>
 8005e98:	d9400015 	stw	r5,0(sp)
 8005e9c:	8003e840 	call	8003e84 <__sinit>
 8005ea0:	d9400017 	ldw	r5,0(sp)
 8005ea4:	003ff006 	br	8005e68 <_fflush_r+0x1c>

08005ea8 <fflush>:
 8005ea8:	20000526 	beq	r4,zero,8005ec0 <fflush+0x18>
 8005eac:	00820074 	movhi	r2,2049
 8005eb0:	10ab1704 	addi	r2,r2,-21412
 8005eb4:	200b883a 	mov	r5,r4
 8005eb8:	11000017 	ldw	r4,0(r2)
 8005ebc:	8005e4c1 	jmpi	8005e4c <_fflush_r>
 8005ec0:	00820074 	movhi	r2,2049
 8005ec4:	10ab1604 	addi	r2,r2,-21416
 8005ec8:	11000017 	ldw	r4,0(r2)
 8005ecc:	01420034 	movhi	r5,2048
 8005ed0:	29579304 	addi	r5,r5,24140
 8005ed4:	80044541 	jmpi	8004454 <_fwalk_reent>

08005ed8 <_malloc_trim_r>:
 8005ed8:	defffb04 	addi	sp,sp,-20
 8005edc:	dcc00315 	stw	r19,12(sp)
 8005ee0:	04c20074 	movhi	r19,2049
 8005ee4:	dc800215 	stw	r18,8(sp)
 8005ee8:	dc400115 	stw	r17,4(sp)
 8005eec:	dc000015 	stw	r16,0(sp)
 8005ef0:	dfc00415 	stw	ra,16(sp)
 8005ef4:	2821883a 	mov	r16,r5
 8005ef8:	9ce59004 	addi	r19,r19,-27072
 8005efc:	2025883a 	mov	r18,r4
 8005f00:	8006e080 	call	8006e08 <__malloc_lock>
 8005f04:	98800217 	ldw	r2,8(r19)
 8005f08:	14400117 	ldw	r17,4(r2)
 8005f0c:	00bfff04 	movi	r2,-4
 8005f10:	88a2703a 	and	r17,r17,r2
 8005f14:	8c21c83a 	sub	r16,r17,r16
 8005f18:	8403fbc4 	addi	r16,r16,4079
 8005f1c:	8020d33a 	srli	r16,r16,12
 8005f20:	0083ffc4 	movi	r2,4095
 8005f24:	843fffc4 	addi	r16,r16,-1
 8005f28:	8020933a 	slli	r16,r16,12
 8005f2c:	1400060e 	bge	r2,r16,8005f48 <_malloc_trim_r+0x70>
 8005f30:	000b883a 	mov	r5,zero
 8005f34:	9009883a 	mov	r4,r18
 8005f38:	80057940 	call	8005794 <_sbrk_r>
 8005f3c:	98c00217 	ldw	r3,8(r19)
 8005f40:	1c47883a 	add	r3,r3,r17
 8005f44:	10c00a26 	beq	r2,r3,8005f70 <_malloc_trim_r+0x98>
 8005f48:	9009883a 	mov	r4,r18
 8005f4c:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8005f50:	0005883a 	mov	r2,zero
 8005f54:	dfc00417 	ldw	ra,16(sp)
 8005f58:	dcc00317 	ldw	r19,12(sp)
 8005f5c:	dc800217 	ldw	r18,8(sp)
 8005f60:	dc400117 	ldw	r17,4(sp)
 8005f64:	dc000017 	ldw	r16,0(sp)
 8005f68:	dec00504 	addi	sp,sp,20
 8005f6c:	f800283a 	ret
 8005f70:	040bc83a 	sub	r5,zero,r16
 8005f74:	9009883a 	mov	r4,r18
 8005f78:	80057940 	call	8005794 <_sbrk_r>
 8005f7c:	00ffffc4 	movi	r3,-1
 8005f80:	10c00d26 	beq	r2,r3,8005fb8 <_malloc_trim_r+0xe0>
 8005f84:	00c20074 	movhi	r3,2049
 8005f88:	18f1d004 	addi	r3,r3,-14528
 8005f8c:	18800017 	ldw	r2,0(r3)
 8005f90:	99000217 	ldw	r4,8(r19)
 8005f94:	8c23c83a 	sub	r17,r17,r16
 8005f98:	8c400054 	ori	r17,r17,1
 8005f9c:	1421c83a 	sub	r16,r2,r16
 8005fa0:	24400115 	stw	r17,4(r4)
 8005fa4:	9009883a 	mov	r4,r18
 8005fa8:	1c000015 	stw	r16,0(r3)
 8005fac:	8006e2c0 	call	8006e2c <__malloc_unlock>
 8005fb0:	00800044 	movi	r2,1
 8005fb4:	003fe706 	br	8005f54 <_malloc_trim_r+0x7c>
 8005fb8:	000b883a 	mov	r5,zero
 8005fbc:	9009883a 	mov	r4,r18
 8005fc0:	80057940 	call	8005794 <_sbrk_r>
 8005fc4:	99000217 	ldw	r4,8(r19)
 8005fc8:	014003c4 	movi	r5,15
 8005fcc:	1107c83a 	sub	r3,r2,r4
 8005fd0:	28ffdd0e 	bge	r5,r3,8005f48 <_malloc_trim_r+0x70>
 8005fd4:	01420074 	movhi	r5,2049
 8005fd8:	296b1804 	addi	r5,r5,-21408
 8005fdc:	29400017 	ldw	r5,0(r5)
 8005fe0:	18c00054 	ori	r3,r3,1
 8005fe4:	20c00115 	stw	r3,4(r4)
 8005fe8:	00c20074 	movhi	r3,2049
 8005fec:	1145c83a 	sub	r2,r2,r5
 8005ff0:	18f1d004 	addi	r3,r3,-14528
 8005ff4:	18800015 	stw	r2,0(r3)
 8005ff8:	003fd306 	br	8005f48 <_malloc_trim_r+0x70>

08005ffc <_free_r>:
 8005ffc:	28004126 	beq	r5,zero,8006104 <_free_r+0x108>
 8006000:	defffd04 	addi	sp,sp,-12
 8006004:	dc400115 	stw	r17,4(sp)
 8006008:	dc000015 	stw	r16,0(sp)
 800600c:	2023883a 	mov	r17,r4
 8006010:	2821883a 	mov	r16,r5
 8006014:	dfc00215 	stw	ra,8(sp)
 8006018:	8006e080 	call	8006e08 <__malloc_lock>
 800601c:	81ffff17 	ldw	r7,-4(r16)
 8006020:	00bfff84 	movi	r2,-2
 8006024:	01020074 	movhi	r4,2049
 8006028:	81bffe04 	addi	r6,r16,-8
 800602c:	3884703a 	and	r2,r7,r2
 8006030:	21259004 	addi	r4,r4,-27072
 8006034:	308b883a 	add	r5,r6,r2
 8006038:	2a400117 	ldw	r9,4(r5)
 800603c:	22000217 	ldw	r8,8(r4)
 8006040:	00ffff04 	movi	r3,-4
 8006044:	48c6703a 	and	r3,r9,r3
 8006048:	2a005726 	beq	r5,r8,80061a8 <_free_r+0x1ac>
 800604c:	28c00115 	stw	r3,4(r5)
 8006050:	39c0004c 	andi	r7,r7,1
 8006054:	3800091e 	bne	r7,zero,800607c <_free_r+0x80>
 8006058:	823ffe17 	ldw	r8,-8(r16)
 800605c:	22400204 	addi	r9,r4,8
 8006060:	320dc83a 	sub	r6,r6,r8
 8006064:	31c00217 	ldw	r7,8(r6)
 8006068:	1205883a 	add	r2,r2,r8
 800606c:	3a406526 	beq	r7,r9,8006204 <_free_r+0x208>
 8006070:	32000317 	ldw	r8,12(r6)
 8006074:	3a000315 	stw	r8,12(r7)
 8006078:	41c00215 	stw	r7,8(r8)
 800607c:	28cf883a 	add	r7,r5,r3
 8006080:	39c00117 	ldw	r7,4(r7)
 8006084:	39c0004c 	andi	r7,r7,1
 8006088:	38003a26 	beq	r7,zero,8006174 <_free_r+0x178>
 800608c:	10c00054 	ori	r3,r2,1
 8006090:	30c00115 	stw	r3,4(r6)
 8006094:	3087883a 	add	r3,r6,r2
 8006098:	18800015 	stw	r2,0(r3)
 800609c:	00c07fc4 	movi	r3,511
 80060a0:	18801936 	bltu	r3,r2,8006108 <_free_r+0x10c>
 80060a4:	1004d0fa 	srli	r2,r2,3
 80060a8:	01c00044 	movi	r7,1
 80060ac:	21400117 	ldw	r5,4(r4)
 80060b0:	10c00044 	addi	r3,r2,1
 80060b4:	18c7883a 	add	r3,r3,r3
 80060b8:	1005d0ba 	srai	r2,r2,2
 80060bc:	18c7883a 	add	r3,r3,r3
 80060c0:	18c7883a 	add	r3,r3,r3
 80060c4:	1907883a 	add	r3,r3,r4
 80060c8:	3884983a 	sll	r2,r7,r2
 80060cc:	19c00017 	ldw	r7,0(r3)
 80060d0:	1a3ffe04 	addi	r8,r3,-8
 80060d4:	1144b03a 	or	r2,r2,r5
 80060d8:	32000315 	stw	r8,12(r6)
 80060dc:	31c00215 	stw	r7,8(r6)
 80060e0:	20800115 	stw	r2,4(r4)
 80060e4:	19800015 	stw	r6,0(r3)
 80060e8:	39800315 	stw	r6,12(r7)
 80060ec:	8809883a 	mov	r4,r17
 80060f0:	dfc00217 	ldw	ra,8(sp)
 80060f4:	dc400117 	ldw	r17,4(sp)
 80060f8:	dc000017 	ldw	r16,0(sp)
 80060fc:	dec00304 	addi	sp,sp,12
 8006100:	8006e2c1 	jmpi	8006e2c <__malloc_unlock>
 8006104:	f800283a 	ret
 8006108:	100ad27a 	srli	r5,r2,9
 800610c:	00c00104 	movi	r3,4
 8006110:	19404a36 	bltu	r3,r5,800623c <_free_r+0x240>
 8006114:	100ad1ba 	srli	r5,r2,6
 8006118:	28c00e44 	addi	r3,r5,57
 800611c:	18c7883a 	add	r3,r3,r3
 8006120:	29400e04 	addi	r5,r5,56
 8006124:	18c7883a 	add	r3,r3,r3
 8006128:	18c7883a 	add	r3,r3,r3
 800612c:	1909883a 	add	r4,r3,r4
 8006130:	20c00017 	ldw	r3,0(r4)
 8006134:	01c20074 	movhi	r7,2049
 8006138:	213ffe04 	addi	r4,r4,-8
 800613c:	39e59004 	addi	r7,r7,-27072
 8006140:	20c04426 	beq	r4,r3,8006254 <_free_r+0x258>
 8006144:	01ffff04 	movi	r7,-4
 8006148:	19400117 	ldw	r5,4(r3)
 800614c:	29ca703a 	and	r5,r5,r7
 8006150:	1140022e 	bgeu	r2,r5,800615c <_free_r+0x160>
 8006154:	18c00217 	ldw	r3,8(r3)
 8006158:	20fffb1e 	bne	r4,r3,8006148 <_free_r+0x14c>
 800615c:	19000317 	ldw	r4,12(r3)
 8006160:	31000315 	stw	r4,12(r6)
 8006164:	30c00215 	stw	r3,8(r6)
 8006168:	21800215 	stw	r6,8(r4)
 800616c:	19800315 	stw	r6,12(r3)
 8006170:	003fde06 	br	80060ec <_free_r+0xf0>
 8006174:	29c00217 	ldw	r7,8(r5)
 8006178:	10c5883a 	add	r2,r2,r3
 800617c:	00c20074 	movhi	r3,2049
 8006180:	18e59204 	addi	r3,r3,-27064
 8006184:	38c03b26 	beq	r7,r3,8006274 <_free_r+0x278>
 8006188:	2a000317 	ldw	r8,12(r5)
 800618c:	11400054 	ori	r5,r2,1
 8006190:	3087883a 	add	r3,r6,r2
 8006194:	3a000315 	stw	r8,12(r7)
 8006198:	41c00215 	stw	r7,8(r8)
 800619c:	31400115 	stw	r5,4(r6)
 80061a0:	18800015 	stw	r2,0(r3)
 80061a4:	003fbd06 	br	800609c <_free_r+0xa0>
 80061a8:	39c0004c 	andi	r7,r7,1
 80061ac:	10c5883a 	add	r2,r2,r3
 80061b0:	3800071e 	bne	r7,zero,80061d0 <_free_r+0x1d4>
 80061b4:	81fffe17 	ldw	r7,-8(r16)
 80061b8:	31cdc83a 	sub	r6,r6,r7
 80061bc:	30c00317 	ldw	r3,12(r6)
 80061c0:	31400217 	ldw	r5,8(r6)
 80061c4:	11c5883a 	add	r2,r2,r7
 80061c8:	28c00315 	stw	r3,12(r5)
 80061cc:	19400215 	stw	r5,8(r3)
 80061d0:	10c00054 	ori	r3,r2,1
 80061d4:	30c00115 	stw	r3,4(r6)
 80061d8:	00c20074 	movhi	r3,2049
 80061dc:	18eb1904 	addi	r3,r3,-21404
 80061e0:	18c00017 	ldw	r3,0(r3)
 80061e4:	21800215 	stw	r6,8(r4)
 80061e8:	10ffc036 	bltu	r2,r3,80060ec <_free_r+0xf0>
 80061ec:	00820074 	movhi	r2,2049
 80061f0:	10b1c404 	addi	r2,r2,-14576
 80061f4:	11400017 	ldw	r5,0(r2)
 80061f8:	8809883a 	mov	r4,r17
 80061fc:	8005ed80 	call	8005ed8 <_malloc_trim_r>
 8006200:	003fba06 	br	80060ec <_free_r+0xf0>
 8006204:	28c9883a 	add	r4,r5,r3
 8006208:	21000117 	ldw	r4,4(r4)
 800620c:	2100004c 	andi	r4,r4,1
 8006210:	2000391e 	bne	r4,zero,80062f8 <_free_r+0x2fc>
 8006214:	29c00217 	ldw	r7,8(r5)
 8006218:	29000317 	ldw	r4,12(r5)
 800621c:	1885883a 	add	r2,r3,r2
 8006220:	10c00054 	ori	r3,r2,1
 8006224:	39000315 	stw	r4,12(r7)
 8006228:	21c00215 	stw	r7,8(r4)
 800622c:	30c00115 	stw	r3,4(r6)
 8006230:	308d883a 	add	r6,r6,r2
 8006234:	30800015 	stw	r2,0(r6)
 8006238:	003fac06 	br	80060ec <_free_r+0xf0>
 800623c:	00c00504 	movi	r3,20
 8006240:	19401536 	bltu	r3,r5,8006298 <_free_r+0x29c>
 8006244:	28c01704 	addi	r3,r5,92
 8006248:	18c7883a 	add	r3,r3,r3
 800624c:	294016c4 	addi	r5,r5,91
 8006250:	003fb406 	br	8006124 <_free_r+0x128>
 8006254:	280bd0ba 	srai	r5,r5,2
 8006258:	00c00044 	movi	r3,1
 800625c:	38800117 	ldw	r2,4(r7)
 8006260:	194a983a 	sll	r5,r3,r5
 8006264:	2007883a 	mov	r3,r4
 8006268:	2884b03a 	or	r2,r5,r2
 800626c:	38800115 	stw	r2,4(r7)
 8006270:	003fbb06 	br	8006160 <_free_r+0x164>
 8006274:	21800515 	stw	r6,20(r4)
 8006278:	21800415 	stw	r6,16(r4)
 800627c:	10c00054 	ori	r3,r2,1
 8006280:	31c00315 	stw	r7,12(r6)
 8006284:	31c00215 	stw	r7,8(r6)
 8006288:	30c00115 	stw	r3,4(r6)
 800628c:	308d883a 	add	r6,r6,r2
 8006290:	30800015 	stw	r2,0(r6)
 8006294:	003f9506 	br	80060ec <_free_r+0xf0>
 8006298:	00c01504 	movi	r3,84
 800629c:	19400536 	bltu	r3,r5,80062b4 <_free_r+0x2b8>
 80062a0:	100ad33a 	srli	r5,r2,12
 80062a4:	28c01bc4 	addi	r3,r5,111
 80062a8:	18c7883a 	add	r3,r3,r3
 80062ac:	29401b84 	addi	r5,r5,110
 80062b0:	003f9c06 	br	8006124 <_free_r+0x128>
 80062b4:	00c05504 	movi	r3,340
 80062b8:	19400536 	bltu	r3,r5,80062d0 <_free_r+0x2d4>
 80062bc:	100ad3fa 	srli	r5,r2,15
 80062c0:	28c01e04 	addi	r3,r5,120
 80062c4:	18c7883a 	add	r3,r3,r3
 80062c8:	29401dc4 	addi	r5,r5,119
 80062cc:	003f9506 	br	8006124 <_free_r+0x128>
 80062d0:	00c15504 	movi	r3,1364
 80062d4:	19400536 	bltu	r3,r5,80062ec <_free_r+0x2f0>
 80062d8:	100ad4ba 	srli	r5,r2,18
 80062dc:	28c01f44 	addi	r3,r5,125
 80062e0:	18c7883a 	add	r3,r3,r3
 80062e4:	29401f04 	addi	r5,r5,124
 80062e8:	003f8e06 	br	8006124 <_free_r+0x128>
 80062ec:	00c03f84 	movi	r3,254
 80062f0:	01401f84 	movi	r5,126
 80062f4:	003f8b06 	br	8006124 <_free_r+0x128>
 80062f8:	10c00054 	ori	r3,r2,1
 80062fc:	30c00115 	stw	r3,4(r6)
 8006300:	308d883a 	add	r6,r6,r2
 8006304:	30800015 	stw	r2,0(r6)
 8006308:	003f7806 	br	80060ec <_free_r+0xf0>

0800630c <_lseek_r>:
 800630c:	defffd04 	addi	sp,sp,-12
 8006310:	2805883a 	mov	r2,r5
 8006314:	dc000015 	stw	r16,0(sp)
 8006318:	04020074 	movhi	r16,2049
 800631c:	dc400115 	stw	r17,4(sp)
 8006320:	300b883a 	mov	r5,r6
 8006324:	8431c104 	addi	r16,r16,-14588
 8006328:	2023883a 	mov	r17,r4
 800632c:	380d883a 	mov	r6,r7
 8006330:	1009883a 	mov	r4,r2
 8006334:	dfc00215 	stw	ra,8(sp)
 8006338:	80000015 	stw	zero,0(r16)
 800633c:	8006cb80 	call	8006cb8 <lseek>
 8006340:	00ffffc4 	movi	r3,-1
 8006344:	10c00526 	beq	r2,r3,800635c <_lseek_r+0x50>
 8006348:	dfc00217 	ldw	ra,8(sp)
 800634c:	dc400117 	ldw	r17,4(sp)
 8006350:	dc000017 	ldw	r16,0(sp)
 8006354:	dec00304 	addi	sp,sp,12
 8006358:	f800283a 	ret
 800635c:	80c00017 	ldw	r3,0(r16)
 8006360:	183ff926 	beq	r3,zero,8006348 <_lseek_r+0x3c>
 8006364:	88c00015 	stw	r3,0(r17)
 8006368:	003ff706 	br	8006348 <_lseek_r+0x3c>

0800636c <__smakebuf_r>:
 800636c:	2880030b 	ldhu	r2,12(r5)
 8006370:	10c0008c 	andi	r3,r2,2
 8006374:	1800411e 	bne	r3,zero,800647c <__smakebuf_r+0x110>
 8006378:	deffec04 	addi	sp,sp,-80
 800637c:	dc000f15 	stw	r16,60(sp)
 8006380:	2821883a 	mov	r16,r5
 8006384:	2940038f 	ldh	r5,14(r5)
 8006388:	dc401015 	stw	r17,64(sp)
 800638c:	dfc01315 	stw	ra,76(sp)
 8006390:	dcc01215 	stw	r19,72(sp)
 8006394:	dc801115 	stw	r18,68(sp)
 8006398:	2023883a 	mov	r17,r4
 800639c:	28001c16 	blt	r5,zero,8006410 <__smakebuf_r+0xa4>
 80063a0:	d80d883a 	mov	r6,sp
 80063a4:	80065880 	call	8006588 <_fstat_r>
 80063a8:	10001816 	blt	r2,zero,800640c <__smakebuf_r+0xa0>
 80063ac:	d8800117 	ldw	r2,4(sp)
 80063b0:	00e00014 	movui	r3,32768
 80063b4:	10bc000c 	andi	r2,r2,61440
 80063b8:	14c80020 	cmpeqi	r19,r2,8192
 80063bc:	10c03726 	beq	r2,r3,800649c <__smakebuf_r+0x130>
 80063c0:	80c0030b 	ldhu	r3,12(r16)
 80063c4:	18c20014 	ori	r3,r3,2048
 80063c8:	80c0030d 	sth	r3,12(r16)
 80063cc:	00c80004 	movi	r3,8192
 80063d0:	10c0521e 	bne	r2,r3,800651c <__smakebuf_r+0x1b0>
 80063d4:	8140038f 	ldh	r5,14(r16)
 80063d8:	8809883a 	mov	r4,r17
 80063dc:	80065e40 	call	80065e4 <_isatty_r>
 80063e0:	10004c26 	beq	r2,zero,8006514 <__smakebuf_r+0x1a8>
 80063e4:	8080030b 	ldhu	r2,12(r16)
 80063e8:	80c010c4 	addi	r3,r16,67
 80063ec:	80c00015 	stw	r3,0(r16)
 80063f0:	10800054 	ori	r2,r2,1
 80063f4:	8080030d 	sth	r2,12(r16)
 80063f8:	00800044 	movi	r2,1
 80063fc:	80c00415 	stw	r3,16(r16)
 8006400:	80800515 	stw	r2,20(r16)
 8006404:	04810004 	movi	r18,1024
 8006408:	00000706 	br	8006428 <__smakebuf_r+0xbc>
 800640c:	8080030b 	ldhu	r2,12(r16)
 8006410:	10c0200c 	andi	r3,r2,128
 8006414:	18001f1e 	bne	r3,zero,8006494 <__smakebuf_r+0x128>
 8006418:	04810004 	movi	r18,1024
 800641c:	10820014 	ori	r2,r2,2048
 8006420:	8080030d 	sth	r2,12(r16)
 8006424:	0027883a 	mov	r19,zero
 8006428:	900b883a 	mov	r5,r18
 800642c:	8809883a 	mov	r4,r17
 8006430:	80045740 	call	8004574 <_malloc_r>
 8006434:	10002c26 	beq	r2,zero,80064e8 <__smakebuf_r+0x17c>
 8006438:	80c0030b 	ldhu	r3,12(r16)
 800643c:	01020034 	movhi	r4,2048
 8006440:	210ecf04 	addi	r4,r4,15164
 8006444:	89000f15 	stw	r4,60(r17)
 8006448:	18c02014 	ori	r3,r3,128
 800644c:	80c0030d 	sth	r3,12(r16)
 8006450:	80800015 	stw	r2,0(r16)
 8006454:	80800415 	stw	r2,16(r16)
 8006458:	84800515 	stw	r18,20(r16)
 800645c:	98001a1e 	bne	r19,zero,80064c8 <__smakebuf_r+0x15c>
 8006460:	dfc01317 	ldw	ra,76(sp)
 8006464:	dcc01217 	ldw	r19,72(sp)
 8006468:	dc801117 	ldw	r18,68(sp)
 800646c:	dc401017 	ldw	r17,64(sp)
 8006470:	dc000f17 	ldw	r16,60(sp)
 8006474:	dec01404 	addi	sp,sp,80
 8006478:	f800283a 	ret
 800647c:	288010c4 	addi	r2,r5,67
 8006480:	28800015 	stw	r2,0(r5)
 8006484:	28800415 	stw	r2,16(r5)
 8006488:	00800044 	movi	r2,1
 800648c:	28800515 	stw	r2,20(r5)
 8006490:	f800283a 	ret
 8006494:	04801004 	movi	r18,64
 8006498:	003fe006 	br	800641c <__smakebuf_r+0xb0>
 800649c:	81000a17 	ldw	r4,40(r16)
 80064a0:	00c20034 	movhi	r3,2048
 80064a4:	18d63004 	addi	r3,r3,22720
 80064a8:	20ffc51e 	bne	r4,r3,80063c0 <__smakebuf_r+0x54>
 80064ac:	8080030b 	ldhu	r2,12(r16)
 80064b0:	04810004 	movi	r18,1024
 80064b4:	84801315 	stw	r18,76(r16)
 80064b8:	1484b03a 	or	r2,r2,r18
 80064bc:	8080030d 	sth	r2,12(r16)
 80064c0:	0027883a 	mov	r19,zero
 80064c4:	003fd806 	br	8006428 <__smakebuf_r+0xbc>
 80064c8:	8140038f 	ldh	r5,14(r16)
 80064cc:	8809883a 	mov	r4,r17
 80064d0:	80065e40 	call	80065e4 <_isatty_r>
 80064d4:	103fe226 	beq	r2,zero,8006460 <__smakebuf_r+0xf4>
 80064d8:	8080030b 	ldhu	r2,12(r16)
 80064dc:	10800054 	ori	r2,r2,1
 80064e0:	8080030d 	sth	r2,12(r16)
 80064e4:	003fde06 	br	8006460 <__smakebuf_r+0xf4>
 80064e8:	8080030b 	ldhu	r2,12(r16)
 80064ec:	10c0800c 	andi	r3,r2,512
 80064f0:	183fdb1e 	bne	r3,zero,8006460 <__smakebuf_r+0xf4>
 80064f4:	10800094 	ori	r2,r2,2
 80064f8:	80c010c4 	addi	r3,r16,67
 80064fc:	8080030d 	sth	r2,12(r16)
 8006500:	00800044 	movi	r2,1
 8006504:	80c00015 	stw	r3,0(r16)
 8006508:	80c00415 	stw	r3,16(r16)
 800650c:	80800515 	stw	r2,20(r16)
 8006510:	003fd306 	br	8006460 <__smakebuf_r+0xf4>
 8006514:	04810004 	movi	r18,1024
 8006518:	003fc306 	br	8006428 <__smakebuf_r+0xbc>
 800651c:	0027883a 	mov	r19,zero
 8006520:	04810004 	movi	r18,1024
 8006524:	003fc006 	br	8006428 <__smakebuf_r+0xbc>

08006528 <_read_r>:
 8006528:	defffd04 	addi	sp,sp,-12
 800652c:	2805883a 	mov	r2,r5
 8006530:	dc000015 	stw	r16,0(sp)
 8006534:	04020074 	movhi	r16,2049
 8006538:	dc400115 	stw	r17,4(sp)
 800653c:	300b883a 	mov	r5,r6
 8006540:	8431c104 	addi	r16,r16,-14588
 8006544:	2023883a 	mov	r17,r4
 8006548:	380d883a 	mov	r6,r7
 800654c:	1009883a 	mov	r4,r2
 8006550:	dfc00215 	stw	ra,8(sp)
 8006554:	80000015 	stw	zero,0(r16)
 8006558:	8006e8c0 	call	8006e8c <read>
 800655c:	00ffffc4 	movi	r3,-1
 8006560:	10c00526 	beq	r2,r3,8006578 <_read_r+0x50>
 8006564:	dfc00217 	ldw	ra,8(sp)
 8006568:	dc400117 	ldw	r17,4(sp)
 800656c:	dc000017 	ldw	r16,0(sp)
 8006570:	dec00304 	addi	sp,sp,12
 8006574:	f800283a 	ret
 8006578:	80c00017 	ldw	r3,0(r16)
 800657c:	183ff926 	beq	r3,zero,8006564 <_read_r+0x3c>
 8006580:	88c00015 	stw	r3,0(r17)
 8006584:	003ff706 	br	8006564 <_read_r+0x3c>

08006588 <_fstat_r>:
 8006588:	defffd04 	addi	sp,sp,-12
 800658c:	2805883a 	mov	r2,r5
 8006590:	dc000015 	stw	r16,0(sp)
 8006594:	04020074 	movhi	r16,2049
 8006598:	dc400115 	stw	r17,4(sp)
 800659c:	8431c104 	addi	r16,r16,-14588
 80065a0:	2023883a 	mov	r17,r4
 80065a4:	300b883a 	mov	r5,r6
 80065a8:	1009883a 	mov	r4,r2
 80065ac:	dfc00215 	stw	ra,8(sp)
 80065b0:	80000015 	stw	zero,0(r16)
 80065b4:	800680c0 	call	800680c <fstat>
 80065b8:	00ffffc4 	movi	r3,-1
 80065bc:	10c00526 	beq	r2,r3,80065d4 <_fstat_r+0x4c>
 80065c0:	dfc00217 	ldw	ra,8(sp)
 80065c4:	dc400117 	ldw	r17,4(sp)
 80065c8:	dc000017 	ldw	r16,0(sp)
 80065cc:	dec00304 	addi	sp,sp,12
 80065d0:	f800283a 	ret
 80065d4:	80c00017 	ldw	r3,0(r16)
 80065d8:	183ff926 	beq	r3,zero,80065c0 <_fstat_r+0x38>
 80065dc:	88c00015 	stw	r3,0(r17)
 80065e0:	003ff706 	br	80065c0 <_fstat_r+0x38>

080065e4 <_isatty_r>:
 80065e4:	defffd04 	addi	sp,sp,-12
 80065e8:	dc000015 	stw	r16,0(sp)
 80065ec:	04020074 	movhi	r16,2049
 80065f0:	dc400115 	stw	r17,4(sp)
 80065f4:	8431c104 	addi	r16,r16,-14588
 80065f8:	2023883a 	mov	r17,r4
 80065fc:	2809883a 	mov	r4,r5
 8006600:	dfc00215 	stw	ra,8(sp)
 8006604:	80000015 	stw	zero,0(r16)
 8006608:	8006aec0 	call	8006aec <isatty>
 800660c:	00ffffc4 	movi	r3,-1
 8006610:	10c00526 	beq	r2,r3,8006628 <_isatty_r+0x44>
 8006614:	dfc00217 	ldw	ra,8(sp)
 8006618:	dc400117 	ldw	r17,4(sp)
 800661c:	dc000017 	ldw	r16,0(sp)
 8006620:	dec00304 	addi	sp,sp,12
 8006624:	f800283a 	ret
 8006628:	80c00017 	ldw	r3,0(r16)
 800662c:	183ff926 	beq	r3,zero,8006614 <_isatty_r+0x30>
 8006630:	88c00015 	stw	r3,0(r17)
 8006634:	003ff706 	br	8006614 <_isatty_r+0x30>

08006638 <__muldi3>:
 8006638:	223fffcc 	andi	r8,r4,65535
 800663c:	2006d43a 	srli	r3,r4,16
 8006640:	32bfffcc 	andi	r10,r6,65535
 8006644:	3012d43a 	srli	r9,r6,16
 8006648:	4297383a 	mul	r11,r8,r10
 800664c:	1a95383a 	mul	r10,r3,r10
 8006650:	4251383a 	mul	r8,r8,r9
 8006654:	5804d43a 	srli	r2,r11,16
 8006658:	4291883a 	add	r8,r8,r10
 800665c:	1205883a 	add	r2,r2,r8
 8006660:	1a51383a 	mul	r8,r3,r9
 8006664:	1280022e 	bgeu	r2,r10,8006670 <__muldi3+0x38>
 8006668:	00c00074 	movhi	r3,1
 800666c:	40d1883a 	add	r8,r8,r3
 8006670:	1006d43a 	srli	r3,r2,16
 8006674:	21cf383a 	mul	r7,r4,r7
 8006678:	314b383a 	mul	r5,r6,r5
 800667c:	1004943a 	slli	r2,r2,16
 8006680:	1a11883a 	add	r8,r3,r8
 8006684:	5affffcc 	andi	r11,r11,65535
 8006688:	3947883a 	add	r3,r7,r5
 800668c:	12c5883a 	add	r2,r2,r11
 8006690:	1a07883a 	add	r3,r3,r8
 8006694:	f800283a 	ret

08006698 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006698:	defffe04 	addi	sp,sp,-8
 800669c:	dfc00115 	stw	ra,4(sp)
 80066a0:	df000015 	stw	fp,0(sp)
 80066a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80066a8:	d0a00b17 	ldw	r2,-32724(gp)
 80066ac:	10000326 	beq	r2,zero,80066bc <alt_get_errno+0x24>
 80066b0:	d0a00b17 	ldw	r2,-32724(gp)
 80066b4:	103ee83a 	callr	r2
 80066b8:	00000106 	br	80066c0 <alt_get_errno+0x28>
 80066bc:	d0a6ad04 	addi	r2,gp,-25932
}
 80066c0:	e037883a 	mov	sp,fp
 80066c4:	dfc00117 	ldw	ra,4(sp)
 80066c8:	df000017 	ldw	fp,0(sp)
 80066cc:	dec00204 	addi	sp,sp,8
 80066d0:	f800283a 	ret

080066d4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80066d4:	defffb04 	addi	sp,sp,-20
 80066d8:	dfc00415 	stw	ra,16(sp)
 80066dc:	df000315 	stw	fp,12(sp)
 80066e0:	df000304 	addi	fp,sp,12
 80066e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80066e8:	e0bfff17 	ldw	r2,-4(fp)
 80066ec:	10000616 	blt	r2,zero,8006708 <close+0x34>
 80066f0:	e0bfff17 	ldw	r2,-4(fp)
 80066f4:	10c00324 	muli	r3,r2,12
 80066f8:	00820074 	movhi	r2,2049
 80066fc:	10a69c04 	addi	r2,r2,-26000
 8006700:	1885883a 	add	r2,r3,r2
 8006704:	00000106 	br	800670c <close+0x38>
 8006708:	0005883a 	mov	r2,zero
 800670c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8006710:	e0bffd17 	ldw	r2,-12(fp)
 8006714:	10001926 	beq	r2,zero,800677c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8006718:	e0bffd17 	ldw	r2,-12(fp)
 800671c:	10800017 	ldw	r2,0(r2)
 8006720:	10800417 	ldw	r2,16(r2)
 8006724:	10000626 	beq	r2,zero,8006740 <close+0x6c>
 8006728:	e0bffd17 	ldw	r2,-12(fp)
 800672c:	10800017 	ldw	r2,0(r2)
 8006730:	10800417 	ldw	r2,16(r2)
 8006734:	e13ffd17 	ldw	r4,-12(fp)
 8006738:	103ee83a 	callr	r2
 800673c:	00000106 	br	8006744 <close+0x70>
 8006740:	0005883a 	mov	r2,zero
 8006744:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8006748:	e13fff17 	ldw	r4,-4(fp)
 800674c:	8006f880 	call	8006f88 <alt_release_fd>
    if (rval < 0)
 8006750:	e0bffe17 	ldw	r2,-8(fp)
 8006754:	1000070e 	bge	r2,zero,8006774 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8006758:	80066980 	call	8006698 <alt_get_errno>
 800675c:	1007883a 	mov	r3,r2
 8006760:	e0bffe17 	ldw	r2,-8(fp)
 8006764:	0085c83a 	sub	r2,zero,r2
 8006768:	18800015 	stw	r2,0(r3)
      return -1;
 800676c:	00bfffc4 	movi	r2,-1
 8006770:	00000706 	br	8006790 <close+0xbc>
    }
    return 0;
 8006774:	0005883a 	mov	r2,zero
 8006778:	00000506 	br	8006790 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800677c:	80066980 	call	8006698 <alt_get_errno>
 8006780:	1007883a 	mov	r3,r2
 8006784:	00801444 	movi	r2,81
 8006788:	18800015 	stw	r2,0(r3)
    return -1;
 800678c:	00bfffc4 	movi	r2,-1
  }
}
 8006790:	e037883a 	mov	sp,fp
 8006794:	dfc00117 	ldw	ra,4(sp)
 8006798:	df000017 	ldw	fp,0(sp)
 800679c:	dec00204 	addi	sp,sp,8
 80067a0:	f800283a 	ret

080067a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80067a4:	defffc04 	addi	sp,sp,-16
 80067a8:	df000315 	stw	fp,12(sp)
 80067ac:	df000304 	addi	fp,sp,12
 80067b0:	e13ffd15 	stw	r4,-12(fp)
 80067b4:	e17ffe15 	stw	r5,-8(fp)
 80067b8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 80067bc:	e0bfff17 	ldw	r2,-4(fp)
}
 80067c0:	e037883a 	mov	sp,fp
 80067c4:	df000017 	ldw	fp,0(sp)
 80067c8:	dec00104 	addi	sp,sp,4
 80067cc:	f800283a 	ret

080067d0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80067d0:	defffe04 	addi	sp,sp,-8
 80067d4:	dfc00115 	stw	ra,4(sp)
 80067d8:	df000015 	stw	fp,0(sp)
 80067dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80067e0:	d0a00b17 	ldw	r2,-32724(gp)
 80067e4:	10000326 	beq	r2,zero,80067f4 <alt_get_errno+0x24>
 80067e8:	d0a00b17 	ldw	r2,-32724(gp)
 80067ec:	103ee83a 	callr	r2
 80067f0:	00000106 	br	80067f8 <alt_get_errno+0x28>
 80067f4:	d0a6ad04 	addi	r2,gp,-25932
}
 80067f8:	e037883a 	mov	sp,fp
 80067fc:	dfc00117 	ldw	ra,4(sp)
 8006800:	df000017 	ldw	fp,0(sp)
 8006804:	dec00204 	addi	sp,sp,8
 8006808:	f800283a 	ret

0800680c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800680c:	defffb04 	addi	sp,sp,-20
 8006810:	dfc00415 	stw	ra,16(sp)
 8006814:	df000315 	stw	fp,12(sp)
 8006818:	df000304 	addi	fp,sp,12
 800681c:	e13ffe15 	stw	r4,-8(fp)
 8006820:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006824:	e0bffe17 	ldw	r2,-8(fp)
 8006828:	10000616 	blt	r2,zero,8006844 <fstat+0x38>
 800682c:	e0bffe17 	ldw	r2,-8(fp)
 8006830:	10c00324 	muli	r3,r2,12
 8006834:	00820074 	movhi	r2,2049
 8006838:	10a69c04 	addi	r2,r2,-26000
 800683c:	1885883a 	add	r2,r3,r2
 8006840:	00000106 	br	8006848 <fstat+0x3c>
 8006844:	0005883a 	mov	r2,zero
 8006848:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800684c:	e0bffd17 	ldw	r2,-12(fp)
 8006850:	10001026 	beq	r2,zero,8006894 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8006854:	e0bffd17 	ldw	r2,-12(fp)
 8006858:	10800017 	ldw	r2,0(r2)
 800685c:	10800817 	ldw	r2,32(r2)
 8006860:	10000726 	beq	r2,zero,8006880 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8006864:	e0bffd17 	ldw	r2,-12(fp)
 8006868:	10800017 	ldw	r2,0(r2)
 800686c:	10800817 	ldw	r2,32(r2)
 8006870:	e17fff17 	ldw	r5,-4(fp)
 8006874:	e13ffd17 	ldw	r4,-12(fp)
 8006878:	103ee83a 	callr	r2
 800687c:	00000a06 	br	80068a8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8006880:	e0bfff17 	ldw	r2,-4(fp)
 8006884:	00c80004 	movi	r3,8192
 8006888:	10c00115 	stw	r3,4(r2)
      return 0;
 800688c:	0005883a 	mov	r2,zero
 8006890:	00000506 	br	80068a8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8006894:	80067d00 	call	80067d0 <alt_get_errno>
 8006898:	1007883a 	mov	r3,r2
 800689c:	00801444 	movi	r2,81
 80068a0:	18800015 	stw	r2,0(r3)
    return -1;
 80068a4:	00bfffc4 	movi	r2,-1
  }
}
 80068a8:	e037883a 	mov	sp,fp
 80068ac:	dfc00117 	ldw	ra,4(sp)
 80068b0:	df000017 	ldw	fp,0(sp)
 80068b4:	dec00204 	addi	sp,sp,8
 80068b8:	f800283a 	ret

080068bc <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 80068bc:	defff404 	addi	sp,sp,-48
 80068c0:	dfc00b15 	stw	ra,44(sp)
 80068c4:	df000a15 	stw	fp,40(sp)
 80068c8:	dd000915 	stw	r20,36(sp)
 80068cc:	dcc00815 	stw	r19,32(sp)
 80068d0:	dc800715 	stw	r18,28(sp)
 80068d4:	dc400615 	stw	r17,24(sp)
 80068d8:	dc000515 	stw	r16,20(sp)
 80068dc:	df000a04 	addi	fp,sp,40
 80068e0:	e13ff915 	stw	r4,-28(fp)
 80068e4:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 80068e8:	e0bffa17 	ldw	r2,-24(fp)
 80068ec:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80068f0:	d0a6b917 	ldw	r2,-25884(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 80068f4:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80068f8:	d0a6b817 	ldw	r2,-25888(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 80068fc:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 8006900:	e0bff817 	ldw	r2,-32(fp)
 8006904:	10005f26 	beq	r2,zero,8006a84 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 8006908:	d0a6b317 	ldw	r2,-25908(gp)
 800690c:	1029883a 	mov	r20,r2
 8006910:	e17ff817 	ldw	r5,-32(fp)
 8006914:	e13ff717 	ldw	r4,-36(fp)
 8006918:	8000ce80 	call	8000ce8 <__udivsi3>
 800691c:	a085883a 	add	r2,r20,r2
 8006920:	1007883a 	mov	r3,r2
 8006924:	e0bff917 	ldw	r2,-28(fp)
 8006928:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 800692c:	d0a6b417 	ldw	r2,-25904(gp)
 8006930:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 8006934:	e0bff717 	ldw	r2,-36(fp)
 8006938:	1021883a 	mov	r16,r2
 800693c:	0023883a 	mov	r17,zero
 8006940:	e17ff817 	ldw	r5,-32(fp)
 8006944:	010003f4 	movhi	r4,15
 8006948:	21109004 	addi	r4,r4,16960
 800694c:	8000ce80 	call	8000ce8 <__udivsi3>
 8006950:	1025883a 	mov	r18,r2
 8006954:	0027883a 	mov	r19,zero
 8006958:	900d883a 	mov	r6,r18
 800695c:	980f883a 	mov	r7,r19
 8006960:	8009883a 	mov	r4,r16
 8006964:	880b883a 	mov	r5,r17
 8006968:	80066380 	call	8006638 <__muldi3>
 800696c:	1009883a 	mov	r4,r2
 8006970:	180b883a 	mov	r5,r3
 8006974:	2005883a 	mov	r2,r4
 8006978:	2807883a 	mov	r3,r5
 800697c:	018003f4 	movhi	r6,15
 8006980:	31909004 	addi	r6,r6,16960
 8006984:	000f883a 	mov	r7,zero
 8006988:	1009883a 	mov	r4,r2
 800698c:	180b883a 	mov	r5,r3
 8006990:	80006b80 	call	80006b8 <__umoddi3>
 8006994:	1009883a 	mov	r4,r2
 8006998:	180b883a 	mov	r5,r3
 800699c:	2005883a 	mov	r2,r4
 80069a0:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 80069a4:	a085883a 	add	r2,r20,r2
 80069a8:	1007883a 	mov	r3,r2
 80069ac:	e0bff917 	ldw	r2,-28(fp)
 80069b0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 80069b4:	00001406 	br	8006a08 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 80069b8:	e0bff917 	ldw	r2,-28(fp)
 80069bc:	10800017 	ldw	r2,0(r2)
 80069c0:	00800516 	blt	zero,r2,80069d8 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 80069c4:	e0bff917 	ldw	r2,-28(fp)
 80069c8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 80069cc:	e0bff917 	ldw	r2,-28(fp)
 80069d0:	10000115 	stw	zero,4(r2)
          break;
 80069d4:	00000f06 	br	8006a14 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 80069d8:	e0bff917 	ldw	r2,-28(fp)
 80069dc:	10800017 	ldw	r2,0(r2)
 80069e0:	10ffffc4 	addi	r3,r2,-1
 80069e4:	e0bff917 	ldw	r2,-28(fp)
 80069e8:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 80069ec:	e0bff917 	ldw	r2,-28(fp)
 80069f0:	10c00117 	ldw	r3,4(r2)
 80069f4:	008003f4 	movhi	r2,15
 80069f8:	10909004 	addi	r2,r2,16960
 80069fc:	1887883a 	add	r3,r3,r2
 8006a00:	e0bff917 	ldw	r2,-28(fp)
 8006a04:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 8006a08:	e0bff917 	ldw	r2,-28(fp)
 8006a0c:	10800117 	ldw	r2,4(r2)
 8006a10:	103fe916 	blt	r2,zero,80069b8 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8006a14:	00000c06 	br	8006a48 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 8006a18:	e0bff917 	ldw	r2,-28(fp)
 8006a1c:	10800017 	ldw	r2,0(r2)
 8006a20:	10c00044 	addi	r3,r2,1
 8006a24:	e0bff917 	ldw	r2,-28(fp)
 8006a28:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 8006a2c:	e0bff917 	ldw	r2,-28(fp)
 8006a30:	10c00117 	ldw	r3,4(r2)
 8006a34:	00bffc74 	movhi	r2,65521
 8006a38:	10af7004 	addi	r2,r2,-16960
 8006a3c:	1887883a 	add	r3,r3,r2
 8006a40:	e0bff917 	ldw	r2,-28(fp)
 8006a44:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 8006a48:	e0bff917 	ldw	r2,-28(fp)
 8006a4c:	10c00117 	ldw	r3,4(r2)
 8006a50:	008003f4 	movhi	r2,15
 8006a54:	10908fc4 	addi	r2,r2,16959
 8006a58:	10ffef16 	blt	r2,r3,8006a18 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 8006a5c:	e0bff617 	ldw	r2,-40(fp)
 8006a60:	10000626 	beq	r2,zero,8006a7c <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 8006a64:	d0e6b117 	ldw	r3,-25916(gp)
 8006a68:	e0bff617 	ldw	r2,-40(fp)
 8006a6c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 8006a70:	d0e6b217 	ldw	r3,-25912(gp)
 8006a74:	e0bff617 	ldw	r2,-40(fp)
 8006a78:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 8006a7c:	0005883a 	mov	r2,zero
 8006a80:	00000106 	br	8006a88 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 8006a84:	00bfde84 	movi	r2,-134
}
 8006a88:	e6fffb04 	addi	sp,fp,-20
 8006a8c:	dfc00617 	ldw	ra,24(sp)
 8006a90:	df000517 	ldw	fp,20(sp)
 8006a94:	dd000417 	ldw	r20,16(sp)
 8006a98:	dcc00317 	ldw	r19,12(sp)
 8006a9c:	dc800217 	ldw	r18,8(sp)
 8006aa0:	dc400117 	ldw	r17,4(sp)
 8006aa4:	dc000017 	ldw	r16,0(sp)
 8006aa8:	dec00704 	addi	sp,sp,28
 8006aac:	f800283a 	ret

08006ab0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006ab0:	defffe04 	addi	sp,sp,-8
 8006ab4:	dfc00115 	stw	ra,4(sp)
 8006ab8:	df000015 	stw	fp,0(sp)
 8006abc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006ac0:	d0a00b17 	ldw	r2,-32724(gp)
 8006ac4:	10000326 	beq	r2,zero,8006ad4 <alt_get_errno+0x24>
 8006ac8:	d0a00b17 	ldw	r2,-32724(gp)
 8006acc:	103ee83a 	callr	r2
 8006ad0:	00000106 	br	8006ad8 <alt_get_errno+0x28>
 8006ad4:	d0a6ad04 	addi	r2,gp,-25932
}
 8006ad8:	e037883a 	mov	sp,fp
 8006adc:	dfc00117 	ldw	ra,4(sp)
 8006ae0:	df000017 	ldw	fp,0(sp)
 8006ae4:	dec00204 	addi	sp,sp,8
 8006ae8:	f800283a 	ret

08006aec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8006aec:	deffed04 	addi	sp,sp,-76
 8006af0:	dfc01215 	stw	ra,72(sp)
 8006af4:	df001115 	stw	fp,68(sp)
 8006af8:	df001104 	addi	fp,sp,68
 8006afc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006b00:	e0bfff17 	ldw	r2,-4(fp)
 8006b04:	10000616 	blt	r2,zero,8006b20 <isatty+0x34>
 8006b08:	e0bfff17 	ldw	r2,-4(fp)
 8006b0c:	10c00324 	muli	r3,r2,12
 8006b10:	00820074 	movhi	r2,2049
 8006b14:	10a69c04 	addi	r2,r2,-26000
 8006b18:	1885883a 	add	r2,r3,r2
 8006b1c:	00000106 	br	8006b24 <isatty+0x38>
 8006b20:	0005883a 	mov	r2,zero
 8006b24:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8006b28:	e0bfef17 	ldw	r2,-68(fp)
 8006b2c:	10000e26 	beq	r2,zero,8006b68 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8006b30:	e0bfef17 	ldw	r2,-68(fp)
 8006b34:	10800017 	ldw	r2,0(r2)
 8006b38:	10800817 	ldw	r2,32(r2)
 8006b3c:	1000021e 	bne	r2,zero,8006b48 <isatty+0x5c>
    {
      return 1;
 8006b40:	00800044 	movi	r2,1
 8006b44:	00000d06 	br	8006b7c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8006b48:	e0bff004 	addi	r2,fp,-64
 8006b4c:	100b883a 	mov	r5,r2
 8006b50:	e13fff17 	ldw	r4,-4(fp)
 8006b54:	800680c0 	call	800680c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8006b58:	e0bff117 	ldw	r2,-60(fp)
 8006b5c:	10880020 	cmpeqi	r2,r2,8192
 8006b60:	10803fcc 	andi	r2,r2,255
 8006b64:	00000506 	br	8006b7c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8006b68:	8006ab00 	call	8006ab0 <alt_get_errno>
 8006b6c:	1007883a 	mov	r3,r2
 8006b70:	00801444 	movi	r2,81
 8006b74:	18800015 	stw	r2,0(r3)
    return 0;
 8006b78:	0005883a 	mov	r2,zero
  }
}
 8006b7c:	e037883a 	mov	sp,fp
 8006b80:	dfc00117 	ldw	ra,4(sp)
 8006b84:	df000017 	ldw	fp,0(sp)
 8006b88:	dec00204 	addi	sp,sp,8
 8006b8c:	f800283a 	ret

08006b90 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8006b90:	defffc04 	addi	sp,sp,-16
 8006b94:	df000315 	stw	fp,12(sp)
 8006b98:	df000304 	addi	fp,sp,12
 8006b9c:	e13ffd15 	stw	r4,-12(fp)
 8006ba0:	e17ffe15 	stw	r5,-8(fp)
 8006ba4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8006ba8:	e0fffe17 	ldw	r3,-8(fp)
 8006bac:	e0bffd17 	ldw	r2,-12(fp)
 8006bb0:	18800c26 	beq	r3,r2,8006be4 <alt_load_section+0x54>
  {
    while( to != end )
 8006bb4:	00000806 	br	8006bd8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8006bb8:	e0bffe17 	ldw	r2,-8(fp)
 8006bbc:	10c00104 	addi	r3,r2,4
 8006bc0:	e0fffe15 	stw	r3,-8(fp)
 8006bc4:	e0fffd17 	ldw	r3,-12(fp)
 8006bc8:	19000104 	addi	r4,r3,4
 8006bcc:	e13ffd15 	stw	r4,-12(fp)
 8006bd0:	18c00017 	ldw	r3,0(r3)
 8006bd4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8006bd8:	e0fffe17 	ldw	r3,-8(fp)
 8006bdc:	e0bfff17 	ldw	r2,-4(fp)
 8006be0:	18bff51e 	bne	r3,r2,8006bb8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 8006be4:	0001883a 	nop
 8006be8:	e037883a 	mov	sp,fp
 8006bec:	df000017 	ldw	fp,0(sp)
 8006bf0:	dec00104 	addi	sp,sp,4
 8006bf4:	f800283a 	ret

08006bf8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8006bf8:	defffe04 	addi	sp,sp,-8
 8006bfc:	dfc00115 	stw	ra,4(sp)
 8006c00:	df000015 	stw	fp,0(sp)
 8006c04:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8006c08:	01820074 	movhi	r6,2049
 8006c0c:	31ab2404 	addi	r6,r6,-21360
 8006c10:	01420074 	movhi	r5,2049
 8006c14:	29648704 	addi	r5,r5,-28132
 8006c18:	01020074 	movhi	r4,2049
 8006c1c:	212b2404 	addi	r4,r4,-21360
 8006c20:	8006b900 	call	8006b90 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8006c24:	01820034 	movhi	r6,2048
 8006c28:	31809104 	addi	r6,r6,580
 8006c2c:	01420034 	movhi	r5,2048
 8006c30:	29400804 	addi	r5,r5,32
 8006c34:	01020034 	movhi	r4,2048
 8006c38:	21000804 	addi	r4,r4,32
 8006c3c:	8006b900 	call	8006b90 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8006c40:	01820074 	movhi	r6,2049
 8006c44:	31a48704 	addi	r6,r6,-28132
 8006c48:	01420074 	movhi	r5,2049
 8006c4c:	29643104 	addi	r5,r5,-28476
 8006c50:	01020074 	movhi	r4,2049
 8006c54:	21243104 	addi	r4,r4,-28476
 8006c58:	8006b900 	call	8006b90 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8006c5c:	80081540 	call	8008154 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8006c60:	800833c0 	call	800833c <alt_icache_flush_all>
}
 8006c64:	0001883a 	nop
 8006c68:	e037883a 	mov	sp,fp
 8006c6c:	dfc00117 	ldw	ra,4(sp)
 8006c70:	df000017 	ldw	fp,0(sp)
 8006c74:	dec00204 	addi	sp,sp,8
 8006c78:	f800283a 	ret

08006c7c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006c7c:	defffe04 	addi	sp,sp,-8
 8006c80:	dfc00115 	stw	ra,4(sp)
 8006c84:	df000015 	stw	fp,0(sp)
 8006c88:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006c8c:	d0a00b17 	ldw	r2,-32724(gp)
 8006c90:	10000326 	beq	r2,zero,8006ca0 <alt_get_errno+0x24>
 8006c94:	d0a00b17 	ldw	r2,-32724(gp)
 8006c98:	103ee83a 	callr	r2
 8006c9c:	00000106 	br	8006ca4 <alt_get_errno+0x28>
 8006ca0:	d0a6ad04 	addi	r2,gp,-25932
}
 8006ca4:	e037883a 	mov	sp,fp
 8006ca8:	dfc00117 	ldw	ra,4(sp)
 8006cac:	df000017 	ldw	fp,0(sp)
 8006cb0:	dec00204 	addi	sp,sp,8
 8006cb4:	f800283a 	ret

08006cb8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8006cb8:	defff904 	addi	sp,sp,-28
 8006cbc:	dfc00615 	stw	ra,24(sp)
 8006cc0:	df000515 	stw	fp,20(sp)
 8006cc4:	df000504 	addi	fp,sp,20
 8006cc8:	e13ffd15 	stw	r4,-12(fp)
 8006ccc:	e17ffe15 	stw	r5,-8(fp)
 8006cd0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 8006cd4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006cd8:	e0bffd17 	ldw	r2,-12(fp)
 8006cdc:	10000616 	blt	r2,zero,8006cf8 <lseek+0x40>
 8006ce0:	e0bffd17 	ldw	r2,-12(fp)
 8006ce4:	10c00324 	muli	r3,r2,12
 8006ce8:	00820074 	movhi	r2,2049
 8006cec:	10a69c04 	addi	r2,r2,-26000
 8006cf0:	1885883a 	add	r2,r3,r2
 8006cf4:	00000106 	br	8006cfc <lseek+0x44>
 8006cf8:	0005883a 	mov	r2,zero
 8006cfc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8006d00:	e0bffc17 	ldw	r2,-16(fp)
 8006d04:	10001026 	beq	r2,zero,8006d48 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8006d08:	e0bffc17 	ldw	r2,-16(fp)
 8006d0c:	10800017 	ldw	r2,0(r2)
 8006d10:	10800717 	ldw	r2,28(r2)
 8006d14:	10000926 	beq	r2,zero,8006d3c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8006d18:	e0bffc17 	ldw	r2,-16(fp)
 8006d1c:	10800017 	ldw	r2,0(r2)
 8006d20:	10800717 	ldw	r2,28(r2)
 8006d24:	e1bfff17 	ldw	r6,-4(fp)
 8006d28:	e17ffe17 	ldw	r5,-8(fp)
 8006d2c:	e13ffc17 	ldw	r4,-16(fp)
 8006d30:	103ee83a 	callr	r2
 8006d34:	e0bffb15 	stw	r2,-20(fp)
 8006d38:	00000506 	br	8006d50 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8006d3c:	00bfde84 	movi	r2,-134
 8006d40:	e0bffb15 	stw	r2,-20(fp)
 8006d44:	00000206 	br	8006d50 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8006d48:	00bfebc4 	movi	r2,-81
 8006d4c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8006d50:	e0bffb17 	ldw	r2,-20(fp)
 8006d54:	1000070e 	bge	r2,zero,8006d74 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8006d58:	8006c7c0 	call	8006c7c <alt_get_errno>
 8006d5c:	1007883a 	mov	r3,r2
 8006d60:	e0bffb17 	ldw	r2,-20(fp)
 8006d64:	0085c83a 	sub	r2,zero,r2
 8006d68:	18800015 	stw	r2,0(r3)
    rc = -1;
 8006d6c:	00bfffc4 	movi	r2,-1
 8006d70:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8006d74:	e0bffb17 	ldw	r2,-20(fp)
}
 8006d78:	e037883a 	mov	sp,fp
 8006d7c:	dfc00117 	ldw	ra,4(sp)
 8006d80:	df000017 	ldw	fp,0(sp)
 8006d84:	dec00204 	addi	sp,sp,8
 8006d88:	f800283a 	ret

08006d8c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8006d8c:	defffd04 	addi	sp,sp,-12
 8006d90:	dfc00215 	stw	ra,8(sp)
 8006d94:	df000115 	stw	fp,4(sp)
 8006d98:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8006d9c:	0009883a 	mov	r4,zero
 8006da0:	80073d80 	call	80073d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8006da4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8006da8:	80074100 	call	8007410 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8006dac:	01820074 	movhi	r6,2049
 8006db0:	31a47d04 	addi	r6,r6,-28172
 8006db4:	01420074 	movhi	r5,2049
 8006db8:	29647d04 	addi	r5,r5,-28172
 8006dbc:	01020074 	movhi	r4,2049
 8006dc0:	21247d04 	addi	r4,r4,-28172
 8006dc4:	80086d40 	call	80086d4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8006dc8:	800827c0 	call	800827c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8006dcc:	01020074 	movhi	r4,2049
 8006dd0:	2120b704 	addi	r4,r4,-32036
 8006dd4:	8008d300 	call	8008d30 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8006dd8:	d0a6b517 	ldw	r2,-25900(gp)
 8006ddc:	d0e6b617 	ldw	r3,-25896(gp)
 8006de0:	d126b717 	ldw	r4,-25892(gp)
 8006de4:	200d883a 	mov	r6,r4
 8006de8:	180b883a 	mov	r5,r3
 8006dec:	1009883a 	mov	r4,r2
 8006df0:	80002900 	call	8000290 <main>
 8006df4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8006df8:	01000044 	movi	r4,1
 8006dfc:	80066d40 	call	80066d4 <close>
  exit (result);
 8006e00:	e13fff17 	ldw	r4,-4(fp)
 8006e04:	8008d440 	call	8008d44 <exit>

08006e08 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8006e08:	defffe04 	addi	sp,sp,-8
 8006e0c:	df000115 	stw	fp,4(sp)
 8006e10:	df000104 	addi	fp,sp,4
 8006e14:	e13fff15 	stw	r4,-4(fp)
}
 8006e18:	0001883a 	nop
 8006e1c:	e037883a 	mov	sp,fp
 8006e20:	df000017 	ldw	fp,0(sp)
 8006e24:	dec00104 	addi	sp,sp,4
 8006e28:	f800283a 	ret

08006e2c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8006e2c:	defffe04 	addi	sp,sp,-8
 8006e30:	df000115 	stw	fp,4(sp)
 8006e34:	df000104 	addi	fp,sp,4
 8006e38:	e13fff15 	stw	r4,-4(fp)
}
 8006e3c:	0001883a 	nop
 8006e40:	e037883a 	mov	sp,fp
 8006e44:	df000017 	ldw	fp,0(sp)
 8006e48:	dec00104 	addi	sp,sp,4
 8006e4c:	f800283a 	ret

08006e50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006e50:	defffe04 	addi	sp,sp,-8
 8006e54:	dfc00115 	stw	ra,4(sp)
 8006e58:	df000015 	stw	fp,0(sp)
 8006e5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006e60:	d0a00b17 	ldw	r2,-32724(gp)
 8006e64:	10000326 	beq	r2,zero,8006e74 <alt_get_errno+0x24>
 8006e68:	d0a00b17 	ldw	r2,-32724(gp)
 8006e6c:	103ee83a 	callr	r2
 8006e70:	00000106 	br	8006e78 <alt_get_errno+0x28>
 8006e74:	d0a6ad04 	addi	r2,gp,-25932
}
 8006e78:	e037883a 	mov	sp,fp
 8006e7c:	dfc00117 	ldw	ra,4(sp)
 8006e80:	df000017 	ldw	fp,0(sp)
 8006e84:	dec00204 	addi	sp,sp,8
 8006e88:	f800283a 	ret

08006e8c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8006e8c:	defff904 	addi	sp,sp,-28
 8006e90:	dfc00615 	stw	ra,24(sp)
 8006e94:	df000515 	stw	fp,20(sp)
 8006e98:	df000504 	addi	fp,sp,20
 8006e9c:	e13ffd15 	stw	r4,-12(fp)
 8006ea0:	e17ffe15 	stw	r5,-8(fp)
 8006ea4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8006ea8:	e0bffd17 	ldw	r2,-12(fp)
 8006eac:	10000616 	blt	r2,zero,8006ec8 <read+0x3c>
 8006eb0:	e0bffd17 	ldw	r2,-12(fp)
 8006eb4:	10c00324 	muli	r3,r2,12
 8006eb8:	00820074 	movhi	r2,2049
 8006ebc:	10a69c04 	addi	r2,r2,-26000
 8006ec0:	1885883a 	add	r2,r3,r2
 8006ec4:	00000106 	br	8006ecc <read+0x40>
 8006ec8:	0005883a 	mov	r2,zero
 8006ecc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8006ed0:	e0bffb17 	ldw	r2,-20(fp)
 8006ed4:	10002226 	beq	r2,zero,8006f60 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8006ed8:	e0bffb17 	ldw	r2,-20(fp)
 8006edc:	10800217 	ldw	r2,8(r2)
 8006ee0:	108000cc 	andi	r2,r2,3
 8006ee4:	10800060 	cmpeqi	r2,r2,1
 8006ee8:	1000181e 	bne	r2,zero,8006f4c <read+0xc0>
        (fd->dev->read))
 8006eec:	e0bffb17 	ldw	r2,-20(fp)
 8006ef0:	10800017 	ldw	r2,0(r2)
 8006ef4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8006ef8:	10001426 	beq	r2,zero,8006f4c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8006efc:	e0bffb17 	ldw	r2,-20(fp)
 8006f00:	10800017 	ldw	r2,0(r2)
 8006f04:	10800517 	ldw	r2,20(r2)
 8006f08:	e0ffff17 	ldw	r3,-4(fp)
 8006f0c:	180d883a 	mov	r6,r3
 8006f10:	e17ffe17 	ldw	r5,-8(fp)
 8006f14:	e13ffb17 	ldw	r4,-20(fp)
 8006f18:	103ee83a 	callr	r2
 8006f1c:	e0bffc15 	stw	r2,-16(fp)
 8006f20:	e0bffc17 	ldw	r2,-16(fp)
 8006f24:	1000070e 	bge	r2,zero,8006f44 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8006f28:	8006e500 	call	8006e50 <alt_get_errno>
 8006f2c:	1007883a 	mov	r3,r2
 8006f30:	e0bffc17 	ldw	r2,-16(fp)
 8006f34:	0085c83a 	sub	r2,zero,r2
 8006f38:	18800015 	stw	r2,0(r3)
          return -1;
 8006f3c:	00bfffc4 	movi	r2,-1
 8006f40:	00000c06 	br	8006f74 <read+0xe8>
        }
        return rval;
 8006f44:	e0bffc17 	ldw	r2,-16(fp)
 8006f48:	00000a06 	br	8006f74 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8006f4c:	8006e500 	call	8006e50 <alt_get_errno>
 8006f50:	1007883a 	mov	r3,r2
 8006f54:	00800344 	movi	r2,13
 8006f58:	18800015 	stw	r2,0(r3)
 8006f5c:	00000406 	br	8006f70 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8006f60:	8006e500 	call	8006e50 <alt_get_errno>
 8006f64:	1007883a 	mov	r3,r2
 8006f68:	00801444 	movi	r2,81
 8006f6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8006f70:	00bfffc4 	movi	r2,-1
}
 8006f74:	e037883a 	mov	sp,fp
 8006f78:	dfc00117 	ldw	ra,4(sp)
 8006f7c:	df000017 	ldw	fp,0(sp)
 8006f80:	dec00204 	addi	sp,sp,8
 8006f84:	f800283a 	ret

08006f88 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8006f88:	defffe04 	addi	sp,sp,-8
 8006f8c:	df000115 	stw	fp,4(sp)
 8006f90:	df000104 	addi	fp,sp,4
 8006f94:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8006f98:	e0bfff17 	ldw	r2,-4(fp)
 8006f9c:	108000d0 	cmplti	r2,r2,3
 8006fa0:	10000d1e 	bne	r2,zero,8006fd8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8006fa4:	00820074 	movhi	r2,2049
 8006fa8:	10a69c04 	addi	r2,r2,-26000
 8006fac:	e0ffff17 	ldw	r3,-4(fp)
 8006fb0:	18c00324 	muli	r3,r3,12
 8006fb4:	10c5883a 	add	r2,r2,r3
 8006fb8:	10800204 	addi	r2,r2,8
 8006fbc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8006fc0:	00820074 	movhi	r2,2049
 8006fc4:	10a69c04 	addi	r2,r2,-26000
 8006fc8:	e0ffff17 	ldw	r3,-4(fp)
 8006fcc:	18c00324 	muli	r3,r3,12
 8006fd0:	10c5883a 	add	r2,r2,r3
 8006fd4:	10000015 	stw	zero,0(r2)
  }
}
 8006fd8:	0001883a 	nop
 8006fdc:	e037883a 	mov	sp,fp
 8006fe0:	df000017 	ldw	fp,0(sp)
 8006fe4:	dec00104 	addi	sp,sp,4
 8006fe8:	f800283a 	ret

08006fec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8006fec:	defff904 	addi	sp,sp,-28
 8006ff0:	df000615 	stw	fp,24(sp)
 8006ff4:	df000604 	addi	fp,sp,24
 8006ff8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006ffc:	0005303a 	rdctl	r2,status
 8007000:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007004:	e0fffe17 	ldw	r3,-8(fp)
 8007008:	00bfff84 	movi	r2,-2
 800700c:	1884703a 	and	r2,r3,r2
 8007010:	1001703a 	wrctl	status,r2
  
  return context;
 8007014:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8007018:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800701c:	d0a00c17 	ldw	r2,-32720(gp)
 8007020:	10c000c4 	addi	r3,r2,3
 8007024:	00bfff04 	movi	r2,-4
 8007028:	1884703a 	and	r2,r3,r2
 800702c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8007030:	d0e00c17 	ldw	r3,-32720(gp)
 8007034:	e0bfff17 	ldw	r2,-4(fp)
 8007038:	1887883a 	add	r3,r3,r2
 800703c:	00840034 	movhi	r2,4096
 8007040:	10800004 	addi	r2,r2,0
 8007044:	10c0062e 	bgeu	r2,r3,8007060 <sbrk+0x74>
 8007048:	e0bffb17 	ldw	r2,-20(fp)
 800704c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007050:	e0bffa17 	ldw	r2,-24(fp)
 8007054:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8007058:	00bfffc4 	movi	r2,-1
 800705c:	00000b06 	br	800708c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8007060:	d0a00c17 	ldw	r2,-32720(gp)
 8007064:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8007068:	d0e00c17 	ldw	r3,-32720(gp)
 800706c:	e0bfff17 	ldw	r2,-4(fp)
 8007070:	1885883a 	add	r2,r3,r2
 8007074:	d0a00c15 	stw	r2,-32720(gp)
 8007078:	e0bffb17 	ldw	r2,-20(fp)
 800707c:	e0bffc15 	stw	r2,-16(fp)
 8007080:	e0bffc17 	ldw	r2,-16(fp)
 8007084:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8007088:	e0bffd17 	ldw	r2,-12(fp)
} 
 800708c:	e037883a 	mov	sp,fp
 8007090:	df000017 	ldw	fp,0(sp)
 8007094:	dec00104 	addi	sp,sp,4
 8007098:	f800283a 	ret

0800709c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800709c:	defffa04 	addi	sp,sp,-24
 80070a0:	df000515 	stw	fp,20(sp)
 80070a4:	df000504 	addi	fp,sp,20
 80070a8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80070ac:	0005303a 	rdctl	r2,status
 80070b0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80070b4:	e0fffc17 	ldw	r3,-16(fp)
 80070b8:	00bfff84 	movi	r2,-2
 80070bc:	1884703a 	and	r2,r3,r2
 80070c0:	1001703a 	wrctl	status,r2
  
  return context;
 80070c4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80070c8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80070cc:	e0bfff17 	ldw	r2,-4(fp)
 80070d0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80070d4:	e0bffd17 	ldw	r2,-12(fp)
 80070d8:	10800017 	ldw	r2,0(r2)
 80070dc:	e0fffd17 	ldw	r3,-12(fp)
 80070e0:	18c00117 	ldw	r3,4(r3)
 80070e4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80070e8:	e0bffd17 	ldw	r2,-12(fp)
 80070ec:	10800117 	ldw	r2,4(r2)
 80070f0:	e0fffd17 	ldw	r3,-12(fp)
 80070f4:	18c00017 	ldw	r3,0(r3)
 80070f8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80070fc:	e0bffd17 	ldw	r2,-12(fp)
 8007100:	e0fffd17 	ldw	r3,-12(fp)
 8007104:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8007108:	e0bffd17 	ldw	r2,-12(fp)
 800710c:	e0fffd17 	ldw	r3,-12(fp)
 8007110:	10c00015 	stw	r3,0(r2)
 8007114:	e0bffb17 	ldw	r2,-20(fp)
 8007118:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800711c:	e0bffe17 	ldw	r2,-8(fp)
 8007120:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8007124:	0001883a 	nop
 8007128:	e037883a 	mov	sp,fp
 800712c:	df000017 	ldw	fp,0(sp)
 8007130:	dec00104 	addi	sp,sp,4
 8007134:	f800283a 	ret

08007138 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8007138:	defffb04 	addi	sp,sp,-20
 800713c:	dfc00415 	stw	ra,16(sp)
 8007140:	df000315 	stw	fp,12(sp)
 8007144:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8007148:	d0a00d17 	ldw	r2,-32716(gp)
 800714c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8007150:	d0a6b917 	ldw	r2,-25884(gp)
 8007154:	10800044 	addi	r2,r2,1
 8007158:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800715c:	00002e06 	br	8007218 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8007160:	e0bffd17 	ldw	r2,-12(fp)
 8007164:	10800017 	ldw	r2,0(r2)
 8007168:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800716c:	e0bffd17 	ldw	r2,-12(fp)
 8007170:	10800403 	ldbu	r2,16(r2)
 8007174:	10803fcc 	andi	r2,r2,255
 8007178:	10000426 	beq	r2,zero,800718c <alt_tick+0x54>
 800717c:	d0a6b917 	ldw	r2,-25884(gp)
 8007180:	1000021e 	bne	r2,zero,800718c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8007184:	e0bffd17 	ldw	r2,-12(fp)
 8007188:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800718c:	e0bffd17 	ldw	r2,-12(fp)
 8007190:	10800217 	ldw	r2,8(r2)
 8007194:	d0e6b917 	ldw	r3,-25884(gp)
 8007198:	18801d36 	bltu	r3,r2,8007210 <alt_tick+0xd8>
 800719c:	e0bffd17 	ldw	r2,-12(fp)
 80071a0:	10800403 	ldbu	r2,16(r2)
 80071a4:	10803fcc 	andi	r2,r2,255
 80071a8:	1000191e 	bne	r2,zero,8007210 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80071ac:	e0bffd17 	ldw	r2,-12(fp)
 80071b0:	10800317 	ldw	r2,12(r2)
 80071b4:	e0fffd17 	ldw	r3,-12(fp)
 80071b8:	18c00517 	ldw	r3,20(r3)
 80071bc:	1809883a 	mov	r4,r3
 80071c0:	103ee83a 	callr	r2
 80071c4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80071c8:	e0bfff17 	ldw	r2,-4(fp)
 80071cc:	1000031e 	bne	r2,zero,80071dc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80071d0:	e13ffd17 	ldw	r4,-12(fp)
 80071d4:	800709c0 	call	800709c <alt_alarm_stop>
 80071d8:	00000d06 	br	8007210 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80071dc:	e0bffd17 	ldw	r2,-12(fp)
 80071e0:	10c00217 	ldw	r3,8(r2)
 80071e4:	e0bfff17 	ldw	r2,-4(fp)
 80071e8:	1887883a 	add	r3,r3,r2
 80071ec:	e0bffd17 	ldw	r2,-12(fp)
 80071f0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80071f4:	e0bffd17 	ldw	r2,-12(fp)
 80071f8:	10c00217 	ldw	r3,8(r2)
 80071fc:	d0a6b917 	ldw	r2,-25884(gp)
 8007200:	1880032e 	bgeu	r3,r2,8007210 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8007204:	e0bffd17 	ldw	r2,-12(fp)
 8007208:	00c00044 	movi	r3,1
 800720c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8007210:	e0bffe17 	ldw	r2,-8(fp)
 8007214:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8007218:	e0fffd17 	ldw	r3,-12(fp)
 800721c:	d0a00d04 	addi	r2,gp,-32716
 8007220:	18bfcf1e 	bne	r3,r2,8007160 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8007224:	0001883a 	nop
}
 8007228:	0001883a 	nop
 800722c:	e037883a 	mov	sp,fp
 8007230:	dfc00117 	ldw	ra,4(sp)
 8007234:	df000017 	ldw	fp,0(sp)
 8007238:	dec00204 	addi	sp,sp,8
 800723c:	f800283a 	ret

08007240 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8007240:	defffd04 	addi	sp,sp,-12
 8007244:	dfc00215 	stw	ra,8(sp)
 8007248:	df000115 	stw	fp,4(sp)
 800724c:	df000104 	addi	fp,sp,4
 8007250:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8007254:	e13fff17 	ldw	r4,-4(fp)
 8007258:	8007ffc0 	call	8007ffc <alt_busy_sleep>
}
 800725c:	e037883a 	mov	sp,fp
 8007260:	dfc00117 	ldw	ra,4(sp)
 8007264:	df000017 	ldw	fp,0(sp)
 8007268:	dec00204 	addi	sp,sp,8
 800726c:	f800283a 	ret

08007270 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8007270:	defffe04 	addi	sp,sp,-8
 8007274:	dfc00115 	stw	ra,4(sp)
 8007278:	df000015 	stw	fp,0(sp)
 800727c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8007280:	d0a00b17 	ldw	r2,-32724(gp)
 8007284:	10000326 	beq	r2,zero,8007294 <alt_get_errno+0x24>
 8007288:	d0a00b17 	ldw	r2,-32724(gp)
 800728c:	103ee83a 	callr	r2
 8007290:	00000106 	br	8007298 <alt_get_errno+0x28>
 8007294:	d0a6ad04 	addi	r2,gp,-25932
}
 8007298:	e037883a 	mov	sp,fp
 800729c:	dfc00117 	ldw	ra,4(sp)
 80072a0:	df000017 	ldw	fp,0(sp)
 80072a4:	dec00204 	addi	sp,sp,8
 80072a8:	f800283a 	ret

080072ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80072ac:	defff904 	addi	sp,sp,-28
 80072b0:	dfc00615 	stw	ra,24(sp)
 80072b4:	df000515 	stw	fp,20(sp)
 80072b8:	df000504 	addi	fp,sp,20
 80072bc:	e13ffd15 	stw	r4,-12(fp)
 80072c0:	e17ffe15 	stw	r5,-8(fp)
 80072c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80072c8:	e0bffd17 	ldw	r2,-12(fp)
 80072cc:	10000616 	blt	r2,zero,80072e8 <write+0x3c>
 80072d0:	e0bffd17 	ldw	r2,-12(fp)
 80072d4:	10c00324 	muli	r3,r2,12
 80072d8:	00820074 	movhi	r2,2049
 80072dc:	10a69c04 	addi	r2,r2,-26000
 80072e0:	1885883a 	add	r2,r3,r2
 80072e4:	00000106 	br	80072ec <write+0x40>
 80072e8:	0005883a 	mov	r2,zero
 80072ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80072f0:	e0bffb17 	ldw	r2,-20(fp)
 80072f4:	10002126 	beq	r2,zero,800737c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80072f8:	e0bffb17 	ldw	r2,-20(fp)
 80072fc:	10800217 	ldw	r2,8(r2)
 8007300:	108000cc 	andi	r2,r2,3
 8007304:	10001826 	beq	r2,zero,8007368 <write+0xbc>
 8007308:	e0bffb17 	ldw	r2,-20(fp)
 800730c:	10800017 	ldw	r2,0(r2)
 8007310:	10800617 	ldw	r2,24(r2)
 8007314:	10001426 	beq	r2,zero,8007368 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8007318:	e0bffb17 	ldw	r2,-20(fp)
 800731c:	10800017 	ldw	r2,0(r2)
 8007320:	10800617 	ldw	r2,24(r2)
 8007324:	e0ffff17 	ldw	r3,-4(fp)
 8007328:	180d883a 	mov	r6,r3
 800732c:	e17ffe17 	ldw	r5,-8(fp)
 8007330:	e13ffb17 	ldw	r4,-20(fp)
 8007334:	103ee83a 	callr	r2
 8007338:	e0bffc15 	stw	r2,-16(fp)
 800733c:	e0bffc17 	ldw	r2,-16(fp)
 8007340:	1000070e 	bge	r2,zero,8007360 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8007344:	80072700 	call	8007270 <alt_get_errno>
 8007348:	1007883a 	mov	r3,r2
 800734c:	e0bffc17 	ldw	r2,-16(fp)
 8007350:	0085c83a 	sub	r2,zero,r2
 8007354:	18800015 	stw	r2,0(r3)
        return -1;
 8007358:	00bfffc4 	movi	r2,-1
 800735c:	00000c06 	br	8007390 <write+0xe4>
      }
      return rval;
 8007360:	e0bffc17 	ldw	r2,-16(fp)
 8007364:	00000a06 	br	8007390 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8007368:	80072700 	call	8007270 <alt_get_errno>
 800736c:	1007883a 	mov	r3,r2
 8007370:	00800344 	movi	r2,13
 8007374:	18800015 	stw	r2,0(r3)
 8007378:	00000406 	br	800738c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800737c:	80072700 	call	8007270 <alt_get_errno>
 8007380:	1007883a 	mov	r3,r2
 8007384:	00801444 	movi	r2,81
 8007388:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800738c:	00bfffc4 	movi	r2,-1
}
 8007390:	e037883a 	mov	sp,fp
 8007394:	dfc00117 	ldw	ra,4(sp)
 8007398:	df000017 	ldw	fp,0(sp)
 800739c:	dec00204 	addi	sp,sp,8
 80073a0:	f800283a 	ret

080073a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80073a4:	defffd04 	addi	sp,sp,-12
 80073a8:	dfc00215 	stw	ra,8(sp)
 80073ac:	df000115 	stw	fp,4(sp)
 80073b0:	df000104 	addi	fp,sp,4
 80073b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80073b8:	d1600804 	addi	r5,gp,-32736
 80073bc:	e13fff17 	ldw	r4,-4(fp)
 80073c0:	80081d80 	call	80081d8 <alt_dev_llist_insert>
}
 80073c4:	e037883a 	mov	sp,fp
 80073c8:	dfc00117 	ldw	ra,4(sp)
 80073cc:	df000017 	ldw	fp,0(sp)
 80073d0:	dec00204 	addi	sp,sp,8
 80073d4:	f800283a 	ret

080073d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80073d8:	defffd04 	addi	sp,sp,-12
 80073dc:	dfc00215 	stw	ra,8(sp)
 80073e0:	df000115 	stw	fp,4(sp)
 80073e4:	df000104 	addi	fp,sp,4
 80073e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80073ec:	80089a40 	call	80089a4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80073f0:	00800044 	movi	r2,1
 80073f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80073f8:	0001883a 	nop
 80073fc:	e037883a 	mov	sp,fp
 8007400:	dfc00117 	ldw	ra,4(sp)
 8007404:	df000017 	ldw	fp,0(sp)
 8007408:	dec00204 	addi	sp,sp,8
 800740c:	f800283a 	ret

08007410 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8007410:	defffe04 	addi	sp,sp,-8
 8007414:	dfc00115 	stw	ra,4(sp)
 8007418:	df000015 	stw	fp,0(sp)
 800741c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8007420:	000d883a 	mov	r6,zero
 8007424:	000b883a 	mov	r5,zero
 8007428:	01020074 	movhi	r4,2049
 800742c:	21270604 	addi	r4,r4,-25576
 8007430:	80075cc0 	call	80075cc <altera_avalon_jtag_uart_init>
 8007434:	01020074 	movhi	r4,2049
 8007438:	2126fc04 	addi	r4,r4,-25616
 800743c:	80073a40 	call	80073a4 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8007440:	00c00044 	movi	r3,1
 8007444:	00840034 	movhi	r2,4096
 8007448:	10840004 	addi	r2,r2,4096
 800744c:	10c00035 	stwio	r3,0(r2)
}
 8007450:	0001883a 	nop
 8007454:	e037883a 	mov	sp,fp
 8007458:	dfc00117 	ldw	ra,4(sp)
 800745c:	df000017 	ldw	fp,0(sp)
 8007460:	dec00204 	addi	sp,sp,8
 8007464:	f800283a 	ret

08007468 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8007468:	defffa04 	addi	sp,sp,-24
 800746c:	dfc00515 	stw	ra,20(sp)
 8007470:	df000415 	stw	fp,16(sp)
 8007474:	df000404 	addi	fp,sp,16
 8007478:	e13ffd15 	stw	r4,-12(fp)
 800747c:	e17ffe15 	stw	r5,-8(fp)
 8007480:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8007484:	e0bffd17 	ldw	r2,-12(fp)
 8007488:	10800017 	ldw	r2,0(r2)
 800748c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8007490:	e0bffc17 	ldw	r2,-16(fp)
 8007494:	10c00a04 	addi	r3,r2,40
 8007498:	e0bffd17 	ldw	r2,-12(fp)
 800749c:	10800217 	ldw	r2,8(r2)
 80074a0:	100f883a 	mov	r7,r2
 80074a4:	e1bfff17 	ldw	r6,-4(fp)
 80074a8:	e17ffe17 	ldw	r5,-8(fp)
 80074ac:	1809883a 	mov	r4,r3
 80074b0:	8007a900 	call	8007a90 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80074b4:	e037883a 	mov	sp,fp
 80074b8:	dfc00117 	ldw	ra,4(sp)
 80074bc:	df000017 	ldw	fp,0(sp)
 80074c0:	dec00204 	addi	sp,sp,8
 80074c4:	f800283a 	ret

080074c8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80074c8:	defffa04 	addi	sp,sp,-24
 80074cc:	dfc00515 	stw	ra,20(sp)
 80074d0:	df000415 	stw	fp,16(sp)
 80074d4:	df000404 	addi	fp,sp,16
 80074d8:	e13ffd15 	stw	r4,-12(fp)
 80074dc:	e17ffe15 	stw	r5,-8(fp)
 80074e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80074e4:	e0bffd17 	ldw	r2,-12(fp)
 80074e8:	10800017 	ldw	r2,0(r2)
 80074ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80074f0:	e0bffc17 	ldw	r2,-16(fp)
 80074f4:	10c00a04 	addi	r3,r2,40
 80074f8:	e0bffd17 	ldw	r2,-12(fp)
 80074fc:	10800217 	ldw	r2,8(r2)
 8007500:	100f883a 	mov	r7,r2
 8007504:	e1bfff17 	ldw	r6,-4(fp)
 8007508:	e17ffe17 	ldw	r5,-8(fp)
 800750c:	1809883a 	mov	r4,r3
 8007510:	8007cac0 	call	8007cac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8007514:	e037883a 	mov	sp,fp
 8007518:	dfc00117 	ldw	ra,4(sp)
 800751c:	df000017 	ldw	fp,0(sp)
 8007520:	dec00204 	addi	sp,sp,8
 8007524:	f800283a 	ret

08007528 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8007528:	defffc04 	addi	sp,sp,-16
 800752c:	dfc00315 	stw	ra,12(sp)
 8007530:	df000215 	stw	fp,8(sp)
 8007534:	df000204 	addi	fp,sp,8
 8007538:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800753c:	e0bfff17 	ldw	r2,-4(fp)
 8007540:	10800017 	ldw	r2,0(r2)
 8007544:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8007548:	e0bffe17 	ldw	r2,-8(fp)
 800754c:	10c00a04 	addi	r3,r2,40
 8007550:	e0bfff17 	ldw	r2,-4(fp)
 8007554:	10800217 	ldw	r2,8(r2)
 8007558:	100b883a 	mov	r5,r2
 800755c:	1809883a 	mov	r4,r3
 8007560:	80079380 	call	8007938 <altera_avalon_jtag_uart_close>
}
 8007564:	e037883a 	mov	sp,fp
 8007568:	dfc00117 	ldw	ra,4(sp)
 800756c:	df000017 	ldw	fp,0(sp)
 8007570:	dec00204 	addi	sp,sp,8
 8007574:	f800283a 	ret

08007578 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8007578:	defffa04 	addi	sp,sp,-24
 800757c:	dfc00515 	stw	ra,20(sp)
 8007580:	df000415 	stw	fp,16(sp)
 8007584:	df000404 	addi	fp,sp,16
 8007588:	e13ffd15 	stw	r4,-12(fp)
 800758c:	e17ffe15 	stw	r5,-8(fp)
 8007590:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8007594:	e0bffd17 	ldw	r2,-12(fp)
 8007598:	10800017 	ldw	r2,0(r2)
 800759c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80075a0:	e0bffc17 	ldw	r2,-16(fp)
 80075a4:	10800a04 	addi	r2,r2,40
 80075a8:	e1bfff17 	ldw	r6,-4(fp)
 80075ac:	e17ffe17 	ldw	r5,-8(fp)
 80075b0:	1009883a 	mov	r4,r2
 80075b4:	80079a00 	call	80079a0 <altera_avalon_jtag_uart_ioctl>
}
 80075b8:	e037883a 	mov	sp,fp
 80075bc:	dfc00117 	ldw	ra,4(sp)
 80075c0:	df000017 	ldw	fp,0(sp)
 80075c4:	dec00204 	addi	sp,sp,8
 80075c8:	f800283a 	ret

080075cc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80075cc:	defffa04 	addi	sp,sp,-24
 80075d0:	dfc00515 	stw	ra,20(sp)
 80075d4:	df000415 	stw	fp,16(sp)
 80075d8:	df000404 	addi	fp,sp,16
 80075dc:	e13ffd15 	stw	r4,-12(fp)
 80075e0:	e17ffe15 	stw	r5,-8(fp)
 80075e4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80075e8:	e0bffd17 	ldw	r2,-12(fp)
 80075ec:	00c00044 	movi	r3,1
 80075f0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80075f4:	e0bffd17 	ldw	r2,-12(fp)
 80075f8:	10800017 	ldw	r2,0(r2)
 80075fc:	10800104 	addi	r2,r2,4
 8007600:	1007883a 	mov	r3,r2
 8007604:	e0bffd17 	ldw	r2,-12(fp)
 8007608:	10800817 	ldw	r2,32(r2)
 800760c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8007610:	e0bffe17 	ldw	r2,-8(fp)
 8007614:	e0ffff17 	ldw	r3,-4(fp)
 8007618:	d8000015 	stw	zero,0(sp)
 800761c:	e1fffd17 	ldw	r7,-12(fp)
 8007620:	01820034 	movhi	r6,2048
 8007624:	319da304 	addi	r6,r6,30348
 8007628:	180b883a 	mov	r5,r3
 800762c:	1009883a 	mov	r4,r2
 8007630:	80083700 	call	8008370 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8007634:	e0bffd17 	ldw	r2,-12(fp)
 8007638:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800763c:	e0bffd17 	ldw	r2,-12(fp)
 8007640:	10800204 	addi	r2,r2,8
 8007644:	d0e6b817 	ldw	r3,-25888(gp)
 8007648:	e1fffd17 	ldw	r7,-12(fp)
 800764c:	01820034 	movhi	r6,2048
 8007650:	319e2604 	addi	r6,r6,30872
 8007654:	180b883a 	mov	r5,r3
 8007658:	1009883a 	mov	r4,r2
 800765c:	8007ed00 	call	8007ed0 <alt_alarm_start>
 8007660:	1000040e 	bge	r2,zero,8007674 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8007664:	e0fffd17 	ldw	r3,-12(fp)
 8007668:	00a00034 	movhi	r2,32768
 800766c:	10bfffc4 	addi	r2,r2,-1
 8007670:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8007674:	0001883a 	nop
 8007678:	e037883a 	mov	sp,fp
 800767c:	dfc00117 	ldw	ra,4(sp)
 8007680:	df000017 	ldw	fp,0(sp)
 8007684:	dec00204 	addi	sp,sp,8
 8007688:	f800283a 	ret

0800768c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800768c:	defff804 	addi	sp,sp,-32
 8007690:	df000715 	stw	fp,28(sp)
 8007694:	df000704 	addi	fp,sp,28
 8007698:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800769c:	e0bfff17 	ldw	r2,-4(fp)
 80076a0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80076a4:	e0bffb17 	ldw	r2,-20(fp)
 80076a8:	10800017 	ldw	r2,0(r2)
 80076ac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80076b0:	e0bffc17 	ldw	r2,-16(fp)
 80076b4:	10800104 	addi	r2,r2,4
 80076b8:	10800037 	ldwio	r2,0(r2)
 80076bc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80076c0:	e0bffd17 	ldw	r2,-12(fp)
 80076c4:	1080c00c 	andi	r2,r2,768
 80076c8:	10006d26 	beq	r2,zero,8007880 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80076cc:	e0bffd17 	ldw	r2,-12(fp)
 80076d0:	1080400c 	andi	r2,r2,256
 80076d4:	10003526 	beq	r2,zero,80077ac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80076d8:	00800074 	movhi	r2,1
 80076dc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80076e0:	e0bffb17 	ldw	r2,-20(fp)
 80076e4:	10800a17 	ldw	r2,40(r2)
 80076e8:	10800044 	addi	r2,r2,1
 80076ec:	1081ffcc 	andi	r2,r2,2047
 80076f0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80076f4:	e0bffb17 	ldw	r2,-20(fp)
 80076f8:	10c00b17 	ldw	r3,44(r2)
 80076fc:	e0bffe17 	ldw	r2,-8(fp)
 8007700:	18801526 	beq	r3,r2,8007758 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8007704:	e0bffc17 	ldw	r2,-16(fp)
 8007708:	10800037 	ldwio	r2,0(r2)
 800770c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8007710:	e0bff917 	ldw	r2,-28(fp)
 8007714:	10a0000c 	andi	r2,r2,32768
 8007718:	10001126 	beq	r2,zero,8007760 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800771c:	e0bffb17 	ldw	r2,-20(fp)
 8007720:	10800a17 	ldw	r2,40(r2)
 8007724:	e0fff917 	ldw	r3,-28(fp)
 8007728:	1809883a 	mov	r4,r3
 800772c:	e0fffb17 	ldw	r3,-20(fp)
 8007730:	1885883a 	add	r2,r3,r2
 8007734:	10800e04 	addi	r2,r2,56
 8007738:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800773c:	e0bffb17 	ldw	r2,-20(fp)
 8007740:	10800a17 	ldw	r2,40(r2)
 8007744:	10800044 	addi	r2,r2,1
 8007748:	10c1ffcc 	andi	r3,r2,2047
 800774c:	e0bffb17 	ldw	r2,-20(fp)
 8007750:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8007754:	003fe206 	br	80076e0 <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8007758:	0001883a 	nop
 800775c:	00000106 	br	8007764 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8007760:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8007764:	e0bff917 	ldw	r2,-28(fp)
 8007768:	10bfffec 	andhi	r2,r2,65535
 800776c:	10000f26 	beq	r2,zero,80077ac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8007770:	e0bffb17 	ldw	r2,-20(fp)
 8007774:	10c00817 	ldw	r3,32(r2)
 8007778:	00bfff84 	movi	r2,-2
 800777c:	1886703a 	and	r3,r3,r2
 8007780:	e0bffb17 	ldw	r2,-20(fp)
 8007784:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8007788:	e0bffc17 	ldw	r2,-16(fp)
 800778c:	10800104 	addi	r2,r2,4
 8007790:	1007883a 	mov	r3,r2
 8007794:	e0bffb17 	ldw	r2,-20(fp)
 8007798:	10800817 	ldw	r2,32(r2)
 800779c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80077a0:	e0bffc17 	ldw	r2,-16(fp)
 80077a4:	10800104 	addi	r2,r2,4
 80077a8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80077ac:	e0bffd17 	ldw	r2,-12(fp)
 80077b0:	1080800c 	andi	r2,r2,512
 80077b4:	103fbe26 	beq	r2,zero,80076b0 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80077b8:	e0bffd17 	ldw	r2,-12(fp)
 80077bc:	1004d43a 	srli	r2,r2,16
 80077c0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80077c4:	00001406 	br	8007818 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80077c8:	e0bffc17 	ldw	r2,-16(fp)
 80077cc:	e0fffb17 	ldw	r3,-20(fp)
 80077d0:	18c00d17 	ldw	r3,52(r3)
 80077d4:	e13ffb17 	ldw	r4,-20(fp)
 80077d8:	20c7883a 	add	r3,r4,r3
 80077dc:	18c20e04 	addi	r3,r3,2104
 80077e0:	18c00003 	ldbu	r3,0(r3)
 80077e4:	18c03fcc 	andi	r3,r3,255
 80077e8:	18c0201c 	xori	r3,r3,128
 80077ec:	18ffe004 	addi	r3,r3,-128
 80077f0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80077f4:	e0bffb17 	ldw	r2,-20(fp)
 80077f8:	10800d17 	ldw	r2,52(r2)
 80077fc:	10800044 	addi	r2,r2,1
 8007800:	10c1ffcc 	andi	r3,r2,2047
 8007804:	e0bffb17 	ldw	r2,-20(fp)
 8007808:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800780c:	e0bffa17 	ldw	r2,-24(fp)
 8007810:	10bfffc4 	addi	r2,r2,-1
 8007814:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8007818:	e0bffa17 	ldw	r2,-24(fp)
 800781c:	10000526 	beq	r2,zero,8007834 <altera_avalon_jtag_uart_irq+0x1a8>
 8007820:	e0bffb17 	ldw	r2,-20(fp)
 8007824:	10c00d17 	ldw	r3,52(r2)
 8007828:	e0bffb17 	ldw	r2,-20(fp)
 800782c:	10800c17 	ldw	r2,48(r2)
 8007830:	18bfe51e 	bne	r3,r2,80077c8 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8007834:	e0bffa17 	ldw	r2,-24(fp)
 8007838:	103f9d26 	beq	r2,zero,80076b0 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800783c:	e0bffb17 	ldw	r2,-20(fp)
 8007840:	10c00817 	ldw	r3,32(r2)
 8007844:	00bfff44 	movi	r2,-3
 8007848:	1886703a 	and	r3,r3,r2
 800784c:	e0bffb17 	ldw	r2,-20(fp)
 8007850:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8007854:	e0bffb17 	ldw	r2,-20(fp)
 8007858:	10800017 	ldw	r2,0(r2)
 800785c:	10800104 	addi	r2,r2,4
 8007860:	1007883a 	mov	r3,r2
 8007864:	e0bffb17 	ldw	r2,-20(fp)
 8007868:	10800817 	ldw	r2,32(r2)
 800786c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8007870:	e0bffc17 	ldw	r2,-16(fp)
 8007874:	10800104 	addi	r2,r2,4
 8007878:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800787c:	003f8c06 	br	80076b0 <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8007880:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8007884:	0001883a 	nop
 8007888:	e037883a 	mov	sp,fp
 800788c:	df000017 	ldw	fp,0(sp)
 8007890:	dec00104 	addi	sp,sp,4
 8007894:	f800283a 	ret

08007898 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8007898:	defff804 	addi	sp,sp,-32
 800789c:	df000715 	stw	fp,28(sp)
 80078a0:	df000704 	addi	fp,sp,28
 80078a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80078a8:	e0bffb17 	ldw	r2,-20(fp)
 80078ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80078b0:	e0bff917 	ldw	r2,-28(fp)
 80078b4:	10800017 	ldw	r2,0(r2)
 80078b8:	10800104 	addi	r2,r2,4
 80078bc:	10800037 	ldwio	r2,0(r2)
 80078c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80078c4:	e0bffa17 	ldw	r2,-24(fp)
 80078c8:	1081000c 	andi	r2,r2,1024
 80078cc:	10000b26 	beq	r2,zero,80078fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80078d0:	e0bff917 	ldw	r2,-28(fp)
 80078d4:	10800017 	ldw	r2,0(r2)
 80078d8:	10800104 	addi	r2,r2,4
 80078dc:	1007883a 	mov	r3,r2
 80078e0:	e0bff917 	ldw	r2,-28(fp)
 80078e4:	10800817 	ldw	r2,32(r2)
 80078e8:	10810014 	ori	r2,r2,1024
 80078ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80078f0:	e0bff917 	ldw	r2,-28(fp)
 80078f4:	10000915 	stw	zero,36(r2)
 80078f8:	00000a06 	br	8007924 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80078fc:	e0bff917 	ldw	r2,-28(fp)
 8007900:	10c00917 	ldw	r3,36(r2)
 8007904:	00a00034 	movhi	r2,32768
 8007908:	10bfff04 	addi	r2,r2,-4
 800790c:	10c00536 	bltu	r2,r3,8007924 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8007910:	e0bff917 	ldw	r2,-28(fp)
 8007914:	10800917 	ldw	r2,36(r2)
 8007918:	10c00044 	addi	r3,r2,1
 800791c:	e0bff917 	ldw	r2,-28(fp)
 8007920:	10c00915 	stw	r3,36(r2)
 8007924:	d0a6b817 	ldw	r2,-25888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8007928:	e037883a 	mov	sp,fp
 800792c:	df000017 	ldw	fp,0(sp)
 8007930:	dec00104 	addi	sp,sp,4
 8007934:	f800283a 	ret

08007938 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8007938:	defffd04 	addi	sp,sp,-12
 800793c:	df000215 	stw	fp,8(sp)
 8007940:	df000204 	addi	fp,sp,8
 8007944:	e13ffe15 	stw	r4,-8(fp)
 8007948:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800794c:	00000506 	br	8007964 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8007950:	e0bfff17 	ldw	r2,-4(fp)
 8007954:	1090000c 	andi	r2,r2,16384
 8007958:	10000226 	beq	r2,zero,8007964 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800795c:	00bffd44 	movi	r2,-11
 8007960:	00000b06 	br	8007990 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8007964:	e0bffe17 	ldw	r2,-8(fp)
 8007968:	10c00d17 	ldw	r3,52(r2)
 800796c:	e0bffe17 	ldw	r2,-8(fp)
 8007970:	10800c17 	ldw	r2,48(r2)
 8007974:	18800526 	beq	r3,r2,800798c <altera_avalon_jtag_uart_close+0x54>
 8007978:	e0bffe17 	ldw	r2,-8(fp)
 800797c:	10c00917 	ldw	r3,36(r2)
 8007980:	e0bffe17 	ldw	r2,-8(fp)
 8007984:	10800117 	ldw	r2,4(r2)
 8007988:	18bff136 	bltu	r3,r2,8007950 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800798c:	0005883a 	mov	r2,zero
}
 8007990:	e037883a 	mov	sp,fp
 8007994:	df000017 	ldw	fp,0(sp)
 8007998:	dec00104 	addi	sp,sp,4
 800799c:	f800283a 	ret

080079a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80079a0:	defffa04 	addi	sp,sp,-24
 80079a4:	df000515 	stw	fp,20(sp)
 80079a8:	df000504 	addi	fp,sp,20
 80079ac:	e13ffd15 	stw	r4,-12(fp)
 80079b0:	e17ffe15 	stw	r5,-8(fp)
 80079b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80079b8:	00bff9c4 	movi	r2,-25
 80079bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80079c0:	e0bffe17 	ldw	r2,-8(fp)
 80079c4:	10da8060 	cmpeqi	r3,r2,27137
 80079c8:	1800031e 	bne	r3,zero,80079d8 <altera_avalon_jtag_uart_ioctl+0x38>
 80079cc:	109a80a0 	cmpeqi	r2,r2,27138
 80079d0:	1000181e 	bne	r2,zero,8007a34 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80079d4:	00002906 	br	8007a7c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80079d8:	e0bffd17 	ldw	r2,-12(fp)
 80079dc:	10c00117 	ldw	r3,4(r2)
 80079e0:	00a00034 	movhi	r2,32768
 80079e4:	10bfffc4 	addi	r2,r2,-1
 80079e8:	18802126 	beq	r3,r2,8007a70 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80079ec:	e0bfff17 	ldw	r2,-4(fp)
 80079f0:	10800017 	ldw	r2,0(r2)
 80079f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80079f8:	e0bffc17 	ldw	r2,-16(fp)
 80079fc:	10800090 	cmplti	r2,r2,2
 8007a00:	1000061e 	bne	r2,zero,8007a1c <altera_avalon_jtag_uart_ioctl+0x7c>
 8007a04:	e0fffc17 	ldw	r3,-16(fp)
 8007a08:	00a00034 	movhi	r2,32768
 8007a0c:	10bfffc4 	addi	r2,r2,-1
 8007a10:	18800226 	beq	r3,r2,8007a1c <altera_avalon_jtag_uart_ioctl+0x7c>
 8007a14:	e0bffc17 	ldw	r2,-16(fp)
 8007a18:	00000206 	br	8007a24 <altera_avalon_jtag_uart_ioctl+0x84>
 8007a1c:	00a00034 	movhi	r2,32768
 8007a20:	10bfff84 	addi	r2,r2,-2
 8007a24:	e0fffd17 	ldw	r3,-12(fp)
 8007a28:	18800115 	stw	r2,4(r3)
      rc = 0;
 8007a2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8007a30:	00000f06 	br	8007a70 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8007a34:	e0bffd17 	ldw	r2,-12(fp)
 8007a38:	10c00117 	ldw	r3,4(r2)
 8007a3c:	00a00034 	movhi	r2,32768
 8007a40:	10bfffc4 	addi	r2,r2,-1
 8007a44:	18800c26 	beq	r3,r2,8007a78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8007a48:	e0bffd17 	ldw	r2,-12(fp)
 8007a4c:	10c00917 	ldw	r3,36(r2)
 8007a50:	e0bffd17 	ldw	r2,-12(fp)
 8007a54:	10800117 	ldw	r2,4(r2)
 8007a58:	1885803a 	cmpltu	r2,r3,r2
 8007a5c:	10c03fcc 	andi	r3,r2,255
 8007a60:	e0bfff17 	ldw	r2,-4(fp)
 8007a64:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8007a68:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8007a6c:	00000206 	br	8007a78 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8007a70:	0001883a 	nop
 8007a74:	00000106 	br	8007a7c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8007a78:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8007a7c:	e0bffb17 	ldw	r2,-20(fp)
}
 8007a80:	e037883a 	mov	sp,fp
 8007a84:	df000017 	ldw	fp,0(sp)
 8007a88:	dec00104 	addi	sp,sp,4
 8007a8c:	f800283a 	ret

08007a90 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8007a90:	defff304 	addi	sp,sp,-52
 8007a94:	dfc00c15 	stw	ra,48(sp)
 8007a98:	df000b15 	stw	fp,44(sp)
 8007a9c:	df000b04 	addi	fp,sp,44
 8007aa0:	e13ffc15 	stw	r4,-16(fp)
 8007aa4:	e17ffd15 	stw	r5,-12(fp)
 8007aa8:	e1bffe15 	stw	r6,-8(fp)
 8007aac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8007ab0:	e0bffd17 	ldw	r2,-12(fp)
 8007ab4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8007ab8:	00004706 	br	8007bd8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8007abc:	e0bffc17 	ldw	r2,-16(fp)
 8007ac0:	10800a17 	ldw	r2,40(r2)
 8007ac4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8007ac8:	e0bffc17 	ldw	r2,-16(fp)
 8007acc:	10800b17 	ldw	r2,44(r2)
 8007ad0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8007ad4:	e0fff717 	ldw	r3,-36(fp)
 8007ad8:	e0bff817 	ldw	r2,-32(fp)
 8007adc:	18800536 	bltu	r3,r2,8007af4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8007ae0:	e0fff717 	ldw	r3,-36(fp)
 8007ae4:	e0bff817 	ldw	r2,-32(fp)
 8007ae8:	1885c83a 	sub	r2,r3,r2
 8007aec:	e0bff615 	stw	r2,-40(fp)
 8007af0:	00000406 	br	8007b04 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8007af4:	00c20004 	movi	r3,2048
 8007af8:	e0bff817 	ldw	r2,-32(fp)
 8007afc:	1885c83a 	sub	r2,r3,r2
 8007b00:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8007b04:	e0bff617 	ldw	r2,-40(fp)
 8007b08:	10001e26 	beq	r2,zero,8007b84 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8007b0c:	e0fffe17 	ldw	r3,-8(fp)
 8007b10:	e0bff617 	ldw	r2,-40(fp)
 8007b14:	1880022e 	bgeu	r3,r2,8007b20 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8007b18:	e0bffe17 	ldw	r2,-8(fp)
 8007b1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8007b20:	e0bffc17 	ldw	r2,-16(fp)
 8007b24:	10c00e04 	addi	r3,r2,56
 8007b28:	e0bff817 	ldw	r2,-32(fp)
 8007b2c:	1885883a 	add	r2,r3,r2
 8007b30:	e1bff617 	ldw	r6,-40(fp)
 8007b34:	100b883a 	mov	r5,r2
 8007b38:	e13ff517 	ldw	r4,-44(fp)
 8007b3c:	8004e640 	call	8004e64 <memcpy>
      ptr   += n;
 8007b40:	e0fff517 	ldw	r3,-44(fp)
 8007b44:	e0bff617 	ldw	r2,-40(fp)
 8007b48:	1885883a 	add	r2,r3,r2
 8007b4c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8007b50:	e0fffe17 	ldw	r3,-8(fp)
 8007b54:	e0bff617 	ldw	r2,-40(fp)
 8007b58:	1885c83a 	sub	r2,r3,r2
 8007b5c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007b60:	e0fff817 	ldw	r3,-32(fp)
 8007b64:	e0bff617 	ldw	r2,-40(fp)
 8007b68:	1885883a 	add	r2,r3,r2
 8007b6c:	10c1ffcc 	andi	r3,r2,2047
 8007b70:	e0bffc17 	ldw	r2,-16(fp)
 8007b74:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8007b78:	e0bffe17 	ldw	r2,-8(fp)
 8007b7c:	00bfcf16 	blt	zero,r2,8007abc <altera_avalon_jtag_uart_read+0x2c>
 8007b80:	00000106 	br	8007b88 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8007b84:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8007b88:	e0fff517 	ldw	r3,-44(fp)
 8007b8c:	e0bffd17 	ldw	r2,-12(fp)
 8007b90:	1880141e 	bne	r3,r2,8007be4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8007b94:	e0bfff17 	ldw	r2,-4(fp)
 8007b98:	1090000c 	andi	r2,r2,16384
 8007b9c:	1000131e 	bne	r2,zero,8007bec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8007ba0:	0001883a 	nop
 8007ba4:	e0bffc17 	ldw	r2,-16(fp)
 8007ba8:	10c00a17 	ldw	r3,40(r2)
 8007bac:	e0bff717 	ldw	r2,-36(fp)
 8007bb0:	1880051e 	bne	r3,r2,8007bc8 <altera_avalon_jtag_uart_read+0x138>
 8007bb4:	e0bffc17 	ldw	r2,-16(fp)
 8007bb8:	10c00917 	ldw	r3,36(r2)
 8007bbc:	e0bffc17 	ldw	r2,-16(fp)
 8007bc0:	10800117 	ldw	r2,4(r2)
 8007bc4:	18bff736 	bltu	r3,r2,8007ba4 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8007bc8:	e0bffc17 	ldw	r2,-16(fp)
 8007bcc:	10c00a17 	ldw	r3,40(r2)
 8007bd0:	e0bff717 	ldw	r2,-36(fp)
 8007bd4:	18800726 	beq	r3,r2,8007bf4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8007bd8:	e0bffe17 	ldw	r2,-8(fp)
 8007bdc:	00bfb716 	blt	zero,r2,8007abc <altera_avalon_jtag_uart_read+0x2c>
 8007be0:	00000506 	br	8007bf8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8007be4:	0001883a 	nop
 8007be8:	00000306 	br	8007bf8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8007bec:	0001883a 	nop
 8007bf0:	00000106 	br	8007bf8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8007bf4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8007bf8:	e0fff517 	ldw	r3,-44(fp)
 8007bfc:	e0bffd17 	ldw	r2,-12(fp)
 8007c00:	18801826 	beq	r3,r2,8007c64 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007c04:	0005303a 	rdctl	r2,status
 8007c08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007c0c:	e0fffb17 	ldw	r3,-20(fp)
 8007c10:	00bfff84 	movi	r2,-2
 8007c14:	1884703a 	and	r2,r3,r2
 8007c18:	1001703a 	wrctl	status,r2
  
  return context;
 8007c1c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8007c20:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8007c24:	e0bffc17 	ldw	r2,-16(fp)
 8007c28:	10800817 	ldw	r2,32(r2)
 8007c2c:	10c00054 	ori	r3,r2,1
 8007c30:	e0bffc17 	ldw	r2,-16(fp)
 8007c34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8007c38:	e0bffc17 	ldw	r2,-16(fp)
 8007c3c:	10800017 	ldw	r2,0(r2)
 8007c40:	10800104 	addi	r2,r2,4
 8007c44:	1007883a 	mov	r3,r2
 8007c48:	e0bffc17 	ldw	r2,-16(fp)
 8007c4c:	10800817 	ldw	r2,32(r2)
 8007c50:	18800035 	stwio	r2,0(r3)
 8007c54:	e0bffa17 	ldw	r2,-24(fp)
 8007c58:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007c5c:	e0bff917 	ldw	r2,-28(fp)
 8007c60:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8007c64:	e0fff517 	ldw	r3,-44(fp)
 8007c68:	e0bffd17 	ldw	r2,-12(fp)
 8007c6c:	18800426 	beq	r3,r2,8007c80 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8007c70:	e0fff517 	ldw	r3,-44(fp)
 8007c74:	e0bffd17 	ldw	r2,-12(fp)
 8007c78:	1885c83a 	sub	r2,r3,r2
 8007c7c:	00000606 	br	8007c98 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8007c80:	e0bfff17 	ldw	r2,-4(fp)
 8007c84:	1090000c 	andi	r2,r2,16384
 8007c88:	10000226 	beq	r2,zero,8007c94 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8007c8c:	00bffd44 	movi	r2,-11
 8007c90:	00000106 	br	8007c98 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8007c94:	00bffec4 	movi	r2,-5
}
 8007c98:	e037883a 	mov	sp,fp
 8007c9c:	dfc00117 	ldw	ra,4(sp)
 8007ca0:	df000017 	ldw	fp,0(sp)
 8007ca4:	dec00204 	addi	sp,sp,8
 8007ca8:	f800283a 	ret

08007cac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8007cac:	defff304 	addi	sp,sp,-52
 8007cb0:	dfc00c15 	stw	ra,48(sp)
 8007cb4:	df000b15 	stw	fp,44(sp)
 8007cb8:	df000b04 	addi	fp,sp,44
 8007cbc:	e13ffc15 	stw	r4,-16(fp)
 8007cc0:	e17ffd15 	stw	r5,-12(fp)
 8007cc4:	e1bffe15 	stw	r6,-8(fp)
 8007cc8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8007ccc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8007cd0:	e0bffd17 	ldw	r2,-12(fp)
 8007cd4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8007cd8:	00003706 	br	8007db8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8007cdc:	e0bffc17 	ldw	r2,-16(fp)
 8007ce0:	10800c17 	ldw	r2,48(r2)
 8007ce4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8007ce8:	e0bffc17 	ldw	r2,-16(fp)
 8007cec:	10800d17 	ldw	r2,52(r2)
 8007cf0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8007cf4:	e0fff917 	ldw	r3,-28(fp)
 8007cf8:	e0bff517 	ldw	r2,-44(fp)
 8007cfc:	1880062e 	bgeu	r3,r2,8007d18 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8007d00:	e0fff517 	ldw	r3,-44(fp)
 8007d04:	e0bff917 	ldw	r2,-28(fp)
 8007d08:	1885c83a 	sub	r2,r3,r2
 8007d0c:	10bfffc4 	addi	r2,r2,-1
 8007d10:	e0bff615 	stw	r2,-40(fp)
 8007d14:	00000b06 	br	8007d44 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8007d18:	e0bff517 	ldw	r2,-44(fp)
 8007d1c:	10000526 	beq	r2,zero,8007d34 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8007d20:	00c20004 	movi	r3,2048
 8007d24:	e0bff917 	ldw	r2,-28(fp)
 8007d28:	1885c83a 	sub	r2,r3,r2
 8007d2c:	e0bff615 	stw	r2,-40(fp)
 8007d30:	00000406 	br	8007d44 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8007d34:	00c1ffc4 	movi	r3,2047
 8007d38:	e0bff917 	ldw	r2,-28(fp)
 8007d3c:	1885c83a 	sub	r2,r3,r2
 8007d40:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8007d44:	e0bff617 	ldw	r2,-40(fp)
 8007d48:	10001e26 	beq	r2,zero,8007dc4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8007d4c:	e0fffe17 	ldw	r3,-8(fp)
 8007d50:	e0bff617 	ldw	r2,-40(fp)
 8007d54:	1880022e 	bgeu	r3,r2,8007d60 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8007d58:	e0bffe17 	ldw	r2,-8(fp)
 8007d5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8007d60:	e0bffc17 	ldw	r2,-16(fp)
 8007d64:	10c20e04 	addi	r3,r2,2104
 8007d68:	e0bff917 	ldw	r2,-28(fp)
 8007d6c:	1885883a 	add	r2,r3,r2
 8007d70:	e1bff617 	ldw	r6,-40(fp)
 8007d74:	e17ffd17 	ldw	r5,-12(fp)
 8007d78:	1009883a 	mov	r4,r2
 8007d7c:	8004e640 	call	8004e64 <memcpy>
      ptr   += n;
 8007d80:	e0fffd17 	ldw	r3,-12(fp)
 8007d84:	e0bff617 	ldw	r2,-40(fp)
 8007d88:	1885883a 	add	r2,r3,r2
 8007d8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8007d90:	e0fffe17 	ldw	r3,-8(fp)
 8007d94:	e0bff617 	ldw	r2,-40(fp)
 8007d98:	1885c83a 	sub	r2,r3,r2
 8007d9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8007da0:	e0fff917 	ldw	r3,-28(fp)
 8007da4:	e0bff617 	ldw	r2,-40(fp)
 8007da8:	1885883a 	add	r2,r3,r2
 8007dac:	10c1ffcc 	andi	r3,r2,2047
 8007db0:	e0bffc17 	ldw	r2,-16(fp)
 8007db4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8007db8:	e0bffe17 	ldw	r2,-8(fp)
 8007dbc:	00bfc716 	blt	zero,r2,8007cdc <altera_avalon_jtag_uart_write+0x30>
 8007dc0:	00000106 	br	8007dc8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8007dc4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007dc8:	0005303a 	rdctl	r2,status
 8007dcc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007dd0:	e0fffb17 	ldw	r3,-20(fp)
 8007dd4:	00bfff84 	movi	r2,-2
 8007dd8:	1884703a 	and	r2,r3,r2
 8007ddc:	1001703a 	wrctl	status,r2
  
  return context;
 8007de0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8007de4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8007de8:	e0bffc17 	ldw	r2,-16(fp)
 8007dec:	10800817 	ldw	r2,32(r2)
 8007df0:	10c00094 	ori	r3,r2,2
 8007df4:	e0bffc17 	ldw	r2,-16(fp)
 8007df8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8007dfc:	e0bffc17 	ldw	r2,-16(fp)
 8007e00:	10800017 	ldw	r2,0(r2)
 8007e04:	10800104 	addi	r2,r2,4
 8007e08:	1007883a 	mov	r3,r2
 8007e0c:	e0bffc17 	ldw	r2,-16(fp)
 8007e10:	10800817 	ldw	r2,32(r2)
 8007e14:	18800035 	stwio	r2,0(r3)
 8007e18:	e0bffa17 	ldw	r2,-24(fp)
 8007e1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007e20:	e0bff817 	ldw	r2,-32(fp)
 8007e24:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8007e28:	e0bffe17 	ldw	r2,-8(fp)
 8007e2c:	0080100e 	bge	zero,r2,8007e70 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8007e30:	e0bfff17 	ldw	r2,-4(fp)
 8007e34:	1090000c 	andi	r2,r2,16384
 8007e38:	1000101e 	bne	r2,zero,8007e7c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8007e3c:	0001883a 	nop
 8007e40:	e0bffc17 	ldw	r2,-16(fp)
 8007e44:	10c00d17 	ldw	r3,52(r2)
 8007e48:	e0bff517 	ldw	r2,-44(fp)
 8007e4c:	1880051e 	bne	r3,r2,8007e64 <altera_avalon_jtag_uart_write+0x1b8>
 8007e50:	e0bffc17 	ldw	r2,-16(fp)
 8007e54:	10c00917 	ldw	r3,36(r2)
 8007e58:	e0bffc17 	ldw	r2,-16(fp)
 8007e5c:	10800117 	ldw	r2,4(r2)
 8007e60:	18bff736 	bltu	r3,r2,8007e40 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8007e64:	e0bffc17 	ldw	r2,-16(fp)
 8007e68:	10800917 	ldw	r2,36(r2)
 8007e6c:	1000051e 	bne	r2,zero,8007e84 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8007e70:	e0bffe17 	ldw	r2,-8(fp)
 8007e74:	00bfd016 	blt	zero,r2,8007db8 <altera_avalon_jtag_uart_write+0x10c>
 8007e78:	00000306 	br	8007e88 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8007e7c:	0001883a 	nop
 8007e80:	00000106 	br	8007e88 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8007e84:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8007e88:	e0fffd17 	ldw	r3,-12(fp)
 8007e8c:	e0bff717 	ldw	r2,-36(fp)
 8007e90:	18800426 	beq	r3,r2,8007ea4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8007e94:	e0fffd17 	ldw	r3,-12(fp)
 8007e98:	e0bff717 	ldw	r2,-36(fp)
 8007e9c:	1885c83a 	sub	r2,r3,r2
 8007ea0:	00000606 	br	8007ebc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8007ea4:	e0bfff17 	ldw	r2,-4(fp)
 8007ea8:	1090000c 	andi	r2,r2,16384
 8007eac:	10000226 	beq	r2,zero,8007eb8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8007eb0:	00bffd44 	movi	r2,-11
 8007eb4:	00000106 	br	8007ebc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8007eb8:	00bffec4 	movi	r2,-5
}
 8007ebc:	e037883a 	mov	sp,fp
 8007ec0:	dfc00117 	ldw	ra,4(sp)
 8007ec4:	df000017 	ldw	fp,0(sp)
 8007ec8:	dec00204 	addi	sp,sp,8
 8007ecc:	f800283a 	ret

08007ed0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8007ed0:	defff504 	addi	sp,sp,-44
 8007ed4:	df000a15 	stw	fp,40(sp)
 8007ed8:	df000a04 	addi	fp,sp,40
 8007edc:	e13ffc15 	stw	r4,-16(fp)
 8007ee0:	e17ffd15 	stw	r5,-12(fp)
 8007ee4:	e1bffe15 	stw	r6,-8(fp)
 8007ee8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8007eec:	e03ff615 	stw	zero,-40(fp)
 8007ef0:	d0a6b817 	ldw	r2,-25888(gp)
  
  if (alt_ticks_per_second ())
 8007ef4:	10003c26 	beq	r2,zero,8007fe8 <alt_alarm_start+0x118>
  {
    if (alarm)
 8007ef8:	e0bffc17 	ldw	r2,-16(fp)
 8007efc:	10003826 	beq	r2,zero,8007fe0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8007f00:	e0bffc17 	ldw	r2,-16(fp)
 8007f04:	e0fffe17 	ldw	r3,-8(fp)
 8007f08:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8007f0c:	e0bffc17 	ldw	r2,-16(fp)
 8007f10:	e0ffff17 	ldw	r3,-4(fp)
 8007f14:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8007f18:	0005303a 	rdctl	r2,status
 8007f1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8007f20:	e0fff917 	ldw	r3,-28(fp)
 8007f24:	00bfff84 	movi	r2,-2
 8007f28:	1884703a 	and	r2,r3,r2
 8007f2c:	1001703a 	wrctl	status,r2
  
  return context;
 8007f30:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8007f34:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8007f38:	d0a6b917 	ldw	r2,-25884(gp)
      
      current_nticks = alt_nticks();
 8007f3c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8007f40:	e0fffd17 	ldw	r3,-12(fp)
 8007f44:	e0bff617 	ldw	r2,-40(fp)
 8007f48:	1885883a 	add	r2,r3,r2
 8007f4c:	10c00044 	addi	r3,r2,1
 8007f50:	e0bffc17 	ldw	r2,-16(fp)
 8007f54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8007f58:	e0bffc17 	ldw	r2,-16(fp)
 8007f5c:	10c00217 	ldw	r3,8(r2)
 8007f60:	e0bff617 	ldw	r2,-40(fp)
 8007f64:	1880042e 	bgeu	r3,r2,8007f78 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8007f68:	e0bffc17 	ldw	r2,-16(fp)
 8007f6c:	00c00044 	movi	r3,1
 8007f70:	10c00405 	stb	r3,16(r2)
 8007f74:	00000206 	br	8007f80 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8007f78:	e0bffc17 	ldw	r2,-16(fp)
 8007f7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8007f80:	e0bffc17 	ldw	r2,-16(fp)
 8007f84:	d0e00d04 	addi	r3,gp,-32716
 8007f88:	e0fffa15 	stw	r3,-24(fp)
 8007f8c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8007f90:	e0bffb17 	ldw	r2,-20(fp)
 8007f94:	e0fffa17 	ldw	r3,-24(fp)
 8007f98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8007f9c:	e0bffa17 	ldw	r2,-24(fp)
 8007fa0:	10c00017 	ldw	r3,0(r2)
 8007fa4:	e0bffb17 	ldw	r2,-20(fp)
 8007fa8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8007fac:	e0bffa17 	ldw	r2,-24(fp)
 8007fb0:	10800017 	ldw	r2,0(r2)
 8007fb4:	e0fffb17 	ldw	r3,-20(fp)
 8007fb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8007fbc:	e0bffa17 	ldw	r2,-24(fp)
 8007fc0:	e0fffb17 	ldw	r3,-20(fp)
 8007fc4:	10c00015 	stw	r3,0(r2)
 8007fc8:	e0bff817 	ldw	r2,-32(fp)
 8007fcc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007fd0:	e0bff717 	ldw	r2,-36(fp)
 8007fd4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8007fd8:	0005883a 	mov	r2,zero
 8007fdc:	00000306 	br	8007fec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8007fe0:	00bffa84 	movi	r2,-22
 8007fe4:	00000106 	br	8007fec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8007fe8:	00bfde84 	movi	r2,-134
  }
}
 8007fec:	e037883a 	mov	sp,fp
 8007ff0:	df000017 	ldw	fp,0(sp)
 8007ff4:	dec00104 	addi	sp,sp,4
 8007ff8:	f800283a 	ret

08007ffc <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8007ffc:	defffa04 	addi	sp,sp,-24
 8008000:	dfc00515 	stw	ra,20(sp)
 8008004:	df000415 	stw	fp,16(sp)
 8008008:	df000404 	addi	fp,sp,16
 800800c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8008010:	008000c4 	movi	r2,3
 8008014:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8008018:	e0fffd17 	ldw	r3,-12(fp)
 800801c:	008003f4 	movhi	r2,15
 8008020:	10909004 	addi	r2,r2,16960
 8008024:	1885383a 	mul	r2,r3,r2
 8008028:	100b883a 	mov	r5,r2
 800802c:	0100bef4 	movhi	r4,763
 8008030:	213c2004 	addi	r4,r4,-3968
 8008034:	8000ce80 	call	8000ce8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8008038:	100b883a 	mov	r5,r2
 800803c:	01200034 	movhi	r4,32768
 8008040:	213fffc4 	addi	r4,r4,-1
 8008044:	8000ce80 	call	8000ce8 <__udivsi3>
 8008048:	100b883a 	mov	r5,r2
 800804c:	e13fff17 	ldw	r4,-4(fp)
 8008050:	8000ce80 	call	8000ce8 <__udivsi3>
 8008054:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8008058:	e0bffe17 	ldw	r2,-8(fp)
 800805c:	10002a26 	beq	r2,zero,8008108 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8008060:	e03ffc15 	stw	zero,-16(fp)
 8008064:	00001706 	br	80080c4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8008068:	00a00034 	movhi	r2,32768
 800806c:	10bfffc4 	addi	r2,r2,-1
 8008070:	10bfffc4 	addi	r2,r2,-1
 8008074:	103ffe1e 	bne	r2,zero,8008070 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8008078:	e0fffd17 	ldw	r3,-12(fp)
 800807c:	008003f4 	movhi	r2,15
 8008080:	10909004 	addi	r2,r2,16960
 8008084:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8008088:	100b883a 	mov	r5,r2
 800808c:	0100bef4 	movhi	r4,763
 8008090:	213c2004 	addi	r4,r4,-3968
 8008094:	8000ce80 	call	8000ce8 <__udivsi3>
 8008098:	100b883a 	mov	r5,r2
 800809c:	01200034 	movhi	r4,32768
 80080a0:	213fffc4 	addi	r4,r4,-1
 80080a4:	8000ce80 	call	8000ce8 <__udivsi3>
 80080a8:	1007883a 	mov	r3,r2
 80080ac:	e0bfff17 	ldw	r2,-4(fp)
 80080b0:	10c5c83a 	sub	r2,r2,r3
 80080b4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80080b8:	e0bffc17 	ldw	r2,-16(fp)
 80080bc:	10800044 	addi	r2,r2,1
 80080c0:	e0bffc15 	stw	r2,-16(fp)
 80080c4:	e0fffc17 	ldw	r3,-16(fp)
 80080c8:	e0bffe17 	ldw	r2,-8(fp)
 80080cc:	18bfe616 	blt	r3,r2,8008068 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80080d0:	e0fffd17 	ldw	r3,-12(fp)
 80080d4:	008003f4 	movhi	r2,15
 80080d8:	10909004 	addi	r2,r2,16960
 80080dc:	1885383a 	mul	r2,r3,r2
 80080e0:	100b883a 	mov	r5,r2
 80080e4:	0100bef4 	movhi	r4,763
 80080e8:	213c2004 	addi	r4,r4,-3968
 80080ec:	8000ce80 	call	8000ce8 <__udivsi3>
 80080f0:	1007883a 	mov	r3,r2
 80080f4:	e0bfff17 	ldw	r2,-4(fp)
 80080f8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80080fc:	10bfffc4 	addi	r2,r2,-1
 8008100:	103ffe1e 	bne	r2,zero,80080fc <alt_busy_sleep+0x100>
 8008104:	00000d06 	br	800813c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8008108:	e0fffd17 	ldw	r3,-12(fp)
 800810c:	008003f4 	movhi	r2,15
 8008110:	10909004 	addi	r2,r2,16960
 8008114:	1885383a 	mul	r2,r3,r2
 8008118:	100b883a 	mov	r5,r2
 800811c:	0100bef4 	movhi	r4,763
 8008120:	213c2004 	addi	r4,r4,-3968
 8008124:	8000ce80 	call	8000ce8 <__udivsi3>
 8008128:	1007883a 	mov	r3,r2
 800812c:	e0bfff17 	ldw	r2,-4(fp)
 8008130:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8008134:	10bfffc4 	addi	r2,r2,-1
 8008138:	00bffe16 	blt	zero,r2,8008134 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800813c:	0005883a 	mov	r2,zero
}
 8008140:	e037883a 	mov	sp,fp
 8008144:	dfc00117 	ldw	ra,4(sp)
 8008148:	df000017 	ldw	fp,0(sp)
 800814c:	dec00204 	addi	sp,sp,8
 8008150:	f800283a 	ret

08008154 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8008154:	defffe04 	addi	sp,sp,-8
 8008158:	df000115 	stw	fp,4(sp)
 800815c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8008160:	e03fff15 	stw	zero,-4(fp)
 8008164:	00000506 	br	800817c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8008168:	e0bfff17 	ldw	r2,-4(fp)
 800816c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8008170:	e0bfff17 	ldw	r2,-4(fp)
 8008174:	10800804 	addi	r2,r2,32
 8008178:	e0bfff15 	stw	r2,-4(fp)
 800817c:	e0bfff17 	ldw	r2,-4(fp)
 8008180:	10820030 	cmpltui	r2,r2,2048
 8008184:	103ff81e 	bne	r2,zero,8008168 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8008188:	0001883a 	nop
 800818c:	e037883a 	mov	sp,fp
 8008190:	df000017 	ldw	fp,0(sp)
 8008194:	dec00104 	addi	sp,sp,4
 8008198:	f800283a 	ret

0800819c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800819c:	defffe04 	addi	sp,sp,-8
 80081a0:	dfc00115 	stw	ra,4(sp)
 80081a4:	df000015 	stw	fp,0(sp)
 80081a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80081ac:	d0a00b17 	ldw	r2,-32724(gp)
 80081b0:	10000326 	beq	r2,zero,80081c0 <alt_get_errno+0x24>
 80081b4:	d0a00b17 	ldw	r2,-32724(gp)
 80081b8:	103ee83a 	callr	r2
 80081bc:	00000106 	br	80081c4 <alt_get_errno+0x28>
 80081c0:	d0a6ad04 	addi	r2,gp,-25932
}
 80081c4:	e037883a 	mov	sp,fp
 80081c8:	dfc00117 	ldw	ra,4(sp)
 80081cc:	df000017 	ldw	fp,0(sp)
 80081d0:	dec00204 	addi	sp,sp,8
 80081d4:	f800283a 	ret

080081d8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80081d8:	defffa04 	addi	sp,sp,-24
 80081dc:	dfc00515 	stw	ra,20(sp)
 80081e0:	df000415 	stw	fp,16(sp)
 80081e4:	df000404 	addi	fp,sp,16
 80081e8:	e13ffe15 	stw	r4,-8(fp)
 80081ec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80081f0:	e0bffe17 	ldw	r2,-8(fp)
 80081f4:	10000326 	beq	r2,zero,8008204 <alt_dev_llist_insert+0x2c>
 80081f8:	e0bffe17 	ldw	r2,-8(fp)
 80081fc:	10800217 	ldw	r2,8(r2)
 8008200:	1000061e 	bne	r2,zero,800821c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8008204:	800819c0 	call	800819c <alt_get_errno>
 8008208:	1007883a 	mov	r3,r2
 800820c:	00800584 	movi	r2,22
 8008210:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8008214:	00bffa84 	movi	r2,-22
 8008218:	00001306 	br	8008268 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800821c:	e0bffe17 	ldw	r2,-8(fp)
 8008220:	e0ffff17 	ldw	r3,-4(fp)
 8008224:	e0fffc15 	stw	r3,-16(fp)
 8008228:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800822c:	e0bffd17 	ldw	r2,-12(fp)
 8008230:	e0fffc17 	ldw	r3,-16(fp)
 8008234:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8008238:	e0bffc17 	ldw	r2,-16(fp)
 800823c:	10c00017 	ldw	r3,0(r2)
 8008240:	e0bffd17 	ldw	r2,-12(fp)
 8008244:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8008248:	e0bffc17 	ldw	r2,-16(fp)
 800824c:	10800017 	ldw	r2,0(r2)
 8008250:	e0fffd17 	ldw	r3,-12(fp)
 8008254:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8008258:	e0bffc17 	ldw	r2,-16(fp)
 800825c:	e0fffd17 	ldw	r3,-12(fp)
 8008260:	10c00015 	stw	r3,0(r2)

  return 0;  
 8008264:	0005883a 	mov	r2,zero
}
 8008268:	e037883a 	mov	sp,fp
 800826c:	dfc00117 	ldw	ra,4(sp)
 8008270:	df000017 	ldw	fp,0(sp)
 8008274:	dec00204 	addi	sp,sp,8
 8008278:	f800283a 	ret

0800827c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800827c:	defffd04 	addi	sp,sp,-12
 8008280:	dfc00215 	stw	ra,8(sp)
 8008284:	df000115 	stw	fp,4(sp)
 8008288:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800828c:	00820074 	movhi	r2,2049
 8008290:	10a43004 	addi	r2,r2,-28480
 8008294:	e0bfff15 	stw	r2,-4(fp)
 8008298:	00000606 	br	80082b4 <_do_ctors+0x38>
        (*ctor) (); 
 800829c:	e0bfff17 	ldw	r2,-4(fp)
 80082a0:	10800017 	ldw	r2,0(r2)
 80082a4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 80082a8:	e0bfff17 	ldw	r2,-4(fp)
 80082ac:	10bfff04 	addi	r2,r2,-4
 80082b0:	e0bfff15 	stw	r2,-4(fp)
 80082b4:	e0ffff17 	ldw	r3,-4(fp)
 80082b8:	00820074 	movhi	r2,2049
 80082bc:	10a43104 	addi	r2,r2,-28476
 80082c0:	18bff62e 	bgeu	r3,r2,800829c <_do_ctors+0x20>
        (*ctor) (); 
}
 80082c4:	0001883a 	nop
 80082c8:	e037883a 	mov	sp,fp
 80082cc:	dfc00117 	ldw	ra,4(sp)
 80082d0:	df000017 	ldw	fp,0(sp)
 80082d4:	dec00204 	addi	sp,sp,8
 80082d8:	f800283a 	ret

080082dc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80082dc:	defffd04 	addi	sp,sp,-12
 80082e0:	dfc00215 	stw	ra,8(sp)
 80082e4:	df000115 	stw	fp,4(sp)
 80082e8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80082ec:	00820074 	movhi	r2,2049
 80082f0:	10a43004 	addi	r2,r2,-28480
 80082f4:	e0bfff15 	stw	r2,-4(fp)
 80082f8:	00000606 	br	8008314 <_do_dtors+0x38>
        (*dtor) (); 
 80082fc:	e0bfff17 	ldw	r2,-4(fp)
 8008300:	10800017 	ldw	r2,0(r2)
 8008304:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8008308:	e0bfff17 	ldw	r2,-4(fp)
 800830c:	10bfff04 	addi	r2,r2,-4
 8008310:	e0bfff15 	stw	r2,-4(fp)
 8008314:	e0ffff17 	ldw	r3,-4(fp)
 8008318:	00820074 	movhi	r2,2049
 800831c:	10a43104 	addi	r2,r2,-28476
 8008320:	18bff62e 	bgeu	r3,r2,80082fc <_do_dtors+0x20>
        (*dtor) (); 
}
 8008324:	0001883a 	nop
 8008328:	e037883a 	mov	sp,fp
 800832c:	dfc00117 	ldw	ra,4(sp)
 8008330:	df000017 	ldw	fp,0(sp)
 8008334:	dec00204 	addi	sp,sp,8
 8008338:	f800283a 	ret

0800833c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800833c:	defffe04 	addi	sp,sp,-8
 8008340:	dfc00115 	stw	ra,4(sp)
 8008344:	df000015 	stw	fp,0(sp)
 8008348:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800834c:	01440004 	movi	r5,4096
 8008350:	0009883a 	mov	r4,zero
 8008354:	8008c040 	call	8008c04 <alt_icache_flush>
#endif
}
 8008358:	0001883a 	nop
 800835c:	e037883a 	mov	sp,fp
 8008360:	dfc00117 	ldw	ra,4(sp)
 8008364:	df000017 	ldw	fp,0(sp)
 8008368:	dec00204 	addi	sp,sp,8
 800836c:	f800283a 	ret

08008370 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8008370:	defff904 	addi	sp,sp,-28
 8008374:	dfc00615 	stw	ra,24(sp)
 8008378:	df000515 	stw	fp,20(sp)
 800837c:	df000504 	addi	fp,sp,20
 8008380:	e13ffc15 	stw	r4,-16(fp)
 8008384:	e17ffd15 	stw	r5,-12(fp)
 8008388:	e1bffe15 	stw	r6,-8(fp)
 800838c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8008390:	e0800217 	ldw	r2,8(fp)
 8008394:	d8800015 	stw	r2,0(sp)
 8008398:	e1ffff17 	ldw	r7,-4(fp)
 800839c:	e1bffe17 	ldw	r6,-8(fp)
 80083a0:	e17ffd17 	ldw	r5,-12(fp)
 80083a4:	e13ffc17 	ldw	r4,-16(fp)
 80083a8:	80085200 	call	8008520 <alt_iic_isr_register>
}  
 80083ac:	e037883a 	mov	sp,fp
 80083b0:	dfc00117 	ldw	ra,4(sp)
 80083b4:	df000017 	ldw	fp,0(sp)
 80083b8:	dec00204 	addi	sp,sp,8
 80083bc:	f800283a 	ret

080083c0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80083c0:	defff904 	addi	sp,sp,-28
 80083c4:	df000615 	stw	fp,24(sp)
 80083c8:	df000604 	addi	fp,sp,24
 80083cc:	e13ffe15 	stw	r4,-8(fp)
 80083d0:	e17fff15 	stw	r5,-4(fp)
 80083d4:	e0bfff17 	ldw	r2,-4(fp)
 80083d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80083dc:	0005303a 	rdctl	r2,status
 80083e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80083e4:	e0fffb17 	ldw	r3,-20(fp)
 80083e8:	00bfff84 	movi	r2,-2
 80083ec:	1884703a 	and	r2,r3,r2
 80083f0:	1001703a 	wrctl	status,r2
  
  return context;
 80083f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80083f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80083fc:	00c00044 	movi	r3,1
 8008400:	e0bffa17 	ldw	r2,-24(fp)
 8008404:	1884983a 	sll	r2,r3,r2
 8008408:	1007883a 	mov	r3,r2
 800840c:	d0a6ba17 	ldw	r2,-25880(gp)
 8008410:	1884b03a 	or	r2,r3,r2
 8008414:	d0a6ba15 	stw	r2,-25880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8008418:	d0a6ba17 	ldw	r2,-25880(gp)
 800841c:	100170fa 	wrctl	ienable,r2
 8008420:	e0bffc17 	ldw	r2,-16(fp)
 8008424:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8008428:	e0bffd17 	ldw	r2,-12(fp)
 800842c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8008430:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8008434:	0001883a 	nop
}
 8008438:	e037883a 	mov	sp,fp
 800843c:	df000017 	ldw	fp,0(sp)
 8008440:	dec00104 	addi	sp,sp,4
 8008444:	f800283a 	ret

08008448 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8008448:	defff904 	addi	sp,sp,-28
 800844c:	df000615 	stw	fp,24(sp)
 8008450:	df000604 	addi	fp,sp,24
 8008454:	e13ffe15 	stw	r4,-8(fp)
 8008458:	e17fff15 	stw	r5,-4(fp)
 800845c:	e0bfff17 	ldw	r2,-4(fp)
 8008460:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8008464:	0005303a 	rdctl	r2,status
 8008468:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800846c:	e0fffb17 	ldw	r3,-20(fp)
 8008470:	00bfff84 	movi	r2,-2
 8008474:	1884703a 	and	r2,r3,r2
 8008478:	1001703a 	wrctl	status,r2
  
  return context;
 800847c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8008480:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8008484:	00c00044 	movi	r3,1
 8008488:	e0bffa17 	ldw	r2,-24(fp)
 800848c:	1884983a 	sll	r2,r3,r2
 8008490:	0084303a 	nor	r2,zero,r2
 8008494:	1007883a 	mov	r3,r2
 8008498:	d0a6ba17 	ldw	r2,-25880(gp)
 800849c:	1884703a 	and	r2,r3,r2
 80084a0:	d0a6ba15 	stw	r2,-25880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80084a4:	d0a6ba17 	ldw	r2,-25880(gp)
 80084a8:	100170fa 	wrctl	ienable,r2
 80084ac:	e0bffc17 	ldw	r2,-16(fp)
 80084b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80084b4:	e0bffd17 	ldw	r2,-12(fp)
 80084b8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80084bc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80084c0:	0001883a 	nop
}
 80084c4:	e037883a 	mov	sp,fp
 80084c8:	df000017 	ldw	fp,0(sp)
 80084cc:	dec00104 	addi	sp,sp,4
 80084d0:	f800283a 	ret

080084d4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80084d4:	defffc04 	addi	sp,sp,-16
 80084d8:	df000315 	stw	fp,12(sp)
 80084dc:	df000304 	addi	fp,sp,12
 80084e0:	e13ffe15 	stw	r4,-8(fp)
 80084e4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80084e8:	000530fa 	rdctl	r2,ienable
 80084ec:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80084f0:	00c00044 	movi	r3,1
 80084f4:	e0bfff17 	ldw	r2,-4(fp)
 80084f8:	1884983a 	sll	r2,r3,r2
 80084fc:	1007883a 	mov	r3,r2
 8008500:	e0bffd17 	ldw	r2,-12(fp)
 8008504:	1884703a 	and	r2,r3,r2
 8008508:	1004c03a 	cmpne	r2,r2,zero
 800850c:	10803fcc 	andi	r2,r2,255
}
 8008510:	e037883a 	mov	sp,fp
 8008514:	df000017 	ldw	fp,0(sp)
 8008518:	dec00104 	addi	sp,sp,4
 800851c:	f800283a 	ret

08008520 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8008520:	defff504 	addi	sp,sp,-44
 8008524:	dfc00a15 	stw	ra,40(sp)
 8008528:	df000915 	stw	fp,36(sp)
 800852c:	df000904 	addi	fp,sp,36
 8008530:	e13ffc15 	stw	r4,-16(fp)
 8008534:	e17ffd15 	stw	r5,-12(fp)
 8008538:	e1bffe15 	stw	r6,-8(fp)
 800853c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8008540:	00bffa84 	movi	r2,-22
 8008544:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8008548:	e0bffd17 	ldw	r2,-12(fp)
 800854c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8008550:	e0bff817 	ldw	r2,-32(fp)
 8008554:	10800808 	cmpgei	r2,r2,32
 8008558:	1000271e 	bne	r2,zero,80085f8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800855c:	0005303a 	rdctl	r2,status
 8008560:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8008564:	e0fffb17 	ldw	r3,-20(fp)
 8008568:	00bfff84 	movi	r2,-2
 800856c:	1884703a 	and	r2,r3,r2
 8008570:	1001703a 	wrctl	status,r2
  
  return context;
 8008574:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8008578:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800857c:	00820074 	movhi	r2,2049
 8008580:	10b1da04 	addi	r2,r2,-14488
 8008584:	e0fff817 	ldw	r3,-32(fp)
 8008588:	180690fa 	slli	r3,r3,3
 800858c:	10c5883a 	add	r2,r2,r3
 8008590:	e0fffe17 	ldw	r3,-8(fp)
 8008594:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8008598:	00820074 	movhi	r2,2049
 800859c:	10b1da04 	addi	r2,r2,-14488
 80085a0:	e0fff817 	ldw	r3,-32(fp)
 80085a4:	180690fa 	slli	r3,r3,3
 80085a8:	10c5883a 	add	r2,r2,r3
 80085ac:	10800104 	addi	r2,r2,4
 80085b0:	e0ffff17 	ldw	r3,-4(fp)
 80085b4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80085b8:	e0bffe17 	ldw	r2,-8(fp)
 80085bc:	10000526 	beq	r2,zero,80085d4 <alt_iic_isr_register+0xb4>
 80085c0:	e0bff817 	ldw	r2,-32(fp)
 80085c4:	100b883a 	mov	r5,r2
 80085c8:	e13ffc17 	ldw	r4,-16(fp)
 80085cc:	80083c00 	call	80083c0 <alt_ic_irq_enable>
 80085d0:	00000406 	br	80085e4 <alt_iic_isr_register+0xc4>
 80085d4:	e0bff817 	ldw	r2,-32(fp)
 80085d8:	100b883a 	mov	r5,r2
 80085dc:	e13ffc17 	ldw	r4,-16(fp)
 80085e0:	80084480 	call	8008448 <alt_ic_irq_disable>
 80085e4:	e0bff715 	stw	r2,-36(fp)
 80085e8:	e0bffa17 	ldw	r2,-24(fp)
 80085ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80085f0:	e0bff917 	ldw	r2,-28(fp)
 80085f4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80085f8:	e0bff717 	ldw	r2,-36(fp)
}
 80085fc:	e037883a 	mov	sp,fp
 8008600:	dfc00117 	ldw	ra,4(sp)
 8008604:	df000017 	ldw	fp,0(sp)
 8008608:	dec00204 	addi	sp,sp,8
 800860c:	f800283a 	ret

08008610 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8008610:	defff904 	addi	sp,sp,-28
 8008614:	dfc00615 	stw	ra,24(sp)
 8008618:	df000515 	stw	fp,20(sp)
 800861c:	df000504 	addi	fp,sp,20
 8008620:	e13ffc15 	stw	r4,-16(fp)
 8008624:	e17ffd15 	stw	r5,-12(fp)
 8008628:	e1bffe15 	stw	r6,-8(fp)
 800862c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8008630:	e1bfff17 	ldw	r6,-4(fp)
 8008634:	e17ffe17 	ldw	r5,-8(fp)
 8008638:	e13ffd17 	ldw	r4,-12(fp)
 800863c:	80088500 	call	8008850 <open>
 8008640:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8008644:	e0bffb17 	ldw	r2,-20(fp)
 8008648:	10001c16 	blt	r2,zero,80086bc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800864c:	00820074 	movhi	r2,2049
 8008650:	10a69c04 	addi	r2,r2,-26000
 8008654:	e0fffb17 	ldw	r3,-20(fp)
 8008658:	18c00324 	muli	r3,r3,12
 800865c:	10c5883a 	add	r2,r2,r3
 8008660:	10c00017 	ldw	r3,0(r2)
 8008664:	e0bffc17 	ldw	r2,-16(fp)
 8008668:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800866c:	00820074 	movhi	r2,2049
 8008670:	10a69c04 	addi	r2,r2,-26000
 8008674:	e0fffb17 	ldw	r3,-20(fp)
 8008678:	18c00324 	muli	r3,r3,12
 800867c:	10c5883a 	add	r2,r2,r3
 8008680:	10800104 	addi	r2,r2,4
 8008684:	10c00017 	ldw	r3,0(r2)
 8008688:	e0bffc17 	ldw	r2,-16(fp)
 800868c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8008690:	00820074 	movhi	r2,2049
 8008694:	10a69c04 	addi	r2,r2,-26000
 8008698:	e0fffb17 	ldw	r3,-20(fp)
 800869c:	18c00324 	muli	r3,r3,12
 80086a0:	10c5883a 	add	r2,r2,r3
 80086a4:	10800204 	addi	r2,r2,8
 80086a8:	10c00017 	ldw	r3,0(r2)
 80086ac:	e0bffc17 	ldw	r2,-16(fp)
 80086b0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80086b4:	e13ffb17 	ldw	r4,-20(fp)
 80086b8:	8006f880 	call	8006f88 <alt_release_fd>
  }
} 
 80086bc:	0001883a 	nop
 80086c0:	e037883a 	mov	sp,fp
 80086c4:	dfc00117 	ldw	ra,4(sp)
 80086c8:	df000017 	ldw	fp,0(sp)
 80086cc:	dec00204 	addi	sp,sp,8
 80086d0:	f800283a 	ret

080086d4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80086d4:	defffb04 	addi	sp,sp,-20
 80086d8:	dfc00415 	stw	ra,16(sp)
 80086dc:	df000315 	stw	fp,12(sp)
 80086e0:	df000304 	addi	fp,sp,12
 80086e4:	e13ffd15 	stw	r4,-12(fp)
 80086e8:	e17ffe15 	stw	r5,-8(fp)
 80086ec:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80086f0:	01c07fc4 	movi	r7,511
 80086f4:	01800044 	movi	r6,1
 80086f8:	e17ffd17 	ldw	r5,-12(fp)
 80086fc:	01020074 	movhi	r4,2049
 8008700:	21269f04 	addi	r4,r4,-25988
 8008704:	80086100 	call	8008610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8008708:	01c07fc4 	movi	r7,511
 800870c:	000d883a 	mov	r6,zero
 8008710:	e17ffe17 	ldw	r5,-8(fp)
 8008714:	01020074 	movhi	r4,2049
 8008718:	21269c04 	addi	r4,r4,-26000
 800871c:	80086100 	call	8008610 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8008720:	01c07fc4 	movi	r7,511
 8008724:	01800044 	movi	r6,1
 8008728:	e17fff17 	ldw	r5,-4(fp)
 800872c:	01020074 	movhi	r4,2049
 8008730:	2126a204 	addi	r4,r4,-25976
 8008734:	80086100 	call	8008610 <alt_open_fd>
}  
 8008738:	0001883a 	nop
 800873c:	e037883a 	mov	sp,fp
 8008740:	dfc00117 	ldw	ra,4(sp)
 8008744:	df000017 	ldw	fp,0(sp)
 8008748:	dec00204 	addi	sp,sp,8
 800874c:	f800283a 	ret

08008750 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8008750:	defffe04 	addi	sp,sp,-8
 8008754:	dfc00115 	stw	ra,4(sp)
 8008758:	df000015 	stw	fp,0(sp)
 800875c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8008760:	d0a00b17 	ldw	r2,-32724(gp)
 8008764:	10000326 	beq	r2,zero,8008774 <alt_get_errno+0x24>
 8008768:	d0a00b17 	ldw	r2,-32724(gp)
 800876c:	103ee83a 	callr	r2
 8008770:	00000106 	br	8008778 <alt_get_errno+0x28>
 8008774:	d0a6ad04 	addi	r2,gp,-25932
}
 8008778:	e037883a 	mov	sp,fp
 800877c:	dfc00117 	ldw	ra,4(sp)
 8008780:	df000017 	ldw	fp,0(sp)
 8008784:	dec00204 	addi	sp,sp,8
 8008788:	f800283a 	ret

0800878c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800878c:	defffd04 	addi	sp,sp,-12
 8008790:	df000215 	stw	fp,8(sp)
 8008794:	df000204 	addi	fp,sp,8
 8008798:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800879c:	e0bfff17 	ldw	r2,-4(fp)
 80087a0:	10800217 	ldw	r2,8(r2)
 80087a4:	10d00034 	orhi	r3,r2,16384
 80087a8:	e0bfff17 	ldw	r2,-4(fp)
 80087ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80087b0:	e03ffe15 	stw	zero,-8(fp)
 80087b4:	00001d06 	br	800882c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80087b8:	00820074 	movhi	r2,2049
 80087bc:	10a69c04 	addi	r2,r2,-26000
 80087c0:	e0fffe17 	ldw	r3,-8(fp)
 80087c4:	18c00324 	muli	r3,r3,12
 80087c8:	10c5883a 	add	r2,r2,r3
 80087cc:	10c00017 	ldw	r3,0(r2)
 80087d0:	e0bfff17 	ldw	r2,-4(fp)
 80087d4:	10800017 	ldw	r2,0(r2)
 80087d8:	1880111e 	bne	r3,r2,8008820 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80087dc:	00820074 	movhi	r2,2049
 80087e0:	10a69c04 	addi	r2,r2,-26000
 80087e4:	e0fffe17 	ldw	r3,-8(fp)
 80087e8:	18c00324 	muli	r3,r3,12
 80087ec:	10c5883a 	add	r2,r2,r3
 80087f0:	10800204 	addi	r2,r2,8
 80087f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80087f8:	1000090e 	bge	r2,zero,8008820 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80087fc:	e0bffe17 	ldw	r2,-8(fp)
 8008800:	10c00324 	muli	r3,r2,12
 8008804:	00820074 	movhi	r2,2049
 8008808:	10a69c04 	addi	r2,r2,-26000
 800880c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8008810:	e0bfff17 	ldw	r2,-4(fp)
 8008814:	18800226 	beq	r3,r2,8008820 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8008818:	00bffcc4 	movi	r2,-13
 800881c:	00000806 	br	8008840 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8008820:	e0bffe17 	ldw	r2,-8(fp)
 8008824:	10800044 	addi	r2,r2,1
 8008828:	e0bffe15 	stw	r2,-8(fp)
 800882c:	d0a00a17 	ldw	r2,-32728(gp)
 8008830:	1007883a 	mov	r3,r2
 8008834:	e0bffe17 	ldw	r2,-8(fp)
 8008838:	18bfdf2e 	bgeu	r3,r2,80087b8 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800883c:	0005883a 	mov	r2,zero
}
 8008840:	e037883a 	mov	sp,fp
 8008844:	df000017 	ldw	fp,0(sp)
 8008848:	dec00104 	addi	sp,sp,4
 800884c:	f800283a 	ret

08008850 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8008850:	defff604 	addi	sp,sp,-40
 8008854:	dfc00915 	stw	ra,36(sp)
 8008858:	df000815 	stw	fp,32(sp)
 800885c:	df000804 	addi	fp,sp,32
 8008860:	e13ffd15 	stw	r4,-12(fp)
 8008864:	e17ffe15 	stw	r5,-8(fp)
 8008868:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800886c:	00bfffc4 	movi	r2,-1
 8008870:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8008874:	00bffb44 	movi	r2,-19
 8008878:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800887c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8008880:	d1600804 	addi	r5,gp,-32736
 8008884:	e13ffd17 	ldw	r4,-12(fp)
 8008888:	80089c80 	call	80089c8 <alt_find_dev>
 800888c:	e0bff815 	stw	r2,-32(fp)
 8008890:	e0bff817 	ldw	r2,-32(fp)
 8008894:	1000051e 	bne	r2,zero,80088ac <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8008898:	e13ffd17 	ldw	r4,-12(fp)
 800889c:	8008a580 	call	8008a58 <alt_find_file>
 80088a0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80088a4:	00800044 	movi	r2,1
 80088a8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80088ac:	e0bff817 	ldw	r2,-32(fp)
 80088b0:	10002926 	beq	r2,zero,8008958 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80088b4:	e13ff817 	ldw	r4,-32(fp)
 80088b8:	8008b600 	call	8008b60 <alt_get_fd>
 80088bc:	e0bff915 	stw	r2,-28(fp)
 80088c0:	e0bff917 	ldw	r2,-28(fp)
 80088c4:	1000030e 	bge	r2,zero,80088d4 <open+0x84>
    {
      status = index;
 80088c8:	e0bff917 	ldw	r2,-28(fp)
 80088cc:	e0bffa15 	stw	r2,-24(fp)
 80088d0:	00002306 	br	8008960 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 80088d4:	e0bff917 	ldw	r2,-28(fp)
 80088d8:	10c00324 	muli	r3,r2,12
 80088dc:	00820074 	movhi	r2,2049
 80088e0:	10a69c04 	addi	r2,r2,-26000
 80088e4:	1885883a 	add	r2,r3,r2
 80088e8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 80088ec:	e0fffe17 	ldw	r3,-8(fp)
 80088f0:	00900034 	movhi	r2,16384
 80088f4:	10bfffc4 	addi	r2,r2,-1
 80088f8:	1886703a 	and	r3,r3,r2
 80088fc:	e0bffc17 	ldw	r2,-16(fp)
 8008900:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8008904:	e0bffb17 	ldw	r2,-20(fp)
 8008908:	1000051e 	bne	r2,zero,8008920 <open+0xd0>
 800890c:	e13ffc17 	ldw	r4,-16(fp)
 8008910:	800878c0 	call	800878c <alt_file_locked>
 8008914:	e0bffa15 	stw	r2,-24(fp)
 8008918:	e0bffa17 	ldw	r2,-24(fp)
 800891c:	10001016 	blt	r2,zero,8008960 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8008920:	e0bff817 	ldw	r2,-32(fp)
 8008924:	10800317 	ldw	r2,12(r2)
 8008928:	10000826 	beq	r2,zero,800894c <open+0xfc>
 800892c:	e0bff817 	ldw	r2,-32(fp)
 8008930:	10800317 	ldw	r2,12(r2)
 8008934:	e1ffff17 	ldw	r7,-4(fp)
 8008938:	e1bffe17 	ldw	r6,-8(fp)
 800893c:	e17ffd17 	ldw	r5,-12(fp)
 8008940:	e13ffc17 	ldw	r4,-16(fp)
 8008944:	103ee83a 	callr	r2
 8008948:	00000106 	br	8008950 <open+0x100>
 800894c:	0005883a 	mov	r2,zero
 8008950:	e0bffa15 	stw	r2,-24(fp)
 8008954:	00000206 	br	8008960 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8008958:	00bffb44 	movi	r2,-19
 800895c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8008960:	e0bffa17 	ldw	r2,-24(fp)
 8008964:	1000090e 	bge	r2,zero,800898c <open+0x13c>
  {
    alt_release_fd (index);  
 8008968:	e13ff917 	ldw	r4,-28(fp)
 800896c:	8006f880 	call	8006f88 <alt_release_fd>
    ALT_ERRNO = -status;
 8008970:	80087500 	call	8008750 <alt_get_errno>
 8008974:	1007883a 	mov	r3,r2
 8008978:	e0bffa17 	ldw	r2,-24(fp)
 800897c:	0085c83a 	sub	r2,zero,r2
 8008980:	18800015 	stw	r2,0(r3)
    return -1;
 8008984:	00bfffc4 	movi	r2,-1
 8008988:	00000106 	br	8008990 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 800898c:	e0bff917 	ldw	r2,-28(fp)
}
 8008990:	e037883a 	mov	sp,fp
 8008994:	dfc00117 	ldw	ra,4(sp)
 8008998:	df000017 	ldw	fp,0(sp)
 800899c:	dec00204 	addi	sp,sp,8
 80089a0:	f800283a 	ret

080089a4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80089a4:	deffff04 	addi	sp,sp,-4
 80089a8:	df000015 	stw	fp,0(sp)
 80089ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80089b0:	000170fa 	wrctl	ienable,zero
}
 80089b4:	0001883a 	nop
 80089b8:	e037883a 	mov	sp,fp
 80089bc:	df000017 	ldw	fp,0(sp)
 80089c0:	dec00104 	addi	sp,sp,4
 80089c4:	f800283a 	ret

080089c8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80089c8:	defffa04 	addi	sp,sp,-24
 80089cc:	dfc00515 	stw	ra,20(sp)
 80089d0:	df000415 	stw	fp,16(sp)
 80089d4:	df000404 	addi	fp,sp,16
 80089d8:	e13ffe15 	stw	r4,-8(fp)
 80089dc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80089e0:	e0bfff17 	ldw	r2,-4(fp)
 80089e4:	10800017 	ldw	r2,0(r2)
 80089e8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80089ec:	e13ffe17 	ldw	r4,-8(fp)
 80089f0:	8003a4c0 	call	8003a4c <strlen>
 80089f4:	10800044 	addi	r2,r2,1
 80089f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80089fc:	00000d06 	br	8008a34 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8008a00:	e0bffc17 	ldw	r2,-16(fp)
 8008a04:	10800217 	ldw	r2,8(r2)
 8008a08:	e0fffd17 	ldw	r3,-12(fp)
 8008a0c:	180d883a 	mov	r6,r3
 8008a10:	e17ffe17 	ldw	r5,-8(fp)
 8008a14:	1009883a 	mov	r4,r2
 8008a18:	8008d7c0 	call	8008d7c <memcmp>
 8008a1c:	1000021e 	bne	r2,zero,8008a28 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8008a20:	e0bffc17 	ldw	r2,-16(fp)
 8008a24:	00000706 	br	8008a44 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8008a28:	e0bffc17 	ldw	r2,-16(fp)
 8008a2c:	10800017 	ldw	r2,0(r2)
 8008a30:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8008a34:	e0fffc17 	ldw	r3,-16(fp)
 8008a38:	e0bfff17 	ldw	r2,-4(fp)
 8008a3c:	18bff01e 	bne	r3,r2,8008a00 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8008a40:	0005883a 	mov	r2,zero
}
 8008a44:	e037883a 	mov	sp,fp
 8008a48:	dfc00117 	ldw	ra,4(sp)
 8008a4c:	df000017 	ldw	fp,0(sp)
 8008a50:	dec00204 	addi	sp,sp,8
 8008a54:	f800283a 	ret

08008a58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8008a58:	defffb04 	addi	sp,sp,-20
 8008a5c:	dfc00415 	stw	ra,16(sp)
 8008a60:	df000315 	stw	fp,12(sp)
 8008a64:	df000304 	addi	fp,sp,12
 8008a68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8008a6c:	d0a00617 	ldw	r2,-32744(gp)
 8008a70:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8008a74:	00003106 	br	8008b3c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8008a78:	e0bffd17 	ldw	r2,-12(fp)
 8008a7c:	10800217 	ldw	r2,8(r2)
 8008a80:	1009883a 	mov	r4,r2
 8008a84:	8003a4c0 	call	8003a4c <strlen>
 8008a88:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8008a8c:	e0bffd17 	ldw	r2,-12(fp)
 8008a90:	10c00217 	ldw	r3,8(r2)
 8008a94:	e0bffe17 	ldw	r2,-8(fp)
 8008a98:	10bfffc4 	addi	r2,r2,-1
 8008a9c:	1885883a 	add	r2,r3,r2
 8008aa0:	10800003 	ldbu	r2,0(r2)
 8008aa4:	10803fcc 	andi	r2,r2,255
 8008aa8:	1080201c 	xori	r2,r2,128
 8008aac:	10bfe004 	addi	r2,r2,-128
 8008ab0:	10800bd8 	cmpnei	r2,r2,47
 8008ab4:	1000031e 	bne	r2,zero,8008ac4 <alt_find_file+0x6c>
    {
      len -= 1;
 8008ab8:	e0bffe17 	ldw	r2,-8(fp)
 8008abc:	10bfffc4 	addi	r2,r2,-1
 8008ac0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8008ac4:	e0bffe17 	ldw	r2,-8(fp)
 8008ac8:	e0ffff17 	ldw	r3,-4(fp)
 8008acc:	1885883a 	add	r2,r3,r2
 8008ad0:	10800003 	ldbu	r2,0(r2)
 8008ad4:	10803fcc 	andi	r2,r2,255
 8008ad8:	1080201c 	xori	r2,r2,128
 8008adc:	10bfe004 	addi	r2,r2,-128
 8008ae0:	10800be0 	cmpeqi	r2,r2,47
 8008ae4:	1000081e 	bne	r2,zero,8008b08 <alt_find_file+0xb0>
 8008ae8:	e0bffe17 	ldw	r2,-8(fp)
 8008aec:	e0ffff17 	ldw	r3,-4(fp)
 8008af0:	1885883a 	add	r2,r3,r2
 8008af4:	10800003 	ldbu	r2,0(r2)
 8008af8:	10803fcc 	andi	r2,r2,255
 8008afc:	1080201c 	xori	r2,r2,128
 8008b00:	10bfe004 	addi	r2,r2,-128
 8008b04:	10000a1e 	bne	r2,zero,8008b30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8008b08:	e0bffd17 	ldw	r2,-12(fp)
 8008b0c:	10800217 	ldw	r2,8(r2)
 8008b10:	e0fffe17 	ldw	r3,-8(fp)
 8008b14:	180d883a 	mov	r6,r3
 8008b18:	e17fff17 	ldw	r5,-4(fp)
 8008b1c:	1009883a 	mov	r4,r2
 8008b20:	8008d7c0 	call	8008d7c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8008b24:	1000021e 	bne	r2,zero,8008b30 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8008b28:	e0bffd17 	ldw	r2,-12(fp)
 8008b2c:	00000706 	br	8008b4c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8008b30:	e0bffd17 	ldw	r2,-12(fp)
 8008b34:	10800017 	ldw	r2,0(r2)
 8008b38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8008b3c:	e0fffd17 	ldw	r3,-12(fp)
 8008b40:	d0a00604 	addi	r2,gp,-32744
 8008b44:	18bfcc1e 	bne	r3,r2,8008a78 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8008b48:	0005883a 	mov	r2,zero
}
 8008b4c:	e037883a 	mov	sp,fp
 8008b50:	dfc00117 	ldw	ra,4(sp)
 8008b54:	df000017 	ldw	fp,0(sp)
 8008b58:	dec00204 	addi	sp,sp,8
 8008b5c:	f800283a 	ret

08008b60 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8008b60:	defffc04 	addi	sp,sp,-16
 8008b64:	df000315 	stw	fp,12(sp)
 8008b68:	df000304 	addi	fp,sp,12
 8008b6c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8008b70:	00bffa04 	movi	r2,-24
 8008b74:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8008b78:	e03ffd15 	stw	zero,-12(fp)
 8008b7c:	00001906 	br	8008be4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8008b80:	00820074 	movhi	r2,2049
 8008b84:	10a69c04 	addi	r2,r2,-26000
 8008b88:	e0fffd17 	ldw	r3,-12(fp)
 8008b8c:	18c00324 	muli	r3,r3,12
 8008b90:	10c5883a 	add	r2,r2,r3
 8008b94:	10800017 	ldw	r2,0(r2)
 8008b98:	10000f1e 	bne	r2,zero,8008bd8 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8008b9c:	00820074 	movhi	r2,2049
 8008ba0:	10a69c04 	addi	r2,r2,-26000
 8008ba4:	e0fffd17 	ldw	r3,-12(fp)
 8008ba8:	18c00324 	muli	r3,r3,12
 8008bac:	10c5883a 	add	r2,r2,r3
 8008bb0:	e0ffff17 	ldw	r3,-4(fp)
 8008bb4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8008bb8:	d0e00a17 	ldw	r3,-32728(gp)
 8008bbc:	e0bffd17 	ldw	r2,-12(fp)
 8008bc0:	1880020e 	bge	r3,r2,8008bcc <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 8008bc4:	e0bffd17 	ldw	r2,-12(fp)
 8008bc8:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 8008bcc:	e0bffd17 	ldw	r2,-12(fp)
 8008bd0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8008bd4:	00000606 	br	8008bf0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8008bd8:	e0bffd17 	ldw	r2,-12(fp)
 8008bdc:	10800044 	addi	r2,r2,1
 8008be0:	e0bffd15 	stw	r2,-12(fp)
 8008be4:	e0bffd17 	ldw	r2,-12(fp)
 8008be8:	10800810 	cmplti	r2,r2,32
 8008bec:	103fe41e 	bne	r2,zero,8008b80 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8008bf0:	e0bffe17 	ldw	r2,-8(fp)
}
 8008bf4:	e037883a 	mov	sp,fp
 8008bf8:	df000017 	ldw	fp,0(sp)
 8008bfc:	dec00104 	addi	sp,sp,4
 8008c00:	f800283a 	ret

08008c04 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8008c04:	defffb04 	addi	sp,sp,-20
 8008c08:	df000415 	stw	fp,16(sp)
 8008c0c:	df000404 	addi	fp,sp,16
 8008c10:	e13ffe15 	stw	r4,-8(fp)
 8008c14:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8008c18:	e0bfff17 	ldw	r2,-4(fp)
 8008c1c:	10840070 	cmpltui	r2,r2,4097
 8008c20:	1000021e 	bne	r2,zero,8008c2c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8008c24:	00840004 	movi	r2,4096
 8008c28:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8008c2c:	e0fffe17 	ldw	r3,-8(fp)
 8008c30:	e0bfff17 	ldw	r2,-4(fp)
 8008c34:	1885883a 	add	r2,r3,r2
 8008c38:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008c3c:	e0bffe17 	ldw	r2,-8(fp)
 8008c40:	e0bffc15 	stw	r2,-16(fp)
 8008c44:	00000506 	br	8008c5c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8008c48:	e0bffc17 	ldw	r2,-16(fp)
 8008c4c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8008c50:	e0bffc17 	ldw	r2,-16(fp)
 8008c54:	10800804 	addi	r2,r2,32
 8008c58:	e0bffc15 	stw	r2,-16(fp)
 8008c5c:	e0fffc17 	ldw	r3,-16(fp)
 8008c60:	e0bffd17 	ldw	r2,-12(fp)
 8008c64:	18bff836 	bltu	r3,r2,8008c48 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8008c68:	e0bffe17 	ldw	r2,-8(fp)
 8008c6c:	108007cc 	andi	r2,r2,31
 8008c70:	10000226 	beq	r2,zero,8008c7c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8008c74:	e0bffc17 	ldw	r2,-16(fp)
 8008c78:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8008c7c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8008c80:	0001883a 	nop
 8008c84:	e037883a 	mov	sp,fp
 8008c88:	df000017 	ldw	fp,0(sp)
 8008c8c:	dec00104 	addi	sp,sp,4
 8008c90:	f800283a 	ret

08008c94 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8008c94:	defffe04 	addi	sp,sp,-8
 8008c98:	df000115 	stw	fp,4(sp)
 8008c9c:	df000104 	addi	fp,sp,4
 8008ca0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8008ca4:	e0bfff17 	ldw	r2,-4(fp)
 8008ca8:	10bffe84 	addi	r2,r2,-6
 8008cac:	10c00428 	cmpgeui	r3,r2,16
 8008cb0:	18001a1e 	bne	r3,zero,8008d1c <alt_exception_cause_generated_bad_addr+0x88>
 8008cb4:	100690ba 	slli	r3,r2,2
 8008cb8:	00820074 	movhi	r2,2049
 8008cbc:	10a33304 	addi	r2,r2,-29492
 8008cc0:	1885883a 	add	r2,r3,r2
 8008cc4:	10800017 	ldw	r2,0(r2)
 8008cc8:	1000683a 	jmp	r2
 8008ccc:	08008d0c 	andi	zero,at,564
 8008cd0:	08008d0c 	andi	zero,at,564
 8008cd4:	08008d1c 	xori	zero,at,564
 8008cd8:	08008d1c 	xori	zero,at,564
 8008cdc:	08008d1c 	xori	zero,at,564
 8008ce0:	08008d0c 	andi	zero,at,564
 8008ce4:	08008d14 	ori	zero,at,564
 8008ce8:	08008d1c 	xori	zero,at,564
 8008cec:	08008d0c 	andi	zero,at,564
 8008cf0:	08008d0c 	andi	zero,at,564
 8008cf4:	08008d1c 	xori	zero,at,564
 8008cf8:	08008d0c 	andi	zero,at,564
 8008cfc:	08008d14 	ori	zero,at,564
 8008d00:	08008d1c 	xori	zero,at,564
 8008d04:	08008d1c 	xori	zero,at,564
 8008d08:	08008d0c 	andi	zero,at,564
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8008d0c:	00800044 	movi	r2,1
 8008d10:	00000306 	br	8008d20 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8008d14:	0005883a 	mov	r2,zero
 8008d18:	00000106 	br	8008d20 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8008d1c:	0005883a 	mov	r2,zero
  }
}
 8008d20:	e037883a 	mov	sp,fp
 8008d24:	df000017 	ldw	fp,0(sp)
 8008d28:	dec00104 	addi	sp,sp,4
 8008d2c:	f800283a 	ret

08008d30 <atexit>:
 8008d30:	200b883a 	mov	r5,r4
 8008d34:	000f883a 	mov	r7,zero
 8008d38:	000d883a 	mov	r6,zero
 8008d3c:	0009883a 	mov	r4,zero
 8008d40:	8008df81 	jmpi	8008df8 <__register_exitproc>

08008d44 <exit>:
 8008d44:	defffe04 	addi	sp,sp,-8
 8008d48:	000b883a 	mov	r5,zero
 8008d4c:	dc000015 	stw	r16,0(sp)
 8008d50:	dfc00115 	stw	ra,4(sp)
 8008d54:	2021883a 	mov	r16,r4
 8008d58:	8008f100 	call	8008f10 <__call_exitprocs>
 8008d5c:	00820074 	movhi	r2,2049
 8008d60:	10ab1604 	addi	r2,r2,-21416
 8008d64:	11000017 	ldw	r4,0(r2)
 8008d68:	20800f17 	ldw	r2,60(r4)
 8008d6c:	10000126 	beq	r2,zero,8008d74 <exit+0x30>
 8008d70:	103ee83a 	callr	r2
 8008d74:	8009883a 	mov	r4,r16
 8008d78:	80090900 	call	8009090 <_exit>

08008d7c <memcmp>:
 8008d7c:	01c000c4 	movi	r7,3
 8008d80:	3980192e 	bgeu	r7,r6,8008de8 <memcmp+0x6c>
 8008d84:	2144b03a 	or	r2,r4,r5
 8008d88:	11c4703a 	and	r2,r2,r7
 8008d8c:	10000f26 	beq	r2,zero,8008dcc <memcmp+0x50>
 8008d90:	20800003 	ldbu	r2,0(r4)
 8008d94:	28c00003 	ldbu	r3,0(r5)
 8008d98:	10c0151e 	bne	r2,r3,8008df0 <memcmp+0x74>
 8008d9c:	31bfff84 	addi	r6,r6,-2
 8008da0:	01ffffc4 	movi	r7,-1
 8008da4:	00000406 	br	8008db8 <memcmp+0x3c>
 8008da8:	20800003 	ldbu	r2,0(r4)
 8008dac:	28c00003 	ldbu	r3,0(r5)
 8008db0:	31bfffc4 	addi	r6,r6,-1
 8008db4:	10c00e1e 	bne	r2,r3,8008df0 <memcmp+0x74>
 8008db8:	21000044 	addi	r4,r4,1
 8008dbc:	29400044 	addi	r5,r5,1
 8008dc0:	31fff91e 	bne	r6,r7,8008da8 <memcmp+0x2c>
 8008dc4:	0005883a 	mov	r2,zero
 8008dc8:	f800283a 	ret
 8008dcc:	20c00017 	ldw	r3,0(r4)
 8008dd0:	28800017 	ldw	r2,0(r5)
 8008dd4:	18bfee1e 	bne	r3,r2,8008d90 <memcmp+0x14>
 8008dd8:	31bfff04 	addi	r6,r6,-4
 8008ddc:	21000104 	addi	r4,r4,4
 8008de0:	29400104 	addi	r5,r5,4
 8008de4:	39bff936 	bltu	r7,r6,8008dcc <memcmp+0x50>
 8008de8:	303fe91e 	bne	r6,zero,8008d90 <memcmp+0x14>
 8008dec:	003ff506 	br	8008dc4 <memcmp+0x48>
 8008df0:	10c5c83a 	sub	r2,r2,r3
 8008df4:	f800283a 	ret

08008df8 <__register_exitproc>:
 8008df8:	defffa04 	addi	sp,sp,-24
 8008dfc:	dc000315 	stw	r16,12(sp)
 8008e00:	04020074 	movhi	r16,2049
 8008e04:	842b1604 	addi	r16,r16,-21416
 8008e08:	80c00017 	ldw	r3,0(r16)
 8008e0c:	dc400415 	stw	r17,16(sp)
 8008e10:	dfc00515 	stw	ra,20(sp)
 8008e14:	18805217 	ldw	r2,328(r3)
 8008e18:	2023883a 	mov	r17,r4
 8008e1c:	10003726 	beq	r2,zero,8008efc <__register_exitproc+0x104>
 8008e20:	10c00117 	ldw	r3,4(r2)
 8008e24:	010007c4 	movi	r4,31
 8008e28:	20c00e16 	blt	r4,r3,8008e64 <__register_exitproc+0x6c>
 8008e2c:	1a000044 	addi	r8,r3,1
 8008e30:	8800221e 	bne	r17,zero,8008ebc <__register_exitproc+0xc4>
 8008e34:	18c00084 	addi	r3,r3,2
 8008e38:	18c7883a 	add	r3,r3,r3
 8008e3c:	18c7883a 	add	r3,r3,r3
 8008e40:	12000115 	stw	r8,4(r2)
 8008e44:	10c7883a 	add	r3,r2,r3
 8008e48:	19400015 	stw	r5,0(r3)
 8008e4c:	0005883a 	mov	r2,zero
 8008e50:	dfc00517 	ldw	ra,20(sp)
 8008e54:	dc400417 	ldw	r17,16(sp)
 8008e58:	dc000317 	ldw	r16,12(sp)
 8008e5c:	dec00604 	addi	sp,sp,24
 8008e60:	f800283a 	ret
 8008e64:	00800034 	movhi	r2,0
 8008e68:	10800004 	addi	r2,r2,0
 8008e6c:	10002626 	beq	r2,zero,8008f08 <__register_exitproc+0x110>
 8008e70:	01006404 	movi	r4,400
 8008e74:	d9400015 	stw	r5,0(sp)
 8008e78:	d9800115 	stw	r6,4(sp)
 8008e7c:	d9c00215 	stw	r7,8(sp)
 8008e80:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8008e84:	d9400017 	ldw	r5,0(sp)
 8008e88:	d9800117 	ldw	r6,4(sp)
 8008e8c:	d9c00217 	ldw	r7,8(sp)
 8008e90:	10001d26 	beq	r2,zero,8008f08 <__register_exitproc+0x110>
 8008e94:	81000017 	ldw	r4,0(r16)
 8008e98:	10000115 	stw	zero,4(r2)
 8008e9c:	02000044 	movi	r8,1
 8008ea0:	22405217 	ldw	r9,328(r4)
 8008ea4:	0007883a 	mov	r3,zero
 8008ea8:	12400015 	stw	r9,0(r2)
 8008eac:	20805215 	stw	r2,328(r4)
 8008eb0:	10006215 	stw	zero,392(r2)
 8008eb4:	10006315 	stw	zero,396(r2)
 8008eb8:	883fde26 	beq	r17,zero,8008e34 <__register_exitproc+0x3c>
 8008ebc:	18c9883a 	add	r4,r3,r3
 8008ec0:	2109883a 	add	r4,r4,r4
 8008ec4:	1109883a 	add	r4,r2,r4
 8008ec8:	21802215 	stw	r6,136(r4)
 8008ecc:	01800044 	movi	r6,1
 8008ed0:	12406217 	ldw	r9,392(r2)
 8008ed4:	30cc983a 	sll	r6,r6,r3
 8008ed8:	4992b03a 	or	r9,r9,r6
 8008edc:	12406215 	stw	r9,392(r2)
 8008ee0:	21c04215 	stw	r7,264(r4)
 8008ee4:	01000084 	movi	r4,2
 8008ee8:	893fd21e 	bne	r17,r4,8008e34 <__register_exitproc+0x3c>
 8008eec:	11006317 	ldw	r4,396(r2)
 8008ef0:	218cb03a 	or	r6,r4,r6
 8008ef4:	11806315 	stw	r6,396(r2)
 8008ef8:	003fce06 	br	8008e34 <__register_exitproc+0x3c>
 8008efc:	18805304 	addi	r2,r3,332
 8008f00:	18805215 	stw	r2,328(r3)
 8008f04:	003fc606 	br	8008e20 <__register_exitproc+0x28>
 8008f08:	00bfffc4 	movi	r2,-1
 8008f0c:	003fd006 	br	8008e50 <__register_exitproc+0x58>

08008f10 <__call_exitprocs>:
 8008f10:	defff504 	addi	sp,sp,-44
 8008f14:	df000915 	stw	fp,36(sp)
 8008f18:	dd400615 	stw	r21,24(sp)
 8008f1c:	dc800315 	stw	r18,12(sp)
 8008f20:	dfc00a15 	stw	ra,40(sp)
 8008f24:	ddc00815 	stw	r23,32(sp)
 8008f28:	dd800715 	stw	r22,28(sp)
 8008f2c:	dd000515 	stw	r20,20(sp)
 8008f30:	dcc00415 	stw	r19,16(sp)
 8008f34:	dc400215 	stw	r17,8(sp)
 8008f38:	dc000115 	stw	r16,4(sp)
 8008f3c:	d9000015 	stw	r4,0(sp)
 8008f40:	2839883a 	mov	fp,r5
 8008f44:	04800044 	movi	r18,1
 8008f48:	057fffc4 	movi	r21,-1
 8008f4c:	00820074 	movhi	r2,2049
 8008f50:	10ab1604 	addi	r2,r2,-21416
 8008f54:	12000017 	ldw	r8,0(r2)
 8008f58:	45005217 	ldw	r20,328(r8)
 8008f5c:	44c05204 	addi	r19,r8,328
 8008f60:	a0001c26 	beq	r20,zero,8008fd4 <__call_exitprocs+0xc4>
 8008f64:	a0800117 	ldw	r2,4(r20)
 8008f68:	15ffffc4 	addi	r23,r2,-1
 8008f6c:	b8000d16 	blt	r23,zero,8008fa4 <__call_exitprocs+0x94>
 8008f70:	14000044 	addi	r16,r2,1
 8008f74:	8421883a 	add	r16,r16,r16
 8008f78:	8421883a 	add	r16,r16,r16
 8008f7c:	84402004 	addi	r17,r16,128
 8008f80:	a463883a 	add	r17,r20,r17
 8008f84:	a421883a 	add	r16,r20,r16
 8008f88:	e0001e26 	beq	fp,zero,8009004 <__call_exitprocs+0xf4>
 8008f8c:	80804017 	ldw	r2,256(r16)
 8008f90:	e0801c26 	beq	fp,r2,8009004 <__call_exitprocs+0xf4>
 8008f94:	bdffffc4 	addi	r23,r23,-1
 8008f98:	843fff04 	addi	r16,r16,-4
 8008f9c:	8c7fff04 	addi	r17,r17,-4
 8008fa0:	bd7ff91e 	bne	r23,r21,8008f88 <__call_exitprocs+0x78>
 8008fa4:	00800034 	movhi	r2,0
 8008fa8:	10800004 	addi	r2,r2,0
 8008fac:	10000926 	beq	r2,zero,8008fd4 <__call_exitprocs+0xc4>
 8008fb0:	a0800117 	ldw	r2,4(r20)
 8008fb4:	1000301e 	bne	r2,zero,8009078 <__call_exitprocs+0x168>
 8008fb8:	a0800017 	ldw	r2,0(r20)
 8008fbc:	10003226 	beq	r2,zero,8009088 <__call_exitprocs+0x178>
 8008fc0:	a009883a 	mov	r4,r20
 8008fc4:	98800015 	stw	r2,0(r19)
 8008fc8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x8000000>
 8008fcc:	9d000017 	ldw	r20,0(r19)
 8008fd0:	a03fe41e 	bne	r20,zero,8008f64 <__call_exitprocs+0x54>
 8008fd4:	dfc00a17 	ldw	ra,40(sp)
 8008fd8:	df000917 	ldw	fp,36(sp)
 8008fdc:	ddc00817 	ldw	r23,32(sp)
 8008fe0:	dd800717 	ldw	r22,28(sp)
 8008fe4:	dd400617 	ldw	r21,24(sp)
 8008fe8:	dd000517 	ldw	r20,20(sp)
 8008fec:	dcc00417 	ldw	r19,16(sp)
 8008ff0:	dc800317 	ldw	r18,12(sp)
 8008ff4:	dc400217 	ldw	r17,8(sp)
 8008ff8:	dc000117 	ldw	r16,4(sp)
 8008ffc:	dec00b04 	addi	sp,sp,44
 8009000:	f800283a 	ret
 8009004:	a0800117 	ldw	r2,4(r20)
 8009008:	80c00017 	ldw	r3,0(r16)
 800900c:	10bfffc4 	addi	r2,r2,-1
 8009010:	15c01426 	beq	r2,r23,8009064 <__call_exitprocs+0x154>
 8009014:	80000015 	stw	zero,0(r16)
 8009018:	183fde26 	beq	r3,zero,8008f94 <__call_exitprocs+0x84>
 800901c:	95c8983a 	sll	r4,r18,r23
 8009020:	a0806217 	ldw	r2,392(r20)
 8009024:	a5800117 	ldw	r22,4(r20)
 8009028:	2084703a 	and	r2,r4,r2
 800902c:	10000b26 	beq	r2,zero,800905c <__call_exitprocs+0x14c>
 8009030:	a0806317 	ldw	r2,396(r20)
 8009034:	2088703a 	and	r4,r4,r2
 8009038:	20000c1e 	bne	r4,zero,800906c <__call_exitprocs+0x15c>
 800903c:	89400017 	ldw	r5,0(r17)
 8009040:	d9000017 	ldw	r4,0(sp)
 8009044:	183ee83a 	callr	r3
 8009048:	a0800117 	ldw	r2,4(r20)
 800904c:	15bfbf1e 	bne	r2,r22,8008f4c <__call_exitprocs+0x3c>
 8009050:	98800017 	ldw	r2,0(r19)
 8009054:	153fcf26 	beq	r2,r20,8008f94 <__call_exitprocs+0x84>
 8009058:	003fbc06 	br	8008f4c <__call_exitprocs+0x3c>
 800905c:	183ee83a 	callr	r3
 8009060:	003ff906 	br	8009048 <__call_exitprocs+0x138>
 8009064:	a5c00115 	stw	r23,4(r20)
 8009068:	003feb06 	br	8009018 <__call_exitprocs+0x108>
 800906c:	89000017 	ldw	r4,0(r17)
 8009070:	183ee83a 	callr	r3
 8009074:	003ff406 	br	8009048 <__call_exitprocs+0x138>
 8009078:	a0800017 	ldw	r2,0(r20)
 800907c:	a027883a 	mov	r19,r20
 8009080:	1029883a 	mov	r20,r2
 8009084:	003fb606 	br	8008f60 <__call_exitprocs+0x50>
 8009088:	0005883a 	mov	r2,zero
 800908c:	003ffb06 	br	800907c <__call_exitprocs+0x16c>

08009090 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8009090:	defffd04 	addi	sp,sp,-12
 8009094:	df000215 	stw	fp,8(sp)
 8009098:	df000204 	addi	fp,sp,8
 800909c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80090a0:	0001883a 	nop
 80090a4:	e0bfff17 	ldw	r2,-4(fp)
 80090a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80090ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80090b0:	10000226 	beq	r2,zero,80090bc <_exit+0x2c>
    ALT_SIM_FAIL();
 80090b4:	002af070 	cmpltui	zero,zero,43969
 80090b8:	00000106 	br	80090c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80090bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80090c0:	003fff06 	br	80090c0 <_exit+0x30>
