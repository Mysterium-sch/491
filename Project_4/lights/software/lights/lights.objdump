
lights.elf:     file format elf32-littlenios2
lights.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x01000244

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000794c memsz 0x0000794c flags r-x
    LOAD off    0x0000896c vaddr 0x0100796c paddr 0x010093e0 align 2**12
         filesz 0x00001a74 memsz 0x00001a74 flags rw-
    LOAD off    0x0000ae54 vaddr 0x0100ae54 paddr 0x0100ae54 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000075d4  01000244  01000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000154  01007818  01007818  00008818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a74  0100796c  010093e0  0000896c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  0100ae54  0100ae54  0000ae54  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0100afb8  0100afb8  0000a3e0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000c30  00000000  00000000  0000a408  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00019e3f  00000000  00000000  0000b038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000072de  00000000  00000000  00024e77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00007e8e  00000000  00000000  0002c155  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000018ec  00000000  00000000  00033fe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002e79  00000000  00000000  000358d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000859e  00000000  00000000  00038749  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00040ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000d10  00000000  00000000  00040d48  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000442ca  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000442cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000442d9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000442da  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000442db  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000442e6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000442f1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000442fc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002e  00000000  00000000  00044307  2**0
                  CONTENTS, READONLY
 26 .jdi          00005177  00000000  00000000  00044335  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003fb28  00000000  00000000  000494ac  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
01000244 l    d  .text	00000000 .text
01007818 l    d  .rodata	00000000 .rodata
0100796c l    d  .rwdata	00000000 .rwdata
0100ae54 l    d  .bss	00000000 .bss
0100afb8 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lights_bsp//obj/HAL/src/crt0.o
0100028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 findfp.c
01001b9c l     F .text	00000008 __fp_unlock
01001bb0 l     F .text	0000019c __sinit.part.1
01001d4c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 impure.c
0100796c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
010048b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
010049c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
010049ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
01004ccc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01004dac l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01004e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100506c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
010093d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0100548c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
010055c0 l     F .text	00000034 alt_dev_reg
01008340 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
010058a8 l     F .text	0000020c altera_avalon_jtag_uart_irq
01005ab4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010063b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100682c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100696c l     F .text	0000003c alt_get_errno
010069a8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0100ae8c g     O .bss	00000004 alt_instruction_exception_handler
0100464c g     F .text	00000054 _isatty_r
01004fa8 g     F .text	0000007c alt_main
010093a4 g     O .rwdata	00000004 dim_period
01001964 g     F .text	000000c0 _puts_r
0100aeb8 g     O .bss	00000100 alt_irq
01004374 g     F .text	00000060 _lseek_r
010093e0 g       *ABS*	00000000 __flash_rwdata_start
01002580 g     F .text	0000005c _gettimeofday_r
0100afb8 g       *ABS*	00000000 __alt_heap_start
01003928 g     F .text	0000005c __sseek
01001eec g     F .text	00000010 __sinit
01001d54 g     F .text	00000068 __sfmoreglue
01005048 g     F .text	00000024 __malloc_unlock
010093a0 g     O .rwdata	00000004 pwm_frequency
01000990 g     F .text	00000440 .hidden __divsf3
01003014 g     F .text	0000015c memmove
01001ed4 g     F .text	00000018 _cleanup
0100176c g     F .text	00000070 .hidden __fixsfsi
01006bc0 g     F .text	00000024 altera_nios2_gen2_irq_init
01000000 g     F .entry	0000001c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
010045f0 g     F .text	0000005c _fstat_r
0100ae54 g     O .bss	00000004 errno
010038a4 g     F .text	00000008 __seofread
0100ae78 g     O .bss	00000004 alt_argv
010113a0 g       *ABS*	00000000 _gp
0100545c g     F .text	00000030 usleep
01001288 g     F .text	000004e4 .hidden __subsf3
010081c0 g     O .rwdata	00000180 alt_fd_list
01006be4 g     F .text	00000090 alt_find_dev
01002ecc g     F .text	00000148 memcpy
01001ba4 g     F .text	0000000c _cleanup_r
010068f0 g     F .text	0000007c alt_io_redirect
01007818 g       *ABS*	00000000 __DTOR_END__
01001a24 g     F .text	00000014 puts
01006eb0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
01005cac g     F .text	0000021c altera_avalon_jtag_uart_read
010047f8 g     F .text	00000064 .hidden __udivsi3
01004d08 g     F .text	000000a4 isatty
0100ae64 g     O .bss	00000008 alt_timezone
01006e20 g     F .text	00000090 alt_icache_flush
0100ae60 g     O .bss	00000004 __malloc_top_pad
01001f3c g     F .text	000004bc __sfvwrite_r
010037fc g     F .text	00000054 _sbrk_r
01004590 g     F .text	00000060 _read_r
010093c8 g     O .rwdata	00000004 alt_max_fd
01003b94 g     F .text	000000f0 _fclose_r
01003f10 g     F .text	00000030 fflush
0100ae5c g     O .bss	00000004 __malloc_max_sbrked_mem
010072ac g     F .text	00000538 .hidden __umoddi3
01004ed4 g     F .text	000000d4 lseek
010093a8 g     O .rwdata	00000004 _global_impure_ptr
01003298 g     F .text	00000564 _realloc_r
0100afb8 g       *ABS*	00000000 __bss_end
0100673c g     F .text	000000f0 alt_iic_isr_register
01005354 g     F .text	00000108 alt_tick
01001f0c g     F .text	00000018 __fp_lock_all
010066f0 g     F .text	0000004c alt_ic_irq_enabled
010052b8 g     F .text	0000009c alt_alarm_stop
0100ae88 g     O .bss	00000004 alt_irq_active
010000fc g     F .exceptions	000000d4 alt_irq_handler
01008198 g     O .rwdata	00000028 alt_dev_null
01006370 g     F .text	00000048 alt_dcache_flush_all
010093e0 g       *ABS*	00000000 __ram_rwdata_end
010093c0 g     O .rwdata	00000008 alt_dev_list
010054c8 g     F .text	000000f8 write
01000dd0 g     F .text	000000bc .hidden __gtsf2
0100796c g       *ABS*	00000000 __ram_rodata_end
01004a28 g     F .text	000000b0 fstat
0100485c g     F .text	00000058 .hidden __umodsi3
0100afb8 g       *ABS*	00000000 end
010057e8 g     F .text	000000c0 altera_avalon_jtag_uart_init
010001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
01007818 g       *ABS*	00000000 __CTOR_LIST__
02000000 g       *ABS*	00000000 __alt_stack_pointer
01001900 g     F .text	00000064 .hidden __clzsi2
01005ec8 g     F .text	00000224 altera_avalon_jtag_uart_write
01001efc g     F .text	00000004 __sfp_lock_acquire
01002de8 g     F .text	000000e4 memchr
01004064 g     F .text	00000310 _free_r
0100712c g     F .text	00000180 __call_exitprocs
010093b0 g     O .rwdata	00000004 __malloc_sbrk_base
01000244 g     F .text	0000004c _start
0100ae80 g     O .bss	00000004 _alt_tick_rate
01001a50 g     F .text	00000064 rand
0100ae84 g     O .bss	00000004 _alt_nticks
010050a8 g     F .text	000000fc read
0100562c g     F .text	00000058 alt_sys_init
010017dc g     F .text	00000124 .hidden __floatsisf
01007014 g     F .text	00000118 __register_exitproc
01005b54 g     F .text	00000068 altera_avalon_jtag_uart_close
0100796c g       *ABS*	00000000 __ram_rwdata_start
01007818 g       *ABS*	00000000 __ram_rodata_start
0100ae90 g     O .bss	00000028 __malloc_current_mallinfo
01005684 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
01006d7c g     F .text	000000a4 alt_get_fd
01006218 g     F .text	00000158 alt_busy_sleep
01003b40 g     F .text	00000054 _close_r
01006f98 g     F .text	0000007c memcmp
01005744 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0100afb8 g       *ABS*	00000000 __alt_stack_base
01005794 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
010039ec g     F .text	00000154 __swsetup_r
01001dbc g     F .text	00000118 __sfp
01007d90 g     O .rwdata	00000408 __malloc_av_
01001f08 g     F .text	00000004 __sinit_lock_release
01003850 g     F .text	00000054 __sread
01006c74 g     F .text	00000108 alt_find_file
010063f4 g     F .text	000000a4 alt_dev_llist_insert
01005024 g     F .text	00000024 __malloc_lock
01005208 g     F .text	000000b0 sbrk
01003eb4 g     F .text	0000005c _fflush_r
01004ad8 g     F .text	000001f4 gettimeofday
0100ae54 g       *ABS*	00000000 __bss_start
01003170 g     F .text	00000128 memset
01000290 g     F .text	00000238 main
0100ae7c g     O .bss	00000004 alt_envp
0100ae58 g     O .bss	00000004 __malloc_max_total_mem
010056e4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
01001a38 g     F .text	00000018 srand
01003984 g     F .text	00000008 __sclose
02000000 g       *ABS*	00000000 __alt_heap_limit
01003c84 g     F .text	00000014 fclose
010025dc g     F .text	0000080c _malloc_r
01001b4c g     F .text	00000050 time
010093cc g     O .rwdata	00000004 alt_errno
010023f8 g     F .text	000000c4 _fwalk
01004700 g     F .text	00000084 .hidden __divsi3
01003f40 g     F .text	00000124 _malloc_trim_r
01007818 g       *ABS*	00000000 __CTOR_END__
01000e8c g     F .text	000003fc .hidden __mulsf3
01007818 g       *ABS*	00000000 __flash_rodata_start
01007818 g       *ABS*	00000000 __DTOR_LIST__
010055f4 g     F .text	00000038 alt_irq_init
010051a4 g     F .text	00000064 alt_release_fd
0100782f g     O .rodata	00000100 .hidden __clz_tab
01006f4c g     F .text	00000014 atexit
01000dd0 g     F .text	000000bc .hidden __gesf2
0100398c g     F .text	00000060 _write_r
010093ac g     O .rwdata	00000004 _impure_ptr
0100ae74 g     O .bss	00000004 alt_argc
01003c98 g     F .text	0000021c __sflush_r
010064f8 g     F .text	00000060 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001f24 g     F .text	00000018 __fp_unlock_all
010093b8 g     O .rwdata	00000008 alt_fs_list
0100ae6c g     O .bss	00000008 alt_resettime
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100658c g     F .text	00000050 alt_ic_isr_register
010093e0 g       *ABS*	00000000 _edata
0100afb8 g       *ABS*	00000000 _end
01000244 g       *ABS*	00000000 __ram_exceptions_end
01005bbc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
01006664 g     F .text	0000008c alt_ic_irq_disable
010038ac g     F .text	0000007c __swrite
010093b4 g     O .rwdata	00000004 __malloc_trim_threshold
01006f60 g     F .text	00000038 exit
010024bc g     F .text	000000c4 _fwalk_reent
01004784 g     F .text	00000074 .hidden __modsi3
02000000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001f00 g     F .text	00000004 __sfp_lock_release
010077e4 g     F .text	00000034 _exit
010060ec g     F .text	0000012c alt_alarm_start
010046a0 g     F .text	00000060 .hidden __muldi3
010043d4 g     F .text	000001bc __smakebuf_r
01001ab4 g     F .text	00000098 strlen
01006a6c g     F .text	00000154 open
01006558 g     F .text	00000034 alt_icache_flush_all
010093dc g     O .rwdata	00000004 alt_priority_mask
010065dc g     F .text	00000088 alt_ic_irq_enable
010093d4 g     O .rwdata	00000008 alt_alarm_list
01006498 g     F .text	00000060 _do_ctors
010048f0 g     F .text	000000d0 close
010004c8 g     F .text	000004c8 .hidden __addsf3
01004e14 g     F .text	00000084 alt_load
01001f04 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08409114 	ori	at,at,580
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x1000000>

Disassembly of section .exceptions:

01000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000fc0 	call	10000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000706 	br	10000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 100008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1000098:	10001d00 	call	10001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 100009c:	1000021e 	bne	r2,zero,10000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 10000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 10000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 10000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 10000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 10000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 10000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000f8:	ef80083a 	eret

010000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000fc:	defff904 	addi	sp,sp,-28
 1000100:	dfc00615 	stw	ra,24(sp)
 1000104:	df000515 	stw	fp,20(sp)
 1000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 100010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000110:	0005313a 	rdctl	r2,ipending
 1000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 100011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000124:	00800044 	movi	r2,1
 1000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 100012c:	e0fffb17 	ldw	r3,-20(fp)
 1000130:	e0bffc17 	ldw	r2,-16(fp)
 1000134:	1884703a 	and	r2,r3,r2
 1000138:	10001426 	beq	r2,zero,100018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100013c:	00804074 	movhi	r2,257
 1000140:	10abae04 	addi	r2,r2,-20808
 1000144:	e0fffd17 	ldw	r3,-12(fp)
 1000148:	180690fa 	slli	r3,r3,3
 100014c:	10c5883a 	add	r2,r2,r3
 1000150:	10c00017 	ldw	r3,0(r2)
 1000154:	00804074 	movhi	r2,257
 1000158:	10abae04 	addi	r2,r2,-20808
 100015c:	e13ffd17 	ldw	r4,-12(fp)
 1000160:	200890fa 	slli	r4,r4,3
 1000164:	1105883a 	add	r2,r2,r4
 1000168:	10800104 	addi	r2,r2,4
 100016c:	10800017 	ldw	r2,0(r2)
 1000170:	1009883a 	mov	r4,r2
 1000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100017c:	0005313a 	rdctl	r2,ipending
 1000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1000184:	e0bfff17 	ldw	r2,-4(fp)
 1000188:	00000706 	br	10001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 100018c:	e0bffc17 	ldw	r2,-16(fp)
 1000190:	1085883a 	add	r2,r2,r2
 1000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1000198:	e0bffd17 	ldw	r2,-12(fp)
 100019c:	10800044 	addi	r2,r2,1
 10001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a4:	003fe106 	br	100012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 10001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 10001ac:	e0bffb17 	ldw	r2,-20(fp)
 10001b0:	103fdb1e 	bne	r2,zero,1000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 10001b4:	0001883a 	nop
}
 10001b8:	0001883a 	nop
 10001bc:	e037883a 	mov	sp,fp
 10001c0:	dfc00117 	ldw	ra,4(sp)
 10001c4:	df000017 	ldw	fp,0(sp)
 10001c8:	dec00204 	addi	sp,sp,8
 10001cc:	f800283a 	ret

010001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 10001d0:	defffb04 	addi	sp,sp,-20
 10001d4:	dfc00415 	stw	ra,16(sp)
 10001d8:	df000315 	stw	fp,12(sp)
 10001dc:	df000304 	addi	fp,sp,12
 10001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 10001e4:	000531fa 	rdctl	r2,exception
 10001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 10001ec:	e0bffd17 	ldw	r2,-12(fp)
 10001f0:	10801f0c 	andi	r2,r2,124
 10001f4:	1004d0ba 	srli	r2,r2,2
 10001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 10001fc:	0005333a 	rdctl	r2,badaddr
 1000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1000204:	d0a6bb17 	ldw	r2,-25876(gp)
 1000208:	10000726 	beq	r2,zero,1000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 100020c:	d0a6bb17 	ldw	r2,-25876(gp)
 1000210:	e0fffd17 	ldw	r3,-12(fp)
 1000214:	e1bffe17 	ldw	r6,-8(fp)
 1000218:	e17fff17 	ldw	r5,-4(fp)
 100021c:	1809883a 	mov	r4,r3
 1000220:	103ee83a 	callr	r2
 1000224:	00000206 	br	1000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 100022c:	0005883a 	mov	r2,zero
}
 1000230:	e037883a 	mov	sp,fp
 1000234:	dfc00117 	ldw	ra,4(sp)
 1000238:	df000017 	ldw	fp,0(sp)
 100023c:	dec00204 	addi	sp,sp,8
 1000240:	f800283a 	ret

Disassembly of section .text:

01000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 1000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 1000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 100024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 1000250:	00bffd16 	blt	zero,r2,1000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 1000254:	06c08034 	movhi	sp,512
    ori sp, sp, %lo(__alt_stack_pointer)
 1000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 100025c:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 1000260:	d684e814 	ori	gp,gp,5024
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 1000264:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 1000268:	10ab9514 	ori	r2,r2,44628

    movhi r3, %hi(__bss_end)
 100026c:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 1000270:	18ebee14 	ori	r3,r3,44984

    beq r2, r3, 1f
 1000274:	10c00326 	beq	r2,r3,1000284 <_start+0x40>

0:
    stw zero, (r2)
 1000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 100027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1000280:	10fffd36 	bltu	r2,r3,1000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 1000284:	1004e140 	call	1004e14 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1000288:	1004fa80 	call	1004fa8 <alt_main>

0100028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 100028c:	003fff06 	br	100028c <alt_after_alt_main>

01000290 <main>:

float pwm_frequency = 10e3f;
float dim_period = 5.0f;

int main()
{
 1000290:	deffea04 	addi	sp,sp,-88
 1000294:	dfc01515 	stw	ra,84(sp)
 1000298:	df001415 	stw	fp,80(sp)
 100029c:	dc001315 	stw	r16,76(sp)
 10002a0:	df001404 	addi	fp,sp,80
	time_t t;
	srand((unsigned) time(&t));
 10002a4:	e0bffe04 	addi	r2,fp,-8
 10002a8:	1009883a 	mov	r4,r2
 10002ac:	1001b4c0 	call	1001b4c <time>
 10002b0:	1009883a 	mov	r4,r2
 10002b4:	1001a380 	call	1001a38 <srand>
	alt_u32 motor_base;
	motor_base = 0x0;
 10002b8:	e03ff015 	stw	zero,-64(fp)
    float T_s = 0.1;
 10002bc:	008f7374 	movhi	r2,15821
 10002c0:	10b33344 	addi	r2,r2,-13107
 10002c4:	e0bff115 	stw	r2,-60(fp)
    float k_p = 1.0;
 10002c8:	008fe034 	movhi	r2,16256
 10002cc:	e0bff215 	stw	r2,-56(fp)
    float k_d = 0.1;
 10002d0:	008f7374 	movhi	r2,15821
 10002d4:	10b33344 	addi	r2,r2,-13107
 10002d8:	e0bff315 	stw	r2,-52(fp)
    float k_i = 0.01;
 10002dc:	008f0934 	movhi	r2,15396
 10002e0:	10b5c284 	addi	r2,r2,-10486
 10002e4:	e0bff415 	stw	r2,-48(fp)
    float setpoint = 1000.0;  //speed in RPM
 10002e8:	00911eb4 	movhi	r2,17530
 10002ec:	e0bff515 	stw	r2,-44(fp)
    int cycle = 0;
 10002f0:	e03fec15 	stw	zero,-80(fp)
    //int cur_time = 0;

	// global variables
	pwm_frequency = 10e3f;
 10002f4:	00918734 	movhi	r2,17948
 10002f8:	10900004 	addi	r2,r2,16384
 10002fc:	d0a00015 	stw	r2,-32768(gp)
	usleep (250000);
 1000300:	01000134 	movhi	r4,4
 1000304:	21342404 	addi	r4,r4,-12144
 1000308:	100545c0 	call	100545c <usleep>
	printf ("Program running New...\n");
 100030c:	01004034 	movhi	r4,256
 1000310:	211e0604 	addi	r4,r4,30744
 1000314:	1001a240 	call	1001a24 <puts>

	unsigned int prev_control_action_cycles = 0;
 1000318:	e03fed15 	stw	zero,-76(fp)
    float error = 0.0;
 100031c:	e03fee15 	stw	zero,-72(fp)
    float error_old = 0.0;
 1000320:	e03ff615 	stw	zero,-40(fp)
    float error_accum = 0.0;
 1000324:	e03fef15 	stw	zero,-68(fp)
    float error_delta = 0.0;
 1000328:	e03ff715 	stw	zero,-36(fp)

    while (1) {
    	//cur_time = cur_time+1;
        // Determine if we should perform control
        int cycle_counter = cycle;
 100032c:	e0bfec17 	ldw	r2,-80(fp)
 1000330:	e0bff815 	stw	r2,-32(fp)
        int cycles_since_last_control = cycle_counter - prev_control_action_cycles;
 1000334:	e0fff817 	ldw	r3,-32(fp)
 1000338:	e0bfed17 	ldw	r2,-76(fp)
 100033c:	1885c83a 	sub	r2,r3,r2
 1000340:	e0bff915 	stw	r2,-28(fp)
        float time_since_last_control = cycles_since_last_control / (float)pwm_frequency;
 1000344:	e13ff917 	ldw	r4,-28(fp)
 1000348:	10017dc0 	call	10017dc <__floatsisf>
 100034c:	1007883a 	mov	r3,r2
 1000350:	d0a00017 	ldw	r2,-32768(gp)
 1000354:	100b883a 	mov	r5,r2
 1000358:	1809883a 	mov	r4,r3
 100035c:	10009900 	call	1000990 <__divsf3>
 1000360:	1007883a 	mov	r3,r2
 1000364:	e0fffa15 	stw	r3,-24(fp)
        float cur_time= cycle_counter / (float)pwm_frequency;
 1000368:	e13ff817 	ldw	r4,-32(fp)
 100036c:	10017dc0 	call	10017dc <__floatsisf>
 1000370:	1007883a 	mov	r3,r2
 1000374:	d0a00017 	ldw	r2,-32768(gp)
 1000378:	100b883a 	mov	r5,r2
 100037c:	1809883a 	mov	r4,r3
 1000380:	10009900 	call	1000990 <__divsf3>
 1000384:	1007883a 	mov	r3,r2
 1000388:	e0fffb15 	stw	r3,-20(fp)

        // Perform control
        if (time_since_last_control >= T_s) {
 100038c:	e17ff117 	ldw	r5,-60(fp)
 1000390:	e13ffa17 	ldw	r4,-24(fp)
 1000394:	1000dd00 	call	1000dd0 <__gesf2>
 1000398:	10003616 	blt	r2,zero,1000474 <main+0x1e4>
            float current_motor_rpm = IORD(motor_base,0);
 100039c:	e0bff017 	ldw	r2,-64(fp)
 10003a0:	10800037 	ldwio	r2,0(r2)
 10003a4:	1009883a 	mov	r4,r2
 10003a8:	10017dc0 	call	10017dc <__floatsisf>
 10003ac:	1007883a 	mov	r3,r2
 10003b0:	e0fffc15 	stw	r3,-16(fp)

            error_old = error;
 10003b4:	e0bfee17 	ldw	r2,-72(fp)
 10003b8:	e0bff615 	stw	r2,-40(fp)
            error = current_motor_rpm - setpoint;
 10003bc:	e17ff517 	ldw	r5,-44(fp)
 10003c0:	e13ffc17 	ldw	r4,-16(fp)
 10003c4:	10012880 	call	1001288 <__subsf3>
 10003c8:	1007883a 	mov	r3,r2
 10003cc:	e0ffee15 	stw	r3,-72(fp)
            error_accum += error;
 10003d0:	e17fee17 	ldw	r5,-72(fp)
 10003d4:	e13fef17 	ldw	r4,-68(fp)
 10003d8:	10004c80 	call	10004c8 <__addsf3>
 10003dc:	1007883a 	mov	r3,r2
 10003e0:	e0ffef15 	stw	r3,-68(fp)
            error_delta = error - error_old;
 10003e4:	e17ff617 	ldw	r5,-40(fp)
 10003e8:	e13fee17 	ldw	r4,-72(fp)
 10003ec:	10012880 	call	1001288 <__subsf3>
 10003f0:	1007883a 	mov	r3,r2
 10003f4:	e0fff715 	stw	r3,-36(fp)

            float motor_input = k_p * error + k_d * error_delta + k_i * error_accum;
 10003f8:	e17fee17 	ldw	r5,-72(fp)
 10003fc:	e13ff217 	ldw	r4,-56(fp)
 1000400:	1000e8c0 	call	1000e8c <__mulsf3>
 1000404:	1007883a 	mov	r3,r2
 1000408:	1821883a 	mov	r16,r3
 100040c:	e17ff717 	ldw	r5,-36(fp)
 1000410:	e13ff317 	ldw	r4,-52(fp)
 1000414:	1000e8c0 	call	1000e8c <__mulsf3>
 1000418:	1007883a 	mov	r3,r2
 100041c:	1805883a 	mov	r2,r3
 1000420:	100b883a 	mov	r5,r2
 1000424:	8009883a 	mov	r4,r16
 1000428:	10004c80 	call	10004c8 <__addsf3>
 100042c:	1007883a 	mov	r3,r2
 1000430:	1821883a 	mov	r16,r3
 1000434:	e17fef17 	ldw	r5,-68(fp)
 1000438:	e13ff417 	ldw	r4,-48(fp)
 100043c:	1000e8c0 	call	1000e8c <__mulsf3>
 1000440:	1007883a 	mov	r3,r2
 1000444:	1805883a 	mov	r2,r3
 1000448:	100b883a 	mov	r5,r2
 100044c:	8009883a 	mov	r4,r16
 1000450:	10004c80 	call	10004c8 <__addsf3>
 1000454:	1007883a 	mov	r3,r2
 1000458:	e0fffd15 	stw	r3,-12(fp)
            IOWR(motor_base,0,motor_input);
 100045c:	e43ff017 	ldw	r16,-64(fp)
 1000460:	e13ffd17 	ldw	r4,-12(fp)
 1000464:	100176c0 	call	100176c <__fixsfsi>
 1000468:	80800035 	stwio	r2,0(r16)
            prev_control_action_cycles = cycle_counter;
 100046c:	e0bff817 	ldw	r2,-32(fp)
 1000470:	e0bfed15 	stw	r2,-76(fp)
        }
        cycle = cycle +1;
 1000474:	e0bfec17 	ldw	r2,-80(fp)
 1000478:	10800044 	addi	r2,r2,1
 100047c:	e0bfec15 	stw	r2,-80(fp)
        if (cur_time > (int)time) {
 1000480:	00804034 	movhi	r2,256
 1000484:	1086d304 	addi	r2,r2,6988
 1000488:	1009883a 	mov	r4,r2
 100048c:	10017dc0 	call	10017dc <__floatsisf>
 1000490:	1007883a 	mov	r3,r2
 1000494:	180b883a 	mov	r5,r3
 1000498:	e13ffb17 	ldw	r4,-20(fp)
 100049c:	1000dd00 	call	1000dd0 <__gesf2>
 10004a0:	00800116 	blt	zero,r2,10004a8 <main+0x218>
        	break;
        }
	}
 10004a4:	003fa106 	br	100032c <main+0x9c>
            IOWR(motor_base,0,motor_input);
            prev_control_action_cycles = cycle_counter;
        }
        cycle = cycle +1;
        if (cur_time > (int)time) {
        	break;
 10004a8:	0001883a 	nop
        }
	}

	return 0;
 10004ac:	0005883a 	mov	r2,zero
}
 10004b0:	e6ffff04 	addi	sp,fp,-4
 10004b4:	dfc00217 	ldw	ra,8(sp)
 10004b8:	df000117 	ldw	fp,4(sp)
 10004bc:	dc000017 	ldw	r16,0(sp)
 10004c0:	dec00304 	addi	sp,sp,12
 10004c4:	f800283a 	ret

010004c8 <__addsf3>:
 10004c8:	defffc04 	addi	sp,sp,-16
 10004cc:	2004d7fa 	srli	r2,r4,31
 10004d0:	280cd5fa 	srli	r6,r5,23
 10004d4:	dc000015 	stw	r16,0(sp)
 10004d8:	00c02034 	movhi	r3,128
 10004dc:	2020d5fa 	srli	r16,r4,23
 10004e0:	280ed7fa 	srli	r7,r5,31
 10004e4:	18ffffc4 	addi	r3,r3,-1
 10004e8:	dc400115 	stw	r17,4(sp)
 10004ec:	1908703a 	and	r4,r3,r4
 10004f0:	194a703a 	and	r5,r3,r5
 10004f4:	dfc00315 	stw	ra,12(sp)
 10004f8:	dc800215 	stw	r18,8(sp)
 10004fc:	14403fcc 	andi	r17,r2,255
 1000500:	84003fcc 	andi	r16,r16,255
 1000504:	200890fa 	slli	r4,r4,3
 1000508:	31803fcc 	andi	r6,r6,255
 100050c:	280a90fa 	slli	r5,r5,3
 1000510:	89c05026 	beq	r17,r7,1000654 <__addsf3+0x18c>
 1000514:	8185c83a 	sub	r2,r16,r6
 1000518:	00807a0e 	bge	zero,r2,1000704 <__addsf3+0x23c>
 100051c:	30001e1e 	bne	r6,zero,1000598 <__addsf3+0xd0>
 1000520:	28006d1e 	bne	r5,zero,10006d8 <__addsf3+0x210>
 1000524:	208001cc 	andi	r2,r4,7
 1000528:	10000426 	beq	r2,zero,100053c <__addsf3+0x74>
 100052c:	208003cc 	andi	r2,r4,15
 1000530:	00c00104 	movi	r3,4
 1000534:	10c00126 	beq	r2,r3,100053c <__addsf3+0x74>
 1000538:	20c9883a 	add	r4,r4,r3
 100053c:	2081002c 	andhi	r2,r4,1024
 1000540:	10003926 	beq	r2,zero,1000628 <__addsf3+0x160>
 1000544:	84000044 	addi	r16,r16,1
 1000548:	00803fc4 	movi	r2,255
 100054c:	80807826 	beq	r16,r2,1000730 <__addsf3+0x268>
 1000550:	200891ba 	slli	r4,r4,6
 1000554:	8805883a 	mov	r2,r17
 1000558:	2008d27a 	srli	r4,r4,9
 100055c:	84003fcc 	andi	r16,r16,255
 1000560:	800695fa 	slli	r3,r16,23
 1000564:	10803fcc 	andi	r2,r2,255
 1000568:	04002034 	movhi	r16,128
 100056c:	843fffc4 	addi	r16,r16,-1
 1000570:	100497fa 	slli	r2,r2,31
 1000574:	2408703a 	and	r4,r4,r16
 1000578:	20e0b03a 	or	r16,r4,r3
 100057c:	8084b03a 	or	r2,r16,r2
 1000580:	dfc00317 	ldw	ra,12(sp)
 1000584:	dc800217 	ldw	r18,8(sp)
 1000588:	dc400117 	ldw	r17,4(sp)
 100058c:	dc000017 	ldw	r16,0(sp)
 1000590:	dec00404 	addi	sp,sp,16
 1000594:	f800283a 	ret
 1000598:	00c03fc4 	movi	r3,255
 100059c:	80ffe126 	beq	r16,r3,1000524 <__addsf3+0x5c>
 10005a0:	29410034 	orhi	r5,r5,1024
 10005a4:	00c006c4 	movi	r3,27
 10005a8:	18807516 	blt	r3,r2,1000780 <__addsf3+0x2b8>
 10005ac:	00c00804 	movi	r3,32
 10005b0:	1887c83a 	sub	r3,r3,r2
 10005b4:	28c6983a 	sll	r3,r5,r3
 10005b8:	288ad83a 	srl	r5,r5,r2
 10005bc:	1804c03a 	cmpne	r2,r3,zero
 10005c0:	288ab03a 	or	r5,r5,r2
 10005c4:	2149c83a 	sub	r4,r4,r5
 10005c8:	2081002c 	andhi	r2,r4,1024
 10005cc:	10001426 	beq	r2,zero,1000620 <__addsf3+0x158>
 10005d0:	04810034 	movhi	r18,1024
 10005d4:	94bfffc4 	addi	r18,r18,-1
 10005d8:	24a4703a 	and	r18,r4,r18
 10005dc:	9009883a 	mov	r4,r18
 10005e0:	10019000 	call	1001900 <__clzsi2>
 10005e4:	10bffec4 	addi	r2,r2,-5
 10005e8:	90a4983a 	sll	r18,r18,r2
 10005ec:	14005416 	blt	r2,r16,1000740 <__addsf3+0x278>
 10005f0:	1405c83a 	sub	r2,r2,r16
 10005f4:	11000044 	addi	r4,r2,1
 10005f8:	00800804 	movi	r2,32
 10005fc:	1105c83a 	sub	r2,r2,r4
 1000600:	9084983a 	sll	r2,r18,r2
 1000604:	9124d83a 	srl	r18,r18,r4
 1000608:	0021883a 	mov	r16,zero
 100060c:	1008c03a 	cmpne	r4,r2,zero
 1000610:	9108b03a 	or	r4,r18,r4
 1000614:	003fc306 	br	1000524 <__addsf3+0x5c>
 1000618:	1000db26 	beq	r2,zero,1000988 <__addsf3+0x4c0>
 100061c:	1009883a 	mov	r4,r2
 1000620:	208001cc 	andi	r2,r4,7
 1000624:	103fc11e 	bne	r2,zero,100052c <__addsf3+0x64>
 1000628:	2006d0fa 	srli	r3,r4,3
 100062c:	01003fc4 	movi	r4,255
 1000630:	8805883a 	mov	r2,r17
 1000634:	8100241e 	bne	r16,r4,10006c8 <__addsf3+0x200>
 1000638:	18006e26 	beq	r3,zero,10007f4 <__addsf3+0x32c>
 100063c:	19001034 	orhi	r4,r3,64
 1000640:	00c02034 	movhi	r3,128
 1000644:	18ffffc4 	addi	r3,r3,-1
 1000648:	043fffc4 	movi	r16,-1
 100064c:	20c8703a 	and	r4,r4,r3
 1000650:	003fc206 	br	100055c <__addsf3+0x94>
 1000654:	8187c83a 	sub	r3,r16,r6
 1000658:	00c03e0e 	bge	zero,r3,1000754 <__addsf3+0x28c>
 100065c:	30002326 	beq	r6,zero,10006ec <__addsf3+0x224>
 1000660:	01803fc4 	movi	r6,255
 1000664:	81bfaf26 	beq	r16,r6,1000524 <__addsf3+0x5c>
 1000668:	29410034 	orhi	r5,r5,1024
 100066c:	018006c4 	movi	r6,27
 1000670:	30c07416 	blt	r6,r3,1000844 <__addsf3+0x37c>
 1000674:	01800804 	movi	r6,32
 1000678:	30cdc83a 	sub	r6,r6,r3
 100067c:	298c983a 	sll	r6,r5,r6
 1000680:	28cad83a 	srl	r5,r5,r3
 1000684:	3006c03a 	cmpne	r3,r6,zero
 1000688:	28cab03a 	or	r5,r5,r3
 100068c:	2149883a 	add	r4,r4,r5
 1000690:	20c1002c 	andhi	r3,r4,1024
 1000694:	183fe226 	beq	r3,zero,1000620 <__addsf3+0x158>
 1000698:	84000044 	addi	r16,r16,1
 100069c:	00c03fc4 	movi	r3,255
 10006a0:	80c05426 	beq	r16,r3,10007f4 <__addsf3+0x32c>
 10006a4:	00bf0034 	movhi	r2,64512
 10006a8:	10bfffc4 	addi	r2,r2,-1
 10006ac:	20c0004c 	andi	r3,r4,1
 10006b0:	2088703a 	and	r4,r4,r2
 10006b4:	2008d07a 	srli	r4,r4,1
 10006b8:	20c8b03a 	or	r4,r4,r3
 10006bc:	003f9906 	br	1000524 <__addsf3+0x5c>
 10006c0:	0007883a 	mov	r3,zero
 10006c4:	0005883a 	mov	r2,zero
 10006c8:	01002034 	movhi	r4,128
 10006cc:	213fffc4 	addi	r4,r4,-1
 10006d0:	1908703a 	and	r4,r3,r4
 10006d4:	003fa106 	br	100055c <__addsf3+0x94>
 10006d8:	10bfffc4 	addi	r2,r2,-1
 10006dc:	103fb926 	beq	r2,zero,10005c4 <__addsf3+0xfc>
 10006e0:	00c03fc4 	movi	r3,255
 10006e4:	80ffaf1e 	bne	r16,r3,10005a4 <__addsf3+0xdc>
 10006e8:	003f8e06 	br	1000524 <__addsf3+0x5c>
 10006ec:	283f8d26 	beq	r5,zero,1000524 <__addsf3+0x5c>
 10006f0:	18ffffc4 	addi	r3,r3,-1
 10006f4:	183fe526 	beq	r3,zero,100068c <__addsf3+0x1c4>
 10006f8:	01803fc4 	movi	r6,255
 10006fc:	81bfdb1e 	bne	r16,r6,100066c <__addsf3+0x1a4>
 1000700:	003f8806 	br	1000524 <__addsf3+0x5c>
 1000704:	1000201e 	bne	r2,zero,1000788 <__addsf3+0x2c0>
 1000708:	80800044 	addi	r2,r16,1
 100070c:	10803fcc 	andi	r2,r2,255
 1000710:	01800044 	movi	r6,1
 1000714:	3080450e 	bge	r6,r2,100082c <__addsf3+0x364>
 1000718:	2165c83a 	sub	r18,r4,r5
 100071c:	90c1002c 	andhi	r3,r18,1024
 1000720:	18002b26 	beq	r3,zero,10007d0 <__addsf3+0x308>
 1000724:	2925c83a 	sub	r18,r5,r4
 1000728:	3823883a 	mov	r17,r7
 100072c:	003fab06 	br	10005dc <__addsf3+0x114>
 1000730:	8805883a 	mov	r2,r17
 1000734:	043fffc4 	movi	r16,-1
 1000738:	0009883a 	mov	r4,zero
 100073c:	003f8706 	br	100055c <__addsf3+0x94>
 1000740:	013f0034 	movhi	r4,64512
 1000744:	213fffc4 	addi	r4,r4,-1
 1000748:	80a1c83a 	sub	r16,r16,r2
 100074c:	9108703a 	and	r4,r18,r4
 1000750:	003f7406 	br	1000524 <__addsf3+0x5c>
 1000754:	1800411e 	bne	r3,zero,100085c <__addsf3+0x394>
 1000758:	80c00044 	addi	r3,r16,1
 100075c:	19c03fcc 	andi	r7,r3,255
 1000760:	01800044 	movi	r6,1
 1000764:	31c0260e 	bge	r6,r7,1000800 <__addsf3+0x338>
 1000768:	01803fc4 	movi	r6,255
 100076c:	19802126 	beq	r3,r6,10007f4 <__addsf3+0x32c>
 1000770:	2149883a 	add	r4,r4,r5
 1000774:	2008d07a 	srli	r4,r4,1
 1000778:	1821883a 	mov	r16,r3
 100077c:	003f6906 	br	1000524 <__addsf3+0x5c>
 1000780:	01400044 	movi	r5,1
 1000784:	003f8f06 	br	10005c4 <__addsf3+0xfc>
 1000788:	8000151e 	bne	r16,zero,10007e0 <__addsf3+0x318>
 100078c:	20002f26 	beq	r4,zero,100084c <__addsf3+0x384>
 1000790:	0084303a 	nor	r2,zero,r2
 1000794:	10000a26 	beq	r2,zero,10007c0 <__addsf3+0x2f8>
 1000798:	00c03fc4 	movi	r3,255
 100079c:	30c02b26 	beq	r6,r3,100084c <__addsf3+0x384>
 10007a0:	00c006c4 	movi	r3,27
 10007a4:	18806d16 	blt	r3,r2,100095c <__addsf3+0x494>
 10007a8:	00c00804 	movi	r3,32
 10007ac:	1887c83a 	sub	r3,r3,r2
 10007b0:	20c6983a 	sll	r3,r4,r3
 10007b4:	2084d83a 	srl	r2,r4,r2
 10007b8:	1808c03a 	cmpne	r4,r3,zero
 10007bc:	1108b03a 	or	r4,r2,r4
 10007c0:	2909c83a 	sub	r4,r5,r4
 10007c4:	3021883a 	mov	r16,r6
 10007c8:	3823883a 	mov	r17,r7
 10007cc:	003f7e06 	br	10005c8 <__addsf3+0x100>
 10007d0:	903f821e 	bne	r18,zero,10005dc <__addsf3+0x114>
 10007d4:	0005883a 	mov	r2,zero
 10007d8:	0021883a 	mov	r16,zero
 10007dc:	003fba06 	br	10006c8 <__addsf3+0x200>
 10007e0:	00c03fc4 	movi	r3,255
 10007e4:	30c01926 	beq	r6,r3,100084c <__addsf3+0x384>
 10007e8:	0085c83a 	sub	r2,zero,r2
 10007ec:	21010034 	orhi	r4,r4,1024
 10007f0:	003feb06 	br	10007a0 <__addsf3+0x2d8>
 10007f4:	043fffc4 	movi	r16,-1
 10007f8:	0009883a 	mov	r4,zero
 10007fc:	003f5706 	br	100055c <__addsf3+0x94>
 1000800:	80004a1e 	bne	r16,zero,100092c <__addsf3+0x464>
 1000804:	20005926 	beq	r4,zero,100096c <__addsf3+0x4a4>
 1000808:	283f4626 	beq	r5,zero,1000524 <__addsf3+0x5c>
 100080c:	2149883a 	add	r4,r4,r5
 1000810:	2081002c 	andhi	r2,r4,1024
 1000814:	103f8226 	beq	r2,zero,1000620 <__addsf3+0x158>
 1000818:	00bf0034 	movhi	r2,64512
 100081c:	10bfffc4 	addi	r2,r2,-1
 1000820:	3021883a 	mov	r16,r6
 1000824:	2088703a 	and	r4,r4,r2
 1000828:	003f3e06 	br	1000524 <__addsf3+0x5c>
 100082c:	8000121e 	bne	r16,zero,1000878 <__addsf3+0x3b0>
 1000830:	2000261e 	bne	r4,zero,10008cc <__addsf3+0x404>
 1000834:	283fa226 	beq	r5,zero,10006c0 <__addsf3+0x1f8>
 1000838:	2809883a 	mov	r4,r5
 100083c:	3823883a 	mov	r17,r7
 1000840:	003f3806 	br	1000524 <__addsf3+0x5c>
 1000844:	01400044 	movi	r5,1
 1000848:	003f9006 	br	100068c <__addsf3+0x1c4>
 100084c:	2809883a 	mov	r4,r5
 1000850:	3021883a 	mov	r16,r6
 1000854:	3823883a 	mov	r17,r7
 1000858:	003f3206 	br	1000524 <__addsf3+0x5c>
 100085c:	80000c1e 	bne	r16,zero,1000890 <__addsf3+0x3c8>
 1000860:	20002f26 	beq	r4,zero,1000920 <__addsf3+0x458>
 1000864:	00c6303a 	nor	r3,zero,r3
 1000868:	18002b1e 	bne	r3,zero,1000918 <__addsf3+0x450>
 100086c:	2149883a 	add	r4,r4,r5
 1000870:	3021883a 	mov	r16,r6
 1000874:	003f8606 	br	1000690 <__addsf3+0x1c8>
 1000878:	20001b1e 	bne	r4,zero,10008e8 <__addsf3+0x420>
 100087c:	28003926 	beq	r5,zero,1000964 <__addsf3+0x49c>
 1000880:	2809883a 	mov	r4,r5
 1000884:	3823883a 	mov	r17,r7
 1000888:	04003fc4 	movi	r16,255
 100088c:	003f2506 	br	1000524 <__addsf3+0x5c>
 1000890:	01c03fc4 	movi	r7,255
 1000894:	31c02226 	beq	r6,r7,1000920 <__addsf3+0x458>
 1000898:	00c7c83a 	sub	r3,zero,r3
 100089c:	21010034 	orhi	r4,r4,1024
 10008a0:	01c006c4 	movi	r7,27
 10008a4:	38c03616 	blt	r7,r3,1000980 <__addsf3+0x4b8>
 10008a8:	01c00804 	movi	r7,32
 10008ac:	38cfc83a 	sub	r7,r7,r3
 10008b0:	21ce983a 	sll	r7,r4,r7
 10008b4:	20c6d83a 	srl	r3,r4,r3
 10008b8:	3808c03a 	cmpne	r4,r7,zero
 10008bc:	1906b03a 	or	r3,r3,r4
 10008c0:	1949883a 	add	r4,r3,r5
 10008c4:	3021883a 	mov	r16,r6
 10008c8:	003f7106 	br	1000690 <__addsf3+0x1c8>
 10008cc:	283f1526 	beq	r5,zero,1000524 <__addsf3+0x5c>
 10008d0:	2145c83a 	sub	r2,r4,r5
 10008d4:	10c1002c 	andhi	r3,r2,1024
 10008d8:	183f4f26 	beq	r3,zero,1000618 <__addsf3+0x150>
 10008dc:	2909c83a 	sub	r4,r5,r4
 10008e0:	3823883a 	mov	r17,r7
 10008e4:	003f0f06 	br	1000524 <__addsf3+0x5c>
 10008e8:	28001a26 	beq	r5,zero,1000954 <__addsf3+0x48c>
 10008ec:	2008d0fa 	srli	r4,r4,3
 10008f0:	2080102c 	andhi	r2,r4,64
 10008f4:	10000526 	beq	r2,zero,100090c <__addsf3+0x444>
 10008f8:	280ad0fa 	srli	r5,r5,3
 10008fc:	2880102c 	andhi	r2,r5,64
 1000900:	1000021e 	bne	r2,zero,100090c <__addsf3+0x444>
 1000904:	2809883a 	mov	r4,r5
 1000908:	3823883a 	mov	r17,r7
 100090c:	200890fa 	slli	r4,r4,3
 1000910:	04003fc4 	movi	r16,255
 1000914:	003f0306 	br	1000524 <__addsf3+0x5c>
 1000918:	01c03fc4 	movi	r7,255
 100091c:	31ffe01e 	bne	r6,r7,10008a0 <__addsf3+0x3d8>
 1000920:	2809883a 	mov	r4,r5
 1000924:	3021883a 	mov	r16,r6
 1000928:	003efe06 	br	1000524 <__addsf3+0x5c>
 100092c:	20001126 	beq	r4,zero,1000974 <__addsf3+0x4ac>
 1000930:	28000826 	beq	r5,zero,1000954 <__addsf3+0x48c>
 1000934:	2008d0fa 	srli	r4,r4,3
 1000938:	2080102c 	andhi	r2,r4,64
 100093c:	103ff326 	beq	r2,zero,100090c <__addsf3+0x444>
 1000940:	280ad0fa 	srli	r5,r5,3
 1000944:	2880102c 	andhi	r2,r5,64
 1000948:	103ff01e 	bne	r2,zero,100090c <__addsf3+0x444>
 100094c:	2809883a 	mov	r4,r5
 1000950:	003fee06 	br	100090c <__addsf3+0x444>
 1000954:	04003fc4 	movi	r16,255
 1000958:	003ef206 	br	1000524 <__addsf3+0x5c>
 100095c:	01000044 	movi	r4,1
 1000960:	003f9706 	br	10007c0 <__addsf3+0x2f8>
 1000964:	0005883a 	mov	r2,zero
 1000968:	003f3406 	br	100063c <__addsf3+0x174>
 100096c:	2809883a 	mov	r4,r5
 1000970:	003eec06 	br	1000524 <__addsf3+0x5c>
 1000974:	2809883a 	mov	r4,r5
 1000978:	04003fc4 	movi	r16,255
 100097c:	003ee906 	br	1000524 <__addsf3+0x5c>
 1000980:	00c00044 	movi	r3,1
 1000984:	003fce06 	br	10008c0 <__addsf3+0x3f8>
 1000988:	0005883a 	mov	r2,zero
 100098c:	003f4e06 	br	10006c8 <__addsf3+0x200>

01000990 <__divsf3>:
 1000990:	defff504 	addi	sp,sp,-44
 1000994:	200cd5fa 	srli	r6,r4,23
 1000998:	dcc00415 	stw	r19,16(sp)
 100099c:	2026d7fa 	srli	r19,r4,31
 10009a0:	00c02034 	movhi	r3,128
 10009a4:	dd800715 	stw	r22,28(sp)
 10009a8:	dd000515 	stw	r20,20(sp)
 10009ac:	dc800315 	stw	r18,12(sp)
 10009b0:	18ffffc4 	addi	r3,r3,-1
 10009b4:	dfc00a15 	stw	ra,40(sp)
 10009b8:	df000915 	stw	fp,36(sp)
 10009bc:	ddc00815 	stw	r23,32(sp)
 10009c0:	dd400615 	stw	r21,24(sp)
 10009c4:	dc400215 	stw	r17,8(sp)
 10009c8:	dc000115 	stw	r16,4(sp)
 10009cc:	35003fcc 	andi	r20,r6,255
 10009d0:	1924703a 	and	r18,r3,r4
 10009d4:	9d803fcc 	andi	r22,r19,255
 10009d8:	a0005226 	beq	r20,zero,1000b24 <__divsf3+0x194>
 10009dc:	00803fc4 	movi	r2,255
 10009e0:	a0802e26 	beq	r20,r2,1000a9c <__divsf3+0x10c>
 10009e4:	91002034 	orhi	r4,r18,128
 10009e8:	202490fa 	slli	r18,r4,3
 10009ec:	a53fe044 	addi	r20,r20,-127
 10009f0:	0021883a 	mov	r16,zero
 10009f4:	002f883a 	mov	r23,zero
 10009f8:	280cd5fa 	srli	r6,r5,23
 10009fc:	282ad7fa 	srli	r21,r5,31
 1000a00:	00c02034 	movhi	r3,128
 1000a04:	18ffffc4 	addi	r3,r3,-1
 1000a08:	31803fcc 	andi	r6,r6,255
 1000a0c:	1962703a 	and	r17,r3,r5
 1000a10:	af003fcc 	andi	fp,r21,255
 1000a14:	30004a26 	beq	r6,zero,1000b40 <__divsf3+0x1b0>
 1000a18:	00803fc4 	movi	r2,255
 1000a1c:	30804526 	beq	r6,r2,1000b34 <__divsf3+0x1a4>
 1000a20:	89402034 	orhi	r5,r17,128
 1000a24:	282290fa 	slli	r17,r5,3
 1000a28:	31bfe044 	addi	r6,r6,-127
 1000a2c:	000b883a 	mov	r5,zero
 1000a30:	2c20b03a 	or	r16,r5,r16
 1000a34:	802090ba 	slli	r16,r16,2
 1000a38:	00804034 	movhi	r2,256
 1000a3c:	10829704 	addi	r2,r2,2652
 1000a40:	80a1883a 	add	r16,r16,r2
 1000a44:	81000017 	ldw	r4,0(r16)
 1000a48:	9d46f03a 	xor	r3,r19,r21
 1000a4c:	180f883a 	mov	r7,r3
 1000a50:	18803fcc 	andi	r2,r3,255
 1000a54:	a18dc83a 	sub	r6,r20,r6
 1000a58:	2000683a 	jmp	r4
 1000a5c:	01000c40 	call	1000c4 <__alt_mem_new_sdram_controller_0-0xefff3c>
 1000a60:	01000ac4 	movi	r4,43
 1000a64:	01000c34 	movhi	r4,48
 1000a68:	01000ab0 	cmpltui	r4,zero,42
 1000a6c:	01000c34 	movhi	r4,48
 1000a70:	01000c0c 	andi	r4,zero,48
 1000a74:	01000c34 	movhi	r4,48
 1000a78:	01000ab0 	cmpltui	r4,zero,42
 1000a7c:	01000ac4 	movi	r4,43
 1000a80:	01000ac4 	movi	r4,43
 1000a84:	01000c0c 	andi	r4,zero,48
 1000a88:	01000ab0 	cmpltui	r4,zero,42
 1000a8c:	01000d20 	cmpeqi	r4,zero,52
 1000a90:	01000d20 	cmpeqi	r4,zero,52
 1000a94:	01000d20 	cmpeqi	r4,zero,52
 1000a98:	01000cd4 	movui	r4,51
 1000a9c:	9000581e 	bne	r18,zero,1000c00 <__divsf3+0x270>
 1000aa0:	04000204 	movi	r16,8
 1000aa4:	05c00084 	movi	r23,2
 1000aa8:	003fd306 	br	10009f8 <__divsf3+0x68>
 1000aac:	0023883a 	mov	r17,zero
 1000ab0:	e02d883a 	mov	r22,fp
 1000ab4:	282f883a 	mov	r23,r5
 1000ab8:	00800084 	movi	r2,2
 1000abc:	b8808f1e 	bne	r23,r2,1000cfc <__divsf3+0x36c>
 1000ac0:	b005883a 	mov	r2,r22
 1000ac4:	11c0004c 	andi	r7,r2,1
 1000ac8:	013fffc4 	movi	r4,-1
 1000acc:	000d883a 	mov	r6,zero
 1000ad0:	21003fcc 	andi	r4,r4,255
 1000ad4:	200895fa 	slli	r4,r4,23
 1000ad8:	38803fcc 	andi	r2,r7,255
 1000adc:	00c02034 	movhi	r3,128
 1000ae0:	100497fa 	slli	r2,r2,31
 1000ae4:	18ffffc4 	addi	r3,r3,-1
 1000ae8:	30c6703a 	and	r3,r6,r3
 1000aec:	1906b03a 	or	r3,r3,r4
 1000af0:	1884b03a 	or	r2,r3,r2
 1000af4:	dfc00a17 	ldw	ra,40(sp)
 1000af8:	df000917 	ldw	fp,36(sp)
 1000afc:	ddc00817 	ldw	r23,32(sp)
 1000b00:	dd800717 	ldw	r22,28(sp)
 1000b04:	dd400617 	ldw	r21,24(sp)
 1000b08:	dd000517 	ldw	r20,20(sp)
 1000b0c:	dcc00417 	ldw	r19,16(sp)
 1000b10:	dc800317 	ldw	r18,12(sp)
 1000b14:	dc400217 	ldw	r17,8(sp)
 1000b18:	dc000117 	ldw	r16,4(sp)
 1000b1c:	dec00b04 	addi	sp,sp,44
 1000b20:	f800283a 	ret
 1000b24:	90002b1e 	bne	r18,zero,1000bd4 <__divsf3+0x244>
 1000b28:	04000104 	movi	r16,4
 1000b2c:	05c00044 	movi	r23,1
 1000b30:	003fb106 	br	10009f8 <__divsf3+0x68>
 1000b34:	8800251e 	bne	r17,zero,1000bcc <__divsf3+0x23c>
 1000b38:	01400084 	movi	r5,2
 1000b3c:	00000206 	br	1000b48 <__divsf3+0x1b8>
 1000b40:	88001a1e 	bne	r17,zero,1000bac <__divsf3+0x21c>
 1000b44:	01400044 	movi	r5,1
 1000b48:	8160b03a 	or	r16,r16,r5
 1000b4c:	802090ba 	slli	r16,r16,2
 1000b50:	00c04034 	movhi	r3,256
 1000b54:	18c2db04 	addi	r3,r3,2924
 1000b58:	80e1883a 	add	r16,r16,r3
 1000b5c:	80c00017 	ldw	r3,0(r16)
 1000b60:	9d44f03a 	xor	r2,r19,r21
 1000b64:	a18dc83a 	sub	r6,r20,r6
 1000b68:	1800683a 	jmp	r3
 1000b6c:	01000ac4 	movi	r4,43
 1000b70:	01000ac4 	movi	r4,43
 1000b74:	01000d10 	cmplti	r4,zero,52
 1000b78:	01000aac 	andhi	r4,zero,42
 1000b7c:	01000d10 	cmplti	r4,zero,52
 1000b80:	01000c0c 	andi	r4,zero,48
 1000b84:	01000d10 	cmplti	r4,zero,52
 1000b88:	01000aac 	andhi	r4,zero,42
 1000b8c:	01000ac4 	movi	r4,43
 1000b90:	01000ac4 	movi	r4,43
 1000b94:	01000c0c 	andi	r4,zero,48
 1000b98:	01000aac 	andhi	r4,zero,42
 1000b9c:	01000d20 	cmpeqi	r4,zero,52
 1000ba0:	01000d20 	cmpeqi	r4,zero,52
 1000ba4:	01000d20 	cmpeqi	r4,zero,52
 1000ba8:	01000d38 	rdprs	r4,zero,52
 1000bac:	8809883a 	mov	r4,r17
 1000bb0:	10019000 	call	1001900 <__clzsi2>
 1000bb4:	10fffec4 	addi	r3,r2,-5
 1000bb8:	10801d84 	addi	r2,r2,118
 1000bbc:	88e2983a 	sll	r17,r17,r3
 1000bc0:	008dc83a 	sub	r6,zero,r2
 1000bc4:	000b883a 	mov	r5,zero
 1000bc8:	003f9906 	br	1000a30 <__divsf3+0xa0>
 1000bcc:	014000c4 	movi	r5,3
 1000bd0:	003f9706 	br	1000a30 <__divsf3+0xa0>
 1000bd4:	9009883a 	mov	r4,r18
 1000bd8:	d9400015 	stw	r5,0(sp)
 1000bdc:	10019000 	call	1001900 <__clzsi2>
 1000be0:	10fffec4 	addi	r3,r2,-5
 1000be4:	11801d84 	addi	r6,r2,118
 1000be8:	90e4983a 	sll	r18,r18,r3
 1000bec:	01a9c83a 	sub	r20,zero,r6
 1000bf0:	0021883a 	mov	r16,zero
 1000bf4:	002f883a 	mov	r23,zero
 1000bf8:	d9400017 	ldw	r5,0(sp)
 1000bfc:	003f7e06 	br	10009f8 <__divsf3+0x68>
 1000c00:	04000304 	movi	r16,12
 1000c04:	05c000c4 	movi	r23,3
 1000c08:	003f7b06 	br	10009f8 <__divsf3+0x68>
 1000c0c:	01802034 	movhi	r6,128
 1000c10:	000f883a 	mov	r7,zero
 1000c14:	31bfffc4 	addi	r6,r6,-1
 1000c18:	013fffc4 	movi	r4,-1
 1000c1c:	003fac06 	br	1000ad0 <__divsf3+0x140>
 1000c20:	01400044 	movi	r5,1
 1000c24:	2909c83a 	sub	r4,r5,r4
 1000c28:	00c006c4 	movi	r3,27
 1000c2c:	19004b0e 	bge	r3,r4,1000d5c <__divsf3+0x3cc>
 1000c30:	114e703a 	and	r7,r2,r5
 1000c34:	0009883a 	mov	r4,zero
 1000c38:	000d883a 	mov	r6,zero
 1000c3c:	003fa406 	br	1000ad0 <__divsf3+0x140>
 1000c40:	9006917a 	slli	r3,r18,5
 1000c44:	8822917a 	slli	r17,r17,5
 1000c48:	1c40372e 	bgeu	r3,r17,1000d28 <__divsf3+0x398>
 1000c4c:	31bfffc4 	addi	r6,r6,-1
 1000c50:	010006c4 	movi	r4,27
 1000c54:	000b883a 	mov	r5,zero
 1000c58:	180f883a 	mov	r7,r3
 1000c5c:	294b883a 	add	r5,r5,r5
 1000c60:	18c7883a 	add	r3,r3,r3
 1000c64:	38000116 	blt	r7,zero,1000c6c <__divsf3+0x2dc>
 1000c68:	1c400236 	bltu	r3,r17,1000c74 <__divsf3+0x2e4>
 1000c6c:	1c47c83a 	sub	r3,r3,r17
 1000c70:	29400054 	ori	r5,r5,1
 1000c74:	213fffc4 	addi	r4,r4,-1
 1000c78:	203ff71e 	bne	r4,zero,1000c58 <__divsf3+0x2c8>
 1000c7c:	1806c03a 	cmpne	r3,r3,zero
 1000c80:	1962b03a 	or	r17,r3,r5
 1000c84:	31001fc4 	addi	r4,r6,127
 1000c88:	013fe50e 	bge	zero,r4,1000c20 <__divsf3+0x290>
 1000c8c:	88c001cc 	andi	r3,r17,7
 1000c90:	18000426 	beq	r3,zero,1000ca4 <__divsf3+0x314>
 1000c94:	88c003cc 	andi	r3,r17,15
 1000c98:	01400104 	movi	r5,4
 1000c9c:	19400126 	beq	r3,r5,1000ca4 <__divsf3+0x314>
 1000ca0:	8963883a 	add	r17,r17,r5
 1000ca4:	88c2002c 	andhi	r3,r17,2048
 1000ca8:	18000426 	beq	r3,zero,1000cbc <__divsf3+0x32c>
 1000cac:	00fe0034 	movhi	r3,63488
 1000cb0:	18ffffc4 	addi	r3,r3,-1
 1000cb4:	31002004 	addi	r4,r6,128
 1000cb8:	88e2703a 	and	r17,r17,r3
 1000cbc:	00c03f84 	movi	r3,254
 1000cc0:	193f8016 	blt	r3,r4,1000ac4 <__divsf3+0x134>
 1000cc4:	880c91ba 	slli	r6,r17,6
 1000cc8:	11c0004c 	andi	r7,r2,1
 1000ccc:	300cd27a 	srli	r6,r6,9
 1000cd0:	003f7f06 	br	1000ad0 <__divsf3+0x140>
 1000cd4:	9080102c 	andhi	r2,r18,64
 1000cd8:	10000226 	beq	r2,zero,1000ce4 <__divsf3+0x354>
 1000cdc:	8880102c 	andhi	r2,r17,64
 1000ce0:	10001826 	beq	r2,zero,1000d44 <__divsf3+0x3b4>
 1000ce4:	00802034 	movhi	r2,128
 1000ce8:	91801034 	orhi	r6,r18,64
 1000cec:	10bfffc4 	addi	r2,r2,-1
 1000cf0:	980f883a 	mov	r7,r19
 1000cf4:	308c703a 	and	r6,r6,r2
 1000cf8:	003fc706 	br	1000c18 <__divsf3+0x288>
 1000cfc:	008000c4 	movi	r2,3
 1000d00:	b8802d26 	beq	r23,r2,1000db8 <__divsf3+0x428>
 1000d04:	00c00044 	movi	r3,1
 1000d08:	b005883a 	mov	r2,r22
 1000d0c:	b8ffdd1e 	bne	r23,r3,1000c84 <__divsf3+0x2f4>
 1000d10:	11c0004c 	andi	r7,r2,1
 1000d14:	0009883a 	mov	r4,zero
 1000d18:	000d883a 	mov	r6,zero
 1000d1c:	003f6c06 	br	1000ad0 <__divsf3+0x140>
 1000d20:	9023883a 	mov	r17,r18
 1000d24:	003f6406 	br	1000ab8 <__divsf3+0x128>
 1000d28:	1c47c83a 	sub	r3,r3,r17
 1000d2c:	01000684 	movi	r4,26
 1000d30:	01400044 	movi	r5,1
 1000d34:	003fc806 	br	1000c58 <__divsf3+0x2c8>
 1000d38:	9080102c 	andhi	r2,r18,64
 1000d3c:	103fe926 	beq	r2,zero,1000ce4 <__divsf3+0x354>
 1000d40:	0023883a 	mov	r17,zero
 1000d44:	00802034 	movhi	r2,128
 1000d48:	89801034 	orhi	r6,r17,64
 1000d4c:	10bfffc4 	addi	r2,r2,-1
 1000d50:	a80f883a 	mov	r7,r21
 1000d54:	308c703a 	and	r6,r6,r2
 1000d58:	003faf06 	br	1000c18 <__divsf3+0x288>
 1000d5c:	01c00804 	movi	r7,32
 1000d60:	390fc83a 	sub	r7,r7,r4
 1000d64:	89ce983a 	sll	r7,r17,r7
 1000d68:	890ad83a 	srl	r5,r17,r4
 1000d6c:	380ec03a 	cmpne	r7,r7,zero
 1000d70:	29cab03a 	or	r5,r5,r7
 1000d74:	28c001cc 	andi	r3,r5,7
 1000d78:	18000426 	beq	r3,zero,1000d8c <__divsf3+0x3fc>
 1000d7c:	28c003cc 	andi	r3,r5,15
 1000d80:	01000104 	movi	r4,4
 1000d84:	19000126 	beq	r3,r4,1000d8c <__divsf3+0x3fc>
 1000d88:	290b883a 	add	r5,r5,r4
 1000d8c:	28c1002c 	andhi	r3,r5,1024
 1000d90:	18000426 	beq	r3,zero,1000da4 <__divsf3+0x414>
 1000d94:	11c0004c 	andi	r7,r2,1
 1000d98:	01000044 	movi	r4,1
 1000d9c:	000d883a 	mov	r6,zero
 1000da0:	003f4b06 	br	1000ad0 <__divsf3+0x140>
 1000da4:	280a91ba 	slli	r5,r5,6
 1000da8:	11c0004c 	andi	r7,r2,1
 1000dac:	0009883a 	mov	r4,zero
 1000db0:	280cd27a 	srli	r6,r5,9
 1000db4:	003f4606 	br	1000ad0 <__divsf3+0x140>
 1000db8:	00802034 	movhi	r2,128
 1000dbc:	89801034 	orhi	r6,r17,64
 1000dc0:	10bfffc4 	addi	r2,r2,-1
 1000dc4:	b00f883a 	mov	r7,r22
 1000dc8:	308c703a 	and	r6,r6,r2
 1000dcc:	003f9206 	br	1000c18 <__divsf3+0x288>

01000dd0 <__gesf2>:
 1000dd0:	2004d5fa 	srli	r2,r4,23
 1000dd4:	2806d5fa 	srli	r3,r5,23
 1000dd8:	01802034 	movhi	r6,128
 1000ddc:	31bfffc4 	addi	r6,r6,-1
 1000de0:	10803fcc 	andi	r2,r2,255
 1000de4:	01c03fc4 	movi	r7,255
 1000de8:	3110703a 	and	r8,r6,r4
 1000dec:	18c03fcc 	andi	r3,r3,255
 1000df0:	314c703a 	and	r6,r6,r5
 1000df4:	2008d7fa 	srli	r4,r4,31
 1000df8:	280ad7fa 	srli	r5,r5,31
 1000dfc:	11c01926 	beq	r2,r7,1000e64 <__gesf2+0x94>
 1000e00:	01c03fc4 	movi	r7,255
 1000e04:	19c00f26 	beq	r3,r7,1000e44 <__gesf2+0x74>
 1000e08:	1000061e 	bne	r2,zero,1000e24 <__gesf2+0x54>
 1000e0c:	400f003a 	cmpeq	r7,r8,zero
 1000e10:	1800071e 	bne	r3,zero,1000e30 <__gesf2+0x60>
 1000e14:	3000061e 	bne	r6,zero,1000e30 <__gesf2+0x60>
 1000e18:	0005883a 	mov	r2,zero
 1000e1c:	40000e1e 	bne	r8,zero,1000e58 <__gesf2+0x88>
 1000e20:	f800283a 	ret
 1000e24:	18000a1e 	bne	r3,zero,1000e50 <__gesf2+0x80>
 1000e28:	30000b26 	beq	r6,zero,1000e58 <__gesf2+0x88>
 1000e2c:	000f883a 	mov	r7,zero
 1000e30:	29403fcc 	andi	r5,r5,255
 1000e34:	38000726 	beq	r7,zero,1000e54 <__gesf2+0x84>
 1000e38:	28000826 	beq	r5,zero,1000e5c <__gesf2+0x8c>
 1000e3c:	00800044 	movi	r2,1
 1000e40:	f800283a 	ret
 1000e44:	303ff026 	beq	r6,zero,1000e08 <__gesf2+0x38>
 1000e48:	00bfff84 	movi	r2,-2
 1000e4c:	f800283a 	ret
 1000e50:	29403fcc 	andi	r5,r5,255
 1000e54:	21400526 	beq	r4,r5,1000e6c <__gesf2+0x9c>
 1000e58:	203ff826 	beq	r4,zero,1000e3c <__gesf2+0x6c>
 1000e5c:	00bfffc4 	movi	r2,-1
 1000e60:	f800283a 	ret
 1000e64:	403fe626 	beq	r8,zero,1000e00 <__gesf2+0x30>
 1000e68:	003ff706 	br	1000e48 <__gesf2+0x78>
 1000e6c:	18bffa16 	blt	r3,r2,1000e58 <__gesf2+0x88>
 1000e70:	10c00216 	blt	r2,r3,1000e7c <__gesf2+0xac>
 1000e74:	323ff836 	bltu	r6,r8,1000e58 <__gesf2+0x88>
 1000e78:	4180022e 	bgeu	r8,r6,1000e84 <__gesf2+0xb4>
 1000e7c:	203fef1e 	bne	r4,zero,1000e3c <__gesf2+0x6c>
 1000e80:	003ff606 	br	1000e5c <__gesf2+0x8c>
 1000e84:	0005883a 	mov	r2,zero
 1000e88:	f800283a 	ret

01000e8c <__mulsf3>:
 1000e8c:	defff504 	addi	sp,sp,-44
 1000e90:	dc000115 	stw	r16,4(sp)
 1000e94:	2020d5fa 	srli	r16,r4,23
 1000e98:	dd400615 	stw	r21,24(sp)
 1000e9c:	202ad7fa 	srli	r21,r4,31
 1000ea0:	dc800315 	stw	r18,12(sp)
 1000ea4:	04802034 	movhi	r18,128
 1000ea8:	df000915 	stw	fp,36(sp)
 1000eac:	dd000515 	stw	r20,20(sp)
 1000eb0:	94bfffc4 	addi	r18,r18,-1
 1000eb4:	dfc00a15 	stw	ra,40(sp)
 1000eb8:	ddc00815 	stw	r23,32(sp)
 1000ebc:	dd800715 	stw	r22,28(sp)
 1000ec0:	dcc00415 	stw	r19,16(sp)
 1000ec4:	dc400215 	stw	r17,8(sp)
 1000ec8:	84003fcc 	andi	r16,r16,255
 1000ecc:	9124703a 	and	r18,r18,r4
 1000ed0:	a829883a 	mov	r20,r21
 1000ed4:	af003fcc 	andi	fp,r21,255
 1000ed8:	80005426 	beq	r16,zero,100102c <__mulsf3+0x1a0>
 1000edc:	00803fc4 	movi	r2,255
 1000ee0:	80802f26 	beq	r16,r2,1000fa0 <__mulsf3+0x114>
 1000ee4:	91002034 	orhi	r4,r18,128
 1000ee8:	202490fa 	slli	r18,r4,3
 1000eec:	843fe044 	addi	r16,r16,-127
 1000ef0:	0023883a 	mov	r17,zero
 1000ef4:	002f883a 	mov	r23,zero
 1000ef8:	2804d5fa 	srli	r2,r5,23
 1000efc:	282cd7fa 	srli	r22,r5,31
 1000f00:	01002034 	movhi	r4,128
 1000f04:	213fffc4 	addi	r4,r4,-1
 1000f08:	10803fcc 	andi	r2,r2,255
 1000f0c:	2166703a 	and	r19,r4,r5
 1000f10:	b1803fcc 	andi	r6,r22,255
 1000f14:	10004c26 	beq	r2,zero,1001048 <__mulsf3+0x1bc>
 1000f18:	00c03fc4 	movi	r3,255
 1000f1c:	10c04726 	beq	r2,r3,100103c <__mulsf3+0x1b0>
 1000f20:	99002034 	orhi	r4,r19,128
 1000f24:	202690fa 	slli	r19,r4,3
 1000f28:	10bfe044 	addi	r2,r2,-127
 1000f2c:	0007883a 	mov	r3,zero
 1000f30:	80a1883a 	add	r16,r16,r2
 1000f34:	010003c4 	movi	r4,15
 1000f38:	1c44b03a 	or	r2,r3,r17
 1000f3c:	b56af03a 	xor	r21,r22,r21
 1000f40:	81c00044 	addi	r7,r16,1
 1000f44:	20806b36 	bltu	r4,r2,10010f4 <__mulsf3+0x268>
 1000f48:	100490ba 	slli	r2,r2,2
 1000f4c:	01004034 	movhi	r4,256
 1000f50:	2103d804 	addi	r4,r4,3936
 1000f54:	1105883a 	add	r2,r2,r4
 1000f58:	10800017 	ldw	r2,0(r2)
 1000f5c:	1000683a 	jmp	r2
 1000f60:	010010f4 	movhi	r4,67
 1000f64:	01000fb4 	movhi	r4,62
 1000f68:	01000fb4 	movhi	r4,62
 1000f6c:	01000fb0 	cmpltui	r4,zero,62
 1000f70:	010010d8 	cmpnei	r4,zero,67
 1000f74:	010010d8 	cmpnei	r4,zero,67
 1000f78:	010010c4 	movi	r4,67
 1000f7c:	01000fb0 	cmpltui	r4,zero,62
 1000f80:	010010d8 	cmpnei	r4,zero,67
 1000f84:	010010c4 	movi	r4,67
 1000f88:	010010d8 	cmpnei	r4,zero,67
 1000f8c:	01000fb0 	cmpltui	r4,zero,62
 1000f90:	010010e4 	muli	r4,zero,67
 1000f94:	010010e4 	muli	r4,zero,67
 1000f98:	010010e4 	muli	r4,zero,67
 1000f9c:	010011c0 	call	10011c <__alt_mem_new_sdram_controller_0-0xeffee4>
 1000fa0:	90003b1e 	bne	r18,zero,1001090 <__mulsf3+0x204>
 1000fa4:	04400204 	movi	r17,8
 1000fa8:	05c00084 	movi	r23,2
 1000fac:	003fd206 	br	1000ef8 <__mulsf3+0x6c>
 1000fb0:	302b883a 	mov	r21,r6
 1000fb4:	00800084 	movi	r2,2
 1000fb8:	18802626 	beq	r3,r2,1001054 <__mulsf3+0x1c8>
 1000fbc:	008000c4 	movi	r2,3
 1000fc0:	1880ab26 	beq	r3,r2,1001270 <__mulsf3+0x3e4>
 1000fc4:	00800044 	movi	r2,1
 1000fc8:	1880a21e 	bne	r3,r2,1001254 <__mulsf3+0x3c8>
 1000fcc:	a829883a 	mov	r20,r21
 1000fd0:	0007883a 	mov	r3,zero
 1000fd4:	0009883a 	mov	r4,zero
 1000fd8:	18803fcc 	andi	r2,r3,255
 1000fdc:	100695fa 	slli	r3,r2,23
 1000fe0:	a0803fcc 	andi	r2,r20,255
 1000fe4:	100a97fa 	slli	r5,r2,31
 1000fe8:	00802034 	movhi	r2,128
 1000fec:	10bfffc4 	addi	r2,r2,-1
 1000ff0:	2084703a 	and	r2,r4,r2
 1000ff4:	10c4b03a 	or	r2,r2,r3
 1000ff8:	1144b03a 	or	r2,r2,r5
 1000ffc:	dfc00a17 	ldw	ra,40(sp)
 1001000:	df000917 	ldw	fp,36(sp)
 1001004:	ddc00817 	ldw	r23,32(sp)
 1001008:	dd800717 	ldw	r22,28(sp)
 100100c:	dd400617 	ldw	r21,24(sp)
 1001010:	dd000517 	ldw	r20,20(sp)
 1001014:	dcc00417 	ldw	r19,16(sp)
 1001018:	dc800317 	ldw	r18,12(sp)
 100101c:	dc400217 	ldw	r17,8(sp)
 1001020:	dc000117 	ldw	r16,4(sp)
 1001024:	dec00b04 	addi	sp,sp,44
 1001028:	f800283a 	ret
 100102c:	90000d1e 	bne	r18,zero,1001064 <__mulsf3+0x1d8>
 1001030:	04400104 	movi	r17,4
 1001034:	05c00044 	movi	r23,1
 1001038:	003faf06 	br	1000ef8 <__mulsf3+0x6c>
 100103c:	9806c03a 	cmpne	r3,r19,zero
 1001040:	18c00084 	addi	r3,r3,2
 1001044:	003fba06 	br	1000f30 <__mulsf3+0xa4>
 1001048:	9800141e 	bne	r19,zero,100109c <__mulsf3+0x210>
 100104c:	00c00044 	movi	r3,1
 1001050:	003fb706 	br	1000f30 <__mulsf3+0xa4>
 1001054:	a829883a 	mov	r20,r21
 1001058:	00ffffc4 	movi	r3,-1
 100105c:	0009883a 	mov	r4,zero
 1001060:	003fdd06 	br	1000fd8 <__mulsf3+0x14c>
 1001064:	9009883a 	mov	r4,r18
 1001068:	d9400015 	stw	r5,0(sp)
 100106c:	10019000 	call	1001900 <__clzsi2>
 1001070:	10fffec4 	addi	r3,r2,-5
 1001074:	10801d84 	addi	r2,r2,118
 1001078:	90e4983a 	sll	r18,r18,r3
 100107c:	00a1c83a 	sub	r16,zero,r2
 1001080:	0023883a 	mov	r17,zero
 1001084:	002f883a 	mov	r23,zero
 1001088:	d9400017 	ldw	r5,0(sp)
 100108c:	003f9a06 	br	1000ef8 <__mulsf3+0x6c>
 1001090:	04400304 	movi	r17,12
 1001094:	05c000c4 	movi	r23,3
 1001098:	003f9706 	br	1000ef8 <__mulsf3+0x6c>
 100109c:	9809883a 	mov	r4,r19
 10010a0:	d9800015 	stw	r6,0(sp)
 10010a4:	10019000 	call	1001900 <__clzsi2>
 10010a8:	10fffec4 	addi	r3,r2,-5
 10010ac:	10801d84 	addi	r2,r2,118
 10010b0:	98e6983a 	sll	r19,r19,r3
 10010b4:	0085c83a 	sub	r2,zero,r2
 10010b8:	0007883a 	mov	r3,zero
 10010bc:	d9800017 	ldw	r6,0(sp)
 10010c0:	003f9b06 	br	1000f30 <__mulsf3+0xa4>
 10010c4:	01002034 	movhi	r4,128
 10010c8:	0029883a 	mov	r20,zero
 10010cc:	213fffc4 	addi	r4,r4,-1
 10010d0:	00ffffc4 	movi	r3,-1
 10010d4:	003fc006 	br	1000fd8 <__mulsf3+0x14c>
 10010d8:	9027883a 	mov	r19,r18
 10010dc:	b807883a 	mov	r3,r23
 10010e0:	003fb406 	br	1000fb4 <__mulsf3+0x128>
 10010e4:	9027883a 	mov	r19,r18
 10010e8:	e02b883a 	mov	r21,fp
 10010ec:	b807883a 	mov	r3,r23
 10010f0:	003fb006 	br	1000fb4 <__mulsf3+0x128>
 10010f4:	9004d43a 	srli	r2,r18,16
 10010f8:	9810d43a 	srli	r8,r19,16
 10010fc:	94bfffcc 	andi	r18,r18,65535
 1001100:	993fffcc 	andi	r4,r19,65535
 1001104:	910d383a 	mul	r6,r18,r4
 1001108:	20a7383a 	mul	r19,r4,r2
 100110c:	9225383a 	mul	r18,r18,r8
 1001110:	3006d43a 	srli	r3,r6,16
 1001114:	1211383a 	mul	r8,r2,r8
 1001118:	94e5883a 	add	r18,r18,r19
 100111c:	1c87883a 	add	r3,r3,r18
 1001120:	1cc0022e 	bgeu	r3,r19,100112c <__mulsf3+0x2a0>
 1001124:	00800074 	movhi	r2,1
 1001128:	4091883a 	add	r8,r8,r2
 100112c:	1804943a 	slli	r2,r3,16
 1001130:	31bfffcc 	andi	r6,r6,65535
 1001134:	1806d43a 	srli	r3,r3,16
 1001138:	1185883a 	add	r2,r2,r6
 100113c:	102691ba 	slli	r19,r2,6
 1001140:	1a07883a 	add	r3,r3,r8
 1001144:	1004d6ba 	srli	r2,r2,26
 1001148:	180891ba 	slli	r4,r3,6
 100114c:	9826c03a 	cmpne	r19,r19,zero
 1001150:	9884b03a 	or	r2,r19,r2
 1001154:	1126b03a 	or	r19,r2,r4
 1001158:	9882002c 	andhi	r2,r19,2048
 100115c:	10000426 	beq	r2,zero,1001170 <__mulsf3+0x2e4>
 1001160:	9804d07a 	srli	r2,r19,1
 1001164:	9900004c 	andi	r4,r19,1
 1001168:	3821883a 	mov	r16,r7
 100116c:	1126b03a 	or	r19,r2,r4
 1001170:	80c01fc4 	addi	r3,r16,127
 1001174:	00c0210e 	bge	zero,r3,10011fc <__mulsf3+0x370>
 1001178:	988001cc 	andi	r2,r19,7
 100117c:	10000426 	beq	r2,zero,1001190 <__mulsf3+0x304>
 1001180:	988003cc 	andi	r2,r19,15
 1001184:	01000104 	movi	r4,4
 1001188:	11000126 	beq	r2,r4,1001190 <__mulsf3+0x304>
 100118c:	9927883a 	add	r19,r19,r4
 1001190:	9882002c 	andhi	r2,r19,2048
 1001194:	10000426 	beq	r2,zero,10011a8 <__mulsf3+0x31c>
 1001198:	00be0034 	movhi	r2,63488
 100119c:	10bfffc4 	addi	r2,r2,-1
 10011a0:	80c02004 	addi	r3,r16,128
 10011a4:	98a6703a 	and	r19,r19,r2
 10011a8:	00803f84 	movi	r2,254
 10011ac:	10ffa916 	blt	r2,r3,1001054 <__mulsf3+0x1c8>
 10011b0:	980891ba 	slli	r4,r19,6
 10011b4:	a829883a 	mov	r20,r21
 10011b8:	2008d27a 	srli	r4,r4,9
 10011bc:	003f8606 	br	1000fd8 <__mulsf3+0x14c>
 10011c0:	9080102c 	andhi	r2,r18,64
 10011c4:	10000826 	beq	r2,zero,10011e8 <__mulsf3+0x35c>
 10011c8:	9880102c 	andhi	r2,r19,64
 10011cc:	1000061e 	bne	r2,zero,10011e8 <__mulsf3+0x35c>
 10011d0:	00802034 	movhi	r2,128
 10011d4:	99001034 	orhi	r4,r19,64
 10011d8:	10bfffc4 	addi	r2,r2,-1
 10011dc:	b029883a 	mov	r20,r22
 10011e0:	2088703a 	and	r4,r4,r2
 10011e4:	003fba06 	br	10010d0 <__mulsf3+0x244>
 10011e8:	00802034 	movhi	r2,128
 10011ec:	91001034 	orhi	r4,r18,64
 10011f0:	10bfffc4 	addi	r2,r2,-1
 10011f4:	2088703a 	and	r4,r4,r2
 10011f8:	003fb506 	br	10010d0 <__mulsf3+0x244>
 10011fc:	00800044 	movi	r2,1
 1001200:	10c7c83a 	sub	r3,r2,r3
 1001204:	008006c4 	movi	r2,27
 1001208:	10ff7016 	blt	r2,r3,1000fcc <__mulsf3+0x140>
 100120c:	00800804 	movi	r2,32
 1001210:	10c5c83a 	sub	r2,r2,r3
 1001214:	9884983a 	sll	r2,r19,r2
 1001218:	98c6d83a 	srl	r3,r19,r3
 100121c:	1004c03a 	cmpne	r2,r2,zero
 1001220:	1884b03a 	or	r2,r3,r2
 1001224:	10c001cc 	andi	r3,r2,7
 1001228:	18000426 	beq	r3,zero,100123c <__mulsf3+0x3b0>
 100122c:	10c003cc 	andi	r3,r2,15
 1001230:	01000104 	movi	r4,4
 1001234:	19000126 	beq	r3,r4,100123c <__mulsf3+0x3b0>
 1001238:	1105883a 	add	r2,r2,r4
 100123c:	10c1002c 	andhi	r3,r2,1024
 1001240:	18000626 	beq	r3,zero,100125c <__mulsf3+0x3d0>
 1001244:	a829883a 	mov	r20,r21
 1001248:	00c00044 	movi	r3,1
 100124c:	0009883a 	mov	r4,zero
 1001250:	003f6106 	br	1000fd8 <__mulsf3+0x14c>
 1001254:	3821883a 	mov	r16,r7
 1001258:	003fc506 	br	1001170 <__mulsf3+0x2e4>
 100125c:	100491ba 	slli	r2,r2,6
 1001260:	a829883a 	mov	r20,r21
 1001264:	0007883a 	mov	r3,zero
 1001268:	1008d27a 	srli	r4,r2,9
 100126c:	003f5a06 	br	1000fd8 <__mulsf3+0x14c>
 1001270:	00802034 	movhi	r2,128
 1001274:	99001034 	orhi	r4,r19,64
 1001278:	10bfffc4 	addi	r2,r2,-1
 100127c:	a829883a 	mov	r20,r21
 1001280:	2088703a 	and	r4,r4,r2
 1001284:	003f9206 	br	10010d0 <__mulsf3+0x244>

01001288 <__subsf3>:
 1001288:	defffc04 	addi	sp,sp,-16
 100128c:	280cd5fa 	srli	r6,r5,23
 1001290:	dc000015 	stw	r16,0(sp)
 1001294:	01c02034 	movhi	r7,128
 1001298:	2020d5fa 	srli	r16,r4,23
 100129c:	39ffffc4 	addi	r7,r7,-1
 10012a0:	3906703a 	and	r3,r7,r4
 10012a4:	dc400115 	stw	r17,4(sp)
 10012a8:	394e703a 	and	r7,r7,r5
 10012ac:	2022d7fa 	srli	r17,r4,31
 10012b0:	dfc00315 	stw	ra,12(sp)
 10012b4:	dc800215 	stw	r18,8(sp)
 10012b8:	31803fcc 	andi	r6,r6,255
 10012bc:	01003fc4 	movi	r4,255
 10012c0:	84003fcc 	andi	r16,r16,255
 10012c4:	180690fa 	slli	r3,r3,3
 10012c8:	2804d7fa 	srli	r2,r5,31
 10012cc:	380e90fa 	slli	r7,r7,3
 10012d0:	31006d26 	beq	r6,r4,1001488 <__subsf3+0x200>
 10012d4:	1080005c 	xori	r2,r2,1
 10012d8:	8189c83a 	sub	r4,r16,r6
 10012dc:	14404f26 	beq	r2,r17,100141c <__subsf3+0x194>
 10012e0:	0100770e 	bge	zero,r4,10014c0 <__subsf3+0x238>
 10012e4:	30001e1e 	bne	r6,zero,1001360 <__subsf3+0xd8>
 10012e8:	38006a1e 	bne	r7,zero,1001494 <__subsf3+0x20c>
 10012ec:	188001cc 	andi	r2,r3,7
 10012f0:	10000426 	beq	r2,zero,1001304 <__subsf3+0x7c>
 10012f4:	188003cc 	andi	r2,r3,15
 10012f8:	01000104 	movi	r4,4
 10012fc:	11000126 	beq	r2,r4,1001304 <__subsf3+0x7c>
 1001300:	1907883a 	add	r3,r3,r4
 1001304:	1881002c 	andhi	r2,r3,1024
 1001308:	10003926 	beq	r2,zero,10013f0 <__subsf3+0x168>
 100130c:	84000044 	addi	r16,r16,1
 1001310:	00803fc4 	movi	r2,255
 1001314:	80807526 	beq	r16,r2,10014ec <__subsf3+0x264>
 1001318:	180691ba 	slli	r3,r3,6
 100131c:	8880004c 	andi	r2,r17,1
 1001320:	180ad27a 	srli	r5,r3,9
 1001324:	84003fcc 	andi	r16,r16,255
 1001328:	800695fa 	slli	r3,r16,23
 100132c:	10803fcc 	andi	r2,r2,255
 1001330:	01002034 	movhi	r4,128
 1001334:	213fffc4 	addi	r4,r4,-1
 1001338:	100497fa 	slli	r2,r2,31
 100133c:	2920703a 	and	r16,r5,r4
 1001340:	80e0b03a 	or	r16,r16,r3
 1001344:	8084b03a 	or	r2,r16,r2
 1001348:	dfc00317 	ldw	ra,12(sp)
 100134c:	dc800217 	ldw	r18,8(sp)
 1001350:	dc400117 	ldw	r17,4(sp)
 1001354:	dc000017 	ldw	r16,0(sp)
 1001358:	dec00404 	addi	sp,sp,16
 100135c:	f800283a 	ret
 1001360:	00803fc4 	movi	r2,255
 1001364:	80bfe126 	beq	r16,r2,10012ec <__subsf3+0x64>
 1001368:	39c10034 	orhi	r7,r7,1024
 100136c:	008006c4 	movi	r2,27
 1001370:	11007416 	blt	r2,r4,1001544 <__subsf3+0x2bc>
 1001374:	00800804 	movi	r2,32
 1001378:	1105c83a 	sub	r2,r2,r4
 100137c:	3884983a 	sll	r2,r7,r2
 1001380:	390ed83a 	srl	r7,r7,r4
 1001384:	1008c03a 	cmpne	r4,r2,zero
 1001388:	390eb03a 	or	r7,r7,r4
 100138c:	19c7c83a 	sub	r3,r3,r7
 1001390:	1881002c 	andhi	r2,r3,1024
 1001394:	10001426 	beq	r2,zero,10013e8 <__subsf3+0x160>
 1001398:	04810034 	movhi	r18,1024
 100139c:	94bfffc4 	addi	r18,r18,-1
 10013a0:	1ca4703a 	and	r18,r3,r18
 10013a4:	9009883a 	mov	r4,r18
 10013a8:	10019000 	call	1001900 <__clzsi2>
 10013ac:	10bffec4 	addi	r2,r2,-5
 10013b0:	90a4983a 	sll	r18,r18,r2
 10013b4:	14005116 	blt	r2,r16,10014fc <__subsf3+0x274>
 10013b8:	1405c83a 	sub	r2,r2,r16
 10013bc:	10c00044 	addi	r3,r2,1
 10013c0:	00800804 	movi	r2,32
 10013c4:	10c5c83a 	sub	r2,r2,r3
 10013c8:	9084983a 	sll	r2,r18,r2
 10013cc:	90e4d83a 	srl	r18,r18,r3
 10013d0:	0021883a 	mov	r16,zero
 10013d4:	1006c03a 	cmpne	r3,r2,zero
 10013d8:	90c6b03a 	or	r3,r18,r3
 10013dc:	003fc306 	br	10012ec <__subsf3+0x64>
 10013e0:	2000e026 	beq	r4,zero,1001764 <__subsf3+0x4dc>
 10013e4:	2007883a 	mov	r3,r4
 10013e8:	188001cc 	andi	r2,r3,7
 10013ec:	103fc11e 	bne	r2,zero,10012f4 <__subsf3+0x6c>
 10013f0:	180ad0fa 	srli	r5,r3,3
 10013f4:	00c03fc4 	movi	r3,255
 10013f8:	8880004c 	andi	r2,r17,1
 10013fc:	80c0031e 	bne	r16,r3,100140c <__subsf3+0x184>
 1001400:	28006d26 	beq	r5,zero,10015b8 <__subsf3+0x330>
 1001404:	29401034 	orhi	r5,r5,64
 1001408:	043fffc4 	movi	r16,-1
 100140c:	00c02034 	movhi	r3,128
 1001410:	18ffffc4 	addi	r3,r3,-1
 1001414:	28ca703a 	and	r5,r5,r3
 1001418:	003fc206 	br	1001324 <__subsf3+0x9c>
 100141c:	01003c0e 	bge	zero,r4,1001510 <__subsf3+0x288>
 1001420:	30002126 	beq	r6,zero,10014a8 <__subsf3+0x220>
 1001424:	01403fc4 	movi	r5,255
 1001428:	817fb026 	beq	r16,r5,10012ec <__subsf3+0x64>
 100142c:	39c10034 	orhi	r7,r7,1024
 1001430:	014006c4 	movi	r5,27
 1001434:	29007416 	blt	r5,r4,1001608 <__subsf3+0x380>
 1001438:	01400804 	movi	r5,32
 100143c:	290bc83a 	sub	r5,r5,r4
 1001440:	394a983a 	sll	r5,r7,r5
 1001444:	390ed83a 	srl	r7,r7,r4
 1001448:	2808c03a 	cmpne	r4,r5,zero
 100144c:	390eb03a 	or	r7,r7,r4
 1001450:	19c7883a 	add	r3,r3,r7
 1001454:	1901002c 	andhi	r4,r3,1024
 1001458:	20003826 	beq	r4,zero,100153c <__subsf3+0x2b4>
 100145c:	84000044 	addi	r16,r16,1
 1001460:	01003fc4 	movi	r4,255
 1001464:	81005426 	beq	r16,r4,10015b8 <__subsf3+0x330>
 1001468:	1023883a 	mov	r17,r2
 100146c:	00bf0034 	movhi	r2,64512
 1001470:	10bfffc4 	addi	r2,r2,-1
 1001474:	1900004c 	andi	r4,r3,1
 1001478:	1886703a 	and	r3,r3,r2
 100147c:	1806d07a 	srli	r3,r3,1
 1001480:	1906b03a 	or	r3,r3,r4
 1001484:	003f9906 	br	10012ec <__subsf3+0x64>
 1001488:	383f9226 	beq	r7,zero,10012d4 <__subsf3+0x4c>
 100148c:	10803fcc 	andi	r2,r2,255
 1001490:	003f9106 	br	10012d8 <__subsf3+0x50>
 1001494:	213fffc4 	addi	r4,r4,-1
 1001498:	203fbc26 	beq	r4,zero,100138c <__subsf3+0x104>
 100149c:	00803fc4 	movi	r2,255
 10014a0:	80bfb21e 	bne	r16,r2,100136c <__subsf3+0xe4>
 10014a4:	003f9106 	br	10012ec <__subsf3+0x64>
 10014a8:	383f9026 	beq	r7,zero,10012ec <__subsf3+0x64>
 10014ac:	213fffc4 	addi	r4,r4,-1
 10014b0:	203fe726 	beq	r4,zero,1001450 <__subsf3+0x1c8>
 10014b4:	01403fc4 	movi	r5,255
 10014b8:	817fdd1e 	bne	r16,r5,1001430 <__subsf3+0x1a8>
 10014bc:	003f8b06 	br	10012ec <__subsf3+0x64>
 10014c0:	2000221e 	bne	r4,zero,100154c <__subsf3+0x2c4>
 10014c4:	81000044 	addi	r4,r16,1
 10014c8:	21003fcc 	andi	r4,r4,255
 10014cc:	01400044 	movi	r5,1
 10014d0:	2900470e 	bge	r5,r4,10015f0 <__subsf3+0x368>
 10014d4:	19e5c83a 	sub	r18,r3,r7
 10014d8:	9141002c 	andhi	r5,r18,1024
 10014dc:	28002d26 	beq	r5,zero,1001594 <__subsf3+0x30c>
 10014e0:	38e5c83a 	sub	r18,r7,r3
 10014e4:	1023883a 	mov	r17,r2
 10014e8:	003fae06 	br	10013a4 <__subsf3+0x11c>
 10014ec:	8880004c 	andi	r2,r17,1
 10014f0:	043fffc4 	movi	r16,-1
 10014f4:	000b883a 	mov	r5,zero
 10014f8:	003f8a06 	br	1001324 <__subsf3+0x9c>
 10014fc:	00ff0034 	movhi	r3,64512
 1001500:	18ffffc4 	addi	r3,r3,-1
 1001504:	80a1c83a 	sub	r16,r16,r2
 1001508:	90c6703a 	and	r3,r18,r3
 100150c:	003f7706 	br	10012ec <__subsf3+0x64>
 1001510:	2000431e 	bne	r4,zero,1001620 <__subsf3+0x398>
 1001514:	81000044 	addi	r4,r16,1
 1001518:	21803fcc 	andi	r6,r4,255
 100151c:	01400044 	movi	r5,1
 1001520:	2980280e 	bge	r5,r6,10015c4 <__subsf3+0x33c>
 1001524:	01403fc4 	movi	r5,255
 1001528:	21402326 	beq	r4,r5,10015b8 <__subsf3+0x330>
 100152c:	19c7883a 	add	r3,r3,r7
 1001530:	1806d07a 	srli	r3,r3,1
 1001534:	2021883a 	mov	r16,r4
 1001538:	003f6c06 	br	10012ec <__subsf3+0x64>
 100153c:	1023883a 	mov	r17,r2
 1001540:	003fa906 	br	10013e8 <__subsf3+0x160>
 1001544:	01c00044 	movi	r7,1
 1001548:	003f9006 	br	100138c <__subsf3+0x104>
 100154c:	8000151e 	bne	r16,zero,10015a4 <__subsf3+0x31c>
 1001550:	18002f26 	beq	r3,zero,1001610 <__subsf3+0x388>
 1001554:	0108303a 	nor	r4,zero,r4
 1001558:	20000a26 	beq	r4,zero,1001584 <__subsf3+0x2fc>
 100155c:	01403fc4 	movi	r5,255
 1001560:	31402b26 	beq	r6,r5,1001610 <__subsf3+0x388>
 1001564:	014006c4 	movi	r5,27
 1001568:	29006e16 	blt	r5,r4,1001724 <__subsf3+0x49c>
 100156c:	01400804 	movi	r5,32
 1001570:	290bc83a 	sub	r5,r5,r4
 1001574:	194a983a 	sll	r5,r3,r5
 1001578:	1908d83a 	srl	r4,r3,r4
 100157c:	2806c03a 	cmpne	r3,r5,zero
 1001580:	20c6b03a 	or	r3,r4,r3
 1001584:	38c7c83a 	sub	r3,r7,r3
 1001588:	3021883a 	mov	r16,r6
 100158c:	1023883a 	mov	r17,r2
 1001590:	003f7f06 	br	1001390 <__subsf3+0x108>
 1001594:	903f831e 	bne	r18,zero,10013a4 <__subsf3+0x11c>
 1001598:	0005883a 	mov	r2,zero
 100159c:	0021883a 	mov	r16,zero
 10015a0:	003f9a06 	br	100140c <__subsf3+0x184>
 10015a4:	01403fc4 	movi	r5,255
 10015a8:	31401926 	beq	r6,r5,1001610 <__subsf3+0x388>
 10015ac:	0109c83a 	sub	r4,zero,r4
 10015b0:	18c10034 	orhi	r3,r3,1024
 10015b4:	003feb06 	br	1001564 <__subsf3+0x2dc>
 10015b8:	043fffc4 	movi	r16,-1
 10015bc:	000b883a 	mov	r5,zero
 10015c0:	003f5806 	br	1001324 <__subsf3+0x9c>
 10015c4:	8000481e 	bne	r16,zero,10016e8 <__subsf3+0x460>
 10015c8:	18006226 	beq	r3,zero,1001754 <__subsf3+0x4cc>
 10015cc:	383f4726 	beq	r7,zero,10012ec <__subsf3+0x64>
 10015d0:	19c7883a 	add	r3,r3,r7
 10015d4:	1881002c 	andhi	r2,r3,1024
 10015d8:	103f8326 	beq	r2,zero,10013e8 <__subsf3+0x160>
 10015dc:	00bf0034 	movhi	r2,64512
 10015e0:	10bfffc4 	addi	r2,r2,-1
 10015e4:	2821883a 	mov	r16,r5
 10015e8:	1886703a 	and	r3,r3,r2
 10015ec:	003f3f06 	br	10012ec <__subsf3+0x64>
 10015f0:	80001c1e 	bne	r16,zero,1001664 <__subsf3+0x3dc>
 10015f4:	1800261e 	bne	r3,zero,1001690 <__subsf3+0x408>
 10015f8:	38004c26 	beq	r7,zero,100172c <__subsf3+0x4a4>
 10015fc:	3807883a 	mov	r3,r7
 1001600:	1023883a 	mov	r17,r2
 1001604:	003f3906 	br	10012ec <__subsf3+0x64>
 1001608:	01c00044 	movi	r7,1
 100160c:	003f9006 	br	1001450 <__subsf3+0x1c8>
 1001610:	3807883a 	mov	r3,r7
 1001614:	3021883a 	mov	r16,r6
 1001618:	1023883a 	mov	r17,r2
 100161c:	003f3306 	br	10012ec <__subsf3+0x64>
 1001620:	8000161e 	bne	r16,zero,100167c <__subsf3+0x3f4>
 1001624:	18002d26 	beq	r3,zero,10016dc <__subsf3+0x454>
 1001628:	0108303a 	nor	r4,zero,r4
 100162c:	20000a26 	beq	r4,zero,1001658 <__subsf3+0x3d0>
 1001630:	01403fc4 	movi	r5,255
 1001634:	31402926 	beq	r6,r5,10016dc <__subsf3+0x454>
 1001638:	014006c4 	movi	r5,27
 100163c:	29004716 	blt	r5,r4,100175c <__subsf3+0x4d4>
 1001640:	01400804 	movi	r5,32
 1001644:	290bc83a 	sub	r5,r5,r4
 1001648:	194a983a 	sll	r5,r3,r5
 100164c:	1908d83a 	srl	r4,r3,r4
 1001650:	2806c03a 	cmpne	r3,r5,zero
 1001654:	20c6b03a 	or	r3,r4,r3
 1001658:	19c7883a 	add	r3,r3,r7
 100165c:	3021883a 	mov	r16,r6
 1001660:	003f7c06 	br	1001454 <__subsf3+0x1cc>
 1001664:	1800111e 	bne	r3,zero,10016ac <__subsf3+0x424>
 1001668:	38003326 	beq	r7,zero,1001738 <__subsf3+0x4b0>
 100166c:	3807883a 	mov	r3,r7
 1001670:	1023883a 	mov	r17,r2
 1001674:	04003fc4 	movi	r16,255
 1001678:	003f1c06 	br	10012ec <__subsf3+0x64>
 100167c:	01403fc4 	movi	r5,255
 1001680:	31401626 	beq	r6,r5,10016dc <__subsf3+0x454>
 1001684:	0109c83a 	sub	r4,zero,r4
 1001688:	18c10034 	orhi	r3,r3,1024
 100168c:	003fea06 	br	1001638 <__subsf3+0x3b0>
 1001690:	383f1626 	beq	r7,zero,10012ec <__subsf3+0x64>
 1001694:	19c9c83a 	sub	r4,r3,r7
 1001698:	2141002c 	andhi	r5,r4,1024
 100169c:	283f5026 	beq	r5,zero,10013e0 <__subsf3+0x158>
 10016a0:	38c7c83a 	sub	r3,r7,r3
 10016a4:	1023883a 	mov	r17,r2
 10016a8:	003f1006 	br	10012ec <__subsf3+0x64>
 10016ac:	38001b26 	beq	r7,zero,100171c <__subsf3+0x494>
 10016b0:	1806d0fa 	srli	r3,r3,3
 10016b4:	1900102c 	andhi	r4,r3,64
 10016b8:	20000526 	beq	r4,zero,10016d0 <__subsf3+0x448>
 10016bc:	380ed0fa 	srli	r7,r7,3
 10016c0:	3900102c 	andhi	r4,r7,64
 10016c4:	2000021e 	bne	r4,zero,10016d0 <__subsf3+0x448>
 10016c8:	3807883a 	mov	r3,r7
 10016cc:	1023883a 	mov	r17,r2
 10016d0:	180690fa 	slli	r3,r3,3
 10016d4:	04003fc4 	movi	r16,255
 10016d8:	003f0406 	br	10012ec <__subsf3+0x64>
 10016dc:	3807883a 	mov	r3,r7
 10016e0:	3021883a 	mov	r16,r6
 10016e4:	003f0106 	br	10012ec <__subsf3+0x64>
 10016e8:	18001726 	beq	r3,zero,1001748 <__subsf3+0x4c0>
 10016ec:	38000b26 	beq	r7,zero,100171c <__subsf3+0x494>
 10016f0:	1806d0fa 	srli	r3,r3,3
 10016f4:	1900102c 	andhi	r4,r3,64
 10016f8:	20000426 	beq	r4,zero,100170c <__subsf3+0x484>
 10016fc:	380ed0fa 	srli	r7,r7,3
 1001700:	3900102c 	andhi	r4,r7,64
 1001704:	2000011e 	bne	r4,zero,100170c <__subsf3+0x484>
 1001708:	3807883a 	mov	r3,r7
 100170c:	180690fa 	slli	r3,r3,3
 1001710:	1023883a 	mov	r17,r2
 1001714:	04003fc4 	movi	r16,255
 1001718:	003ef406 	br	10012ec <__subsf3+0x64>
 100171c:	04003fc4 	movi	r16,255
 1001720:	003ef206 	br	10012ec <__subsf3+0x64>
 1001724:	00c00044 	movi	r3,1
 1001728:	003f9606 	br	1001584 <__subsf3+0x2fc>
 100172c:	000b883a 	mov	r5,zero
 1001730:	0005883a 	mov	r2,zero
 1001734:	003f3506 	br	100140c <__subsf3+0x184>
 1001738:	01402034 	movhi	r5,128
 100173c:	297fffc4 	addi	r5,r5,-1
 1001740:	0005883a 	mov	r2,zero
 1001744:	003f2f06 	br	1001404 <__subsf3+0x17c>
 1001748:	3807883a 	mov	r3,r7
 100174c:	04003fc4 	movi	r16,255
 1001750:	003ee606 	br	10012ec <__subsf3+0x64>
 1001754:	3807883a 	mov	r3,r7
 1001758:	003ee406 	br	10012ec <__subsf3+0x64>
 100175c:	00c00044 	movi	r3,1
 1001760:	003fbd06 	br	1001658 <__subsf3+0x3d0>
 1001764:	0005883a 	mov	r2,zero
 1001768:	003f2806 	br	100140c <__subsf3+0x184>

0100176c <__fixsfsi>:
 100176c:	200ad5fa 	srli	r5,r4,23
 1001770:	00c02034 	movhi	r3,128
 1001774:	18ffffc4 	addi	r3,r3,-1
 1001778:	29403fcc 	andi	r5,r5,255
 100177c:	00801f84 	movi	r2,126
 1001780:	1906703a 	and	r3,r3,r4
 1001784:	2008d7fa 	srli	r4,r4,31
 1001788:	11400e0e 	bge	r2,r5,10017c4 <__fixsfsi+0x58>
 100178c:	00802744 	movi	r2,157
 1001790:	11400816 	blt	r2,r5,10017b4 <__fixsfsi+0x48>
 1001794:	00802544 	movi	r2,149
 1001798:	18c02034 	orhi	r3,r3,128
 100179c:	11400b0e 	bge	r2,r5,10017cc <__fixsfsi+0x60>
 10017a0:	28bfda84 	addi	r2,r5,-150
 10017a4:	1884983a 	sll	r2,r3,r2
 10017a8:	20000726 	beq	r4,zero,10017c8 <__fixsfsi+0x5c>
 10017ac:	0085c83a 	sub	r2,zero,r2
 10017b0:	f800283a 	ret
 10017b4:	00a00034 	movhi	r2,32768
 10017b8:	10bfffc4 	addi	r2,r2,-1
 10017bc:	2085883a 	add	r2,r4,r2
 10017c0:	f800283a 	ret
 10017c4:	0005883a 	mov	r2,zero
 10017c8:	f800283a 	ret
 10017cc:	00802584 	movi	r2,150
 10017d0:	1145c83a 	sub	r2,r2,r5
 10017d4:	1884d83a 	srl	r2,r3,r2
 10017d8:	003ff306 	br	10017a8 <__fixsfsi+0x3c>

010017dc <__floatsisf>:
 10017dc:	defffd04 	addi	sp,sp,-12
 10017e0:	dfc00215 	stw	ra,8(sp)
 10017e4:	dc400115 	stw	r17,4(sp)
 10017e8:	dc000015 	stw	r16,0(sp)
 10017ec:	20003526 	beq	r4,zero,10018c4 <__floatsisf+0xe8>
 10017f0:	2021883a 	mov	r16,r4
 10017f4:	2022d7fa 	srli	r17,r4,31
 10017f8:	20003616 	blt	r4,zero,10018d4 <__floatsisf+0xf8>
 10017fc:	8009883a 	mov	r4,r16
 1001800:	10019000 	call	1001900 <__clzsi2>
 1001804:	00c02784 	movi	r3,158
 1001808:	1887c83a 	sub	r3,r3,r2
 100180c:	01002584 	movi	r4,150
 1001810:	20c01416 	blt	r4,r3,1001864 <__floatsisf+0x88>
 1001814:	20c9c83a 	sub	r4,r4,r3
 1001818:	8120983a 	sll	r16,r16,r4
 100181c:	00802034 	movhi	r2,128
 1001820:	10bfffc4 	addi	r2,r2,-1
 1001824:	8809883a 	mov	r4,r17
 1001828:	80a0703a 	and	r16,r16,r2
 100182c:	18803fcc 	andi	r2,r3,255
 1001830:	100695fa 	slli	r3,r2,23
 1001834:	20803fcc 	andi	r2,r4,255
 1001838:	100897fa 	slli	r4,r2,31
 100183c:	00802034 	movhi	r2,128
 1001840:	10bfffc4 	addi	r2,r2,-1
 1001844:	8084703a 	and	r2,r16,r2
 1001848:	10c4b03a 	or	r2,r2,r3
 100184c:	1104b03a 	or	r2,r2,r4
 1001850:	dfc00217 	ldw	ra,8(sp)
 1001854:	dc400117 	ldw	r17,4(sp)
 1001858:	dc000017 	ldw	r16,0(sp)
 100185c:	dec00304 	addi	sp,sp,12
 1001860:	f800283a 	ret
 1001864:	01002644 	movi	r4,153
 1001868:	20c01c16 	blt	r4,r3,10018dc <__floatsisf+0x100>
 100186c:	20c9c83a 	sub	r4,r4,r3
 1001870:	8120983a 	sll	r16,r16,r4
 1001874:	013f0034 	movhi	r4,64512
 1001878:	213fffc4 	addi	r4,r4,-1
 100187c:	814001cc 	andi	r5,r16,7
 1001880:	8108703a 	and	r4,r16,r4
 1001884:	28000426 	beq	r5,zero,1001898 <__floatsisf+0xbc>
 1001888:	840003cc 	andi	r16,r16,15
 100188c:	01400104 	movi	r5,4
 1001890:	81400126 	beq	r16,r5,1001898 <__floatsisf+0xbc>
 1001894:	2149883a 	add	r4,r4,r5
 1001898:	2141002c 	andhi	r5,r4,1024
 100189c:	28000526 	beq	r5,zero,10018b4 <__floatsisf+0xd8>
 10018a0:	00c027c4 	movi	r3,159
 10018a4:	1887c83a 	sub	r3,r3,r2
 10018a8:	00bf0034 	movhi	r2,64512
 10018ac:	10bfffc4 	addi	r2,r2,-1
 10018b0:	2088703a 	and	r4,r4,r2
 10018b4:	202091ba 	slli	r16,r4,6
 10018b8:	8809883a 	mov	r4,r17
 10018bc:	8020d27a 	srli	r16,r16,9
 10018c0:	003fda06 	br	100182c <__floatsisf+0x50>
 10018c4:	0009883a 	mov	r4,zero
 10018c8:	0007883a 	mov	r3,zero
 10018cc:	0021883a 	mov	r16,zero
 10018d0:	003fd606 	br	100182c <__floatsisf+0x50>
 10018d4:	0121c83a 	sub	r16,zero,r4
 10018d8:	003fc806 	br	10017fc <__floatsisf+0x20>
 10018dc:	01002e44 	movi	r4,185
 10018e0:	20c9c83a 	sub	r4,r4,r3
 10018e4:	01400144 	movi	r5,5
 10018e8:	8108983a 	sll	r4,r16,r4
 10018ec:	288bc83a 	sub	r5,r5,r2
 10018f0:	8160d83a 	srl	r16,r16,r5
 10018f4:	2008c03a 	cmpne	r4,r4,zero
 10018f8:	8120b03a 	or	r16,r16,r4
 10018fc:	003fdd06 	br	1001874 <__floatsisf+0x98>

01001900 <__clzsi2>:
 1001900:	00bfffd4 	movui	r2,65535
 1001904:	11000536 	bltu	r2,r4,100191c <__clzsi2+0x1c>
 1001908:	00803fc4 	movi	r2,255
 100190c:	11000f36 	bltu	r2,r4,100194c <__clzsi2+0x4c>
 1001910:	00800804 	movi	r2,32
 1001914:	0007883a 	mov	r3,zero
 1001918:	00000506 	br	1001930 <__clzsi2+0x30>
 100191c:	00804034 	movhi	r2,256
 1001920:	10bfffc4 	addi	r2,r2,-1
 1001924:	11000c2e 	bgeu	r2,r4,1001958 <__clzsi2+0x58>
 1001928:	00800204 	movi	r2,8
 100192c:	00c00604 	movi	r3,24
 1001930:	20c8d83a 	srl	r4,r4,r3
 1001934:	00c04034 	movhi	r3,256
 1001938:	18de0bc4 	addi	r3,r3,30767
 100193c:	1909883a 	add	r4,r3,r4
 1001940:	20c00003 	ldbu	r3,0(r4)
 1001944:	10c5c83a 	sub	r2,r2,r3
 1001948:	f800283a 	ret
 100194c:	00800604 	movi	r2,24
 1001950:	00c00204 	movi	r3,8
 1001954:	003ff606 	br	1001930 <__clzsi2+0x30>
 1001958:	00800404 	movi	r2,16
 100195c:	1007883a 	mov	r3,r2
 1001960:	003ff306 	br	1001930 <__clzsi2+0x30>

01001964 <_puts_r>:
 1001964:	defff604 	addi	sp,sp,-40
 1001968:	dc000715 	stw	r16,28(sp)
 100196c:	2021883a 	mov	r16,r4
 1001970:	2809883a 	mov	r4,r5
 1001974:	dc400815 	stw	r17,32(sp)
 1001978:	dfc00915 	stw	ra,36(sp)
 100197c:	2823883a 	mov	r17,r5
 1001980:	1001ab40 	call	1001ab4 <strlen>
 1001984:	10c00044 	addi	r3,r2,1
 1001988:	d8800115 	stw	r2,4(sp)
 100198c:	00804034 	movhi	r2,256
 1001990:	109e4c04 	addi	r2,r2,31024
 1001994:	d8800215 	stw	r2,8(sp)
 1001998:	00800044 	movi	r2,1
 100199c:	d8800315 	stw	r2,12(sp)
 10019a0:	00800084 	movi	r2,2
 10019a4:	dc400015 	stw	r17,0(sp)
 10019a8:	d8c00615 	stw	r3,24(sp)
 10019ac:	dec00415 	stw	sp,16(sp)
 10019b0:	d8800515 	stw	r2,20(sp)
 10019b4:	80000226 	beq	r16,zero,10019c0 <_puts_r+0x5c>
 10019b8:	80800e17 	ldw	r2,56(r16)
 10019bc:	10001426 	beq	r2,zero,1001a10 <_puts_r+0xac>
 10019c0:	81400217 	ldw	r5,8(r16)
 10019c4:	2880030b 	ldhu	r2,12(r5)
 10019c8:	10c8000c 	andi	r3,r2,8192
 10019cc:	1800061e 	bne	r3,zero,10019e8 <_puts_r+0x84>
 10019d0:	29001917 	ldw	r4,100(r5)
 10019d4:	00f7ffc4 	movi	r3,-8193
 10019d8:	10880014 	ori	r2,r2,8192
 10019dc:	20c6703a 	and	r3,r4,r3
 10019e0:	2880030d 	sth	r2,12(r5)
 10019e4:	28c01915 	stw	r3,100(r5)
 10019e8:	d9800404 	addi	r6,sp,16
 10019ec:	8009883a 	mov	r4,r16
 10019f0:	1001f3c0 	call	1001f3c <__sfvwrite_r>
 10019f4:	1000091e 	bne	r2,zero,1001a1c <_puts_r+0xb8>
 10019f8:	00800284 	movi	r2,10
 10019fc:	dfc00917 	ldw	ra,36(sp)
 1001a00:	dc400817 	ldw	r17,32(sp)
 1001a04:	dc000717 	ldw	r16,28(sp)
 1001a08:	dec00a04 	addi	sp,sp,40
 1001a0c:	f800283a 	ret
 1001a10:	8009883a 	mov	r4,r16
 1001a14:	1001eec0 	call	1001eec <__sinit>
 1001a18:	003fe906 	br	10019c0 <_puts_r+0x5c>
 1001a1c:	00bfffc4 	movi	r2,-1
 1001a20:	003ff606 	br	10019fc <_puts_r+0x98>

01001a24 <puts>:
 1001a24:	00804074 	movhi	r2,257
 1001a28:	10a4eb04 	addi	r2,r2,-27732
 1001a2c:	200b883a 	mov	r5,r4
 1001a30:	11000017 	ldw	r4,0(r2)
 1001a34:	10019641 	jmpi	1001964 <_puts_r>

01001a38 <srand>:
 1001a38:	00804074 	movhi	r2,257
 1001a3c:	10a4eb04 	addi	r2,r2,-27732
 1001a40:	10800017 	ldw	r2,0(r2)
 1001a44:	11002915 	stw	r4,164(r2)
 1001a48:	10002a15 	stw	zero,168(r2)
 1001a4c:	f800283a 	ret

01001a50 <rand>:
 1001a50:	00804074 	movhi	r2,257
 1001a54:	defffe04 	addi	sp,sp,-8
 1001a58:	10a4eb04 	addi	r2,r2,-27732
 1001a5c:	dc000015 	stw	r16,0(sp)
 1001a60:	14000017 	ldw	r16,0(r2)
 1001a64:	dfc00115 	stw	ra,4(sp)
 1001a68:	01932574 	movhi	r6,19605
 1001a6c:	81002917 	ldw	r4,164(r16)
 1001a70:	81402a17 	ldw	r5,168(r16)
 1001a74:	01d614b4 	movhi	r7,22610
 1001a78:	319fcb44 	addi	r6,r6,32557
 1001a7c:	39fd0b44 	addi	r7,r7,-3027
 1001a80:	10046a00 	call	10046a0 <__muldi3>
 1001a84:	11000044 	addi	r4,r2,1
 1001a88:	2085803a 	cmpltu	r2,r4,r2
 1001a8c:	10c7883a 	add	r3,r2,r3
 1001a90:	00a00034 	movhi	r2,32768
 1001a94:	10bfffc4 	addi	r2,r2,-1
 1001a98:	1884703a 	and	r2,r3,r2
 1001a9c:	81002915 	stw	r4,164(r16)
 1001aa0:	80c02a15 	stw	r3,168(r16)
 1001aa4:	dfc00117 	ldw	ra,4(sp)
 1001aa8:	dc000017 	ldw	r16,0(sp)
 1001aac:	dec00204 	addi	sp,sp,8
 1001ab0:	f800283a 	ret

01001ab4 <strlen>:
 1001ab4:	208000cc 	andi	r2,r4,3
 1001ab8:	10002026 	beq	r2,zero,1001b3c <strlen+0x88>
 1001abc:	20800007 	ldb	r2,0(r4)
 1001ac0:	10002026 	beq	r2,zero,1001b44 <strlen+0x90>
 1001ac4:	2005883a 	mov	r2,r4
 1001ac8:	00000206 	br	1001ad4 <strlen+0x20>
 1001acc:	10c00007 	ldb	r3,0(r2)
 1001ad0:	18001826 	beq	r3,zero,1001b34 <strlen+0x80>
 1001ad4:	10800044 	addi	r2,r2,1
 1001ad8:	10c000cc 	andi	r3,r2,3
 1001adc:	183ffb1e 	bne	r3,zero,1001acc <strlen+0x18>
 1001ae0:	10c00017 	ldw	r3,0(r2)
 1001ae4:	01ffbff4 	movhi	r7,65279
 1001ae8:	39ffbfc4 	addi	r7,r7,-257
 1001aec:	00ca303a 	nor	r5,zero,r3
 1001af0:	01a02074 	movhi	r6,32897
 1001af4:	19c7883a 	add	r3,r3,r7
 1001af8:	31a02004 	addi	r6,r6,-32640
 1001afc:	1946703a 	and	r3,r3,r5
 1001b00:	1986703a 	and	r3,r3,r6
 1001b04:	1800091e 	bne	r3,zero,1001b2c <strlen+0x78>
 1001b08:	10800104 	addi	r2,r2,4
 1001b0c:	10c00017 	ldw	r3,0(r2)
 1001b10:	19cb883a 	add	r5,r3,r7
 1001b14:	00c6303a 	nor	r3,zero,r3
 1001b18:	28c6703a 	and	r3,r5,r3
 1001b1c:	1986703a 	and	r3,r3,r6
 1001b20:	183ff926 	beq	r3,zero,1001b08 <strlen+0x54>
 1001b24:	00000106 	br	1001b2c <strlen+0x78>
 1001b28:	10800044 	addi	r2,r2,1
 1001b2c:	10c00007 	ldb	r3,0(r2)
 1001b30:	183ffd1e 	bne	r3,zero,1001b28 <strlen+0x74>
 1001b34:	1105c83a 	sub	r2,r2,r4
 1001b38:	f800283a 	ret
 1001b3c:	2005883a 	mov	r2,r4
 1001b40:	003fe706 	br	1001ae0 <strlen+0x2c>
 1001b44:	0005883a 	mov	r2,zero
 1001b48:	f800283a 	ret

01001b4c <time>:
 1001b4c:	00804074 	movhi	r2,257
 1001b50:	defffc04 	addi	sp,sp,-16
 1001b54:	10a4eb04 	addi	r2,r2,-27732
 1001b58:	dc000215 	stw	r16,8(sp)
 1001b5c:	2021883a 	mov	r16,r4
 1001b60:	11000017 	ldw	r4,0(r2)
 1001b64:	000d883a 	mov	r6,zero
 1001b68:	d80b883a 	mov	r5,sp
 1001b6c:	dfc00315 	stw	ra,12(sp)
 1001b70:	10025800 	call	1002580 <_gettimeofday_r>
 1001b74:	10000716 	blt	r2,zero,1001b94 <time+0x48>
 1001b78:	d8800017 	ldw	r2,0(sp)
 1001b7c:	80000126 	beq	r16,zero,1001b84 <time+0x38>
 1001b80:	80800015 	stw	r2,0(r16)
 1001b84:	dfc00317 	ldw	ra,12(sp)
 1001b88:	dc000217 	ldw	r16,8(sp)
 1001b8c:	dec00404 	addi	sp,sp,16
 1001b90:	f800283a 	ret
 1001b94:	00bfffc4 	movi	r2,-1
 1001b98:	003ffa06 	br	1001b84 <time+0x38>

01001b9c <__fp_unlock>:
 1001b9c:	0005883a 	mov	r2,zero
 1001ba0:	f800283a 	ret

01001ba4 <_cleanup_r>:
 1001ba4:	01404034 	movhi	r5,256
 1001ba8:	294ee504 	addi	r5,r5,15252
 1001bac:	10024bc1 	jmpi	10024bc <_fwalk_reent>

01001bb0 <__sinit.part.1>:
 1001bb0:	defff704 	addi	sp,sp,-36
 1001bb4:	00c04034 	movhi	r3,256
 1001bb8:	dfc00815 	stw	ra,32(sp)
 1001bbc:	ddc00715 	stw	r23,28(sp)
 1001bc0:	dd800615 	stw	r22,24(sp)
 1001bc4:	dd400515 	stw	r21,20(sp)
 1001bc8:	dd000415 	stw	r20,16(sp)
 1001bcc:	dcc00315 	stw	r19,12(sp)
 1001bd0:	dc800215 	stw	r18,8(sp)
 1001bd4:	dc400115 	stw	r17,4(sp)
 1001bd8:	dc000015 	stw	r16,0(sp)
 1001bdc:	18c6e904 	addi	r3,r3,7076
 1001be0:	24000117 	ldw	r16,4(r4)
 1001be4:	20c00f15 	stw	r3,60(r4)
 1001be8:	2080bb04 	addi	r2,r4,748
 1001bec:	00c000c4 	movi	r3,3
 1001bf0:	20c0b915 	stw	r3,740(r4)
 1001bf4:	2080ba15 	stw	r2,744(r4)
 1001bf8:	2000b815 	stw	zero,736(r4)
 1001bfc:	05c00204 	movi	r23,8
 1001c00:	00800104 	movi	r2,4
 1001c04:	2025883a 	mov	r18,r4
 1001c08:	b80d883a 	mov	r6,r23
 1001c0c:	81001704 	addi	r4,r16,92
 1001c10:	000b883a 	mov	r5,zero
 1001c14:	80000015 	stw	zero,0(r16)
 1001c18:	80000115 	stw	zero,4(r16)
 1001c1c:	80000215 	stw	zero,8(r16)
 1001c20:	8080030d 	sth	r2,12(r16)
 1001c24:	80001915 	stw	zero,100(r16)
 1001c28:	8000038d 	sth	zero,14(r16)
 1001c2c:	80000415 	stw	zero,16(r16)
 1001c30:	80000515 	stw	zero,20(r16)
 1001c34:	80000615 	stw	zero,24(r16)
 1001c38:	10031700 	call	1003170 <memset>
 1001c3c:	05804034 	movhi	r22,256
 1001c40:	94400217 	ldw	r17,8(r18)
 1001c44:	05404034 	movhi	r21,256
 1001c48:	05004034 	movhi	r20,256
 1001c4c:	04c04034 	movhi	r19,256
 1001c50:	b58e1404 	addi	r22,r22,14416
 1001c54:	ad4e2b04 	addi	r21,r21,14508
 1001c58:	a50e4a04 	addi	r20,r20,14632
 1001c5c:	9cce6104 	addi	r19,r19,14724
 1001c60:	85800815 	stw	r22,32(r16)
 1001c64:	85400915 	stw	r21,36(r16)
 1001c68:	85000a15 	stw	r20,40(r16)
 1001c6c:	84c00b15 	stw	r19,44(r16)
 1001c70:	84000715 	stw	r16,28(r16)
 1001c74:	00800284 	movi	r2,10
 1001c78:	8880030d 	sth	r2,12(r17)
 1001c7c:	00800044 	movi	r2,1
 1001c80:	b80d883a 	mov	r6,r23
 1001c84:	89001704 	addi	r4,r17,92
 1001c88:	000b883a 	mov	r5,zero
 1001c8c:	88000015 	stw	zero,0(r17)
 1001c90:	88000115 	stw	zero,4(r17)
 1001c94:	88000215 	stw	zero,8(r17)
 1001c98:	88001915 	stw	zero,100(r17)
 1001c9c:	8880038d 	sth	r2,14(r17)
 1001ca0:	88000415 	stw	zero,16(r17)
 1001ca4:	88000515 	stw	zero,20(r17)
 1001ca8:	88000615 	stw	zero,24(r17)
 1001cac:	10031700 	call	1003170 <memset>
 1001cb0:	94000317 	ldw	r16,12(r18)
 1001cb4:	00800484 	movi	r2,18
 1001cb8:	8c400715 	stw	r17,28(r17)
 1001cbc:	8d800815 	stw	r22,32(r17)
 1001cc0:	8d400915 	stw	r21,36(r17)
 1001cc4:	8d000a15 	stw	r20,40(r17)
 1001cc8:	8cc00b15 	stw	r19,44(r17)
 1001ccc:	8080030d 	sth	r2,12(r16)
 1001cd0:	00800084 	movi	r2,2
 1001cd4:	80000015 	stw	zero,0(r16)
 1001cd8:	80000115 	stw	zero,4(r16)
 1001cdc:	80000215 	stw	zero,8(r16)
 1001ce0:	80001915 	stw	zero,100(r16)
 1001ce4:	8080038d 	sth	r2,14(r16)
 1001ce8:	80000415 	stw	zero,16(r16)
 1001cec:	80000515 	stw	zero,20(r16)
 1001cf0:	80000615 	stw	zero,24(r16)
 1001cf4:	b80d883a 	mov	r6,r23
 1001cf8:	000b883a 	mov	r5,zero
 1001cfc:	81001704 	addi	r4,r16,92
 1001d00:	10031700 	call	1003170 <memset>
 1001d04:	00800044 	movi	r2,1
 1001d08:	84000715 	stw	r16,28(r16)
 1001d0c:	85800815 	stw	r22,32(r16)
 1001d10:	85400915 	stw	r21,36(r16)
 1001d14:	85000a15 	stw	r20,40(r16)
 1001d18:	84c00b15 	stw	r19,44(r16)
 1001d1c:	90800e15 	stw	r2,56(r18)
 1001d20:	dfc00817 	ldw	ra,32(sp)
 1001d24:	ddc00717 	ldw	r23,28(sp)
 1001d28:	dd800617 	ldw	r22,24(sp)
 1001d2c:	dd400517 	ldw	r21,20(sp)
 1001d30:	dd000417 	ldw	r20,16(sp)
 1001d34:	dcc00317 	ldw	r19,12(sp)
 1001d38:	dc800217 	ldw	r18,8(sp)
 1001d3c:	dc400117 	ldw	r17,4(sp)
 1001d40:	dc000017 	ldw	r16,0(sp)
 1001d44:	dec00904 	addi	sp,sp,36
 1001d48:	f800283a 	ret

01001d4c <__fp_lock>:
 1001d4c:	0005883a 	mov	r2,zero
 1001d50:	f800283a 	ret

01001d54 <__sfmoreglue>:
 1001d54:	defffc04 	addi	sp,sp,-16
 1001d58:	dc400115 	stw	r17,4(sp)
 1001d5c:	2c7fffc4 	addi	r17,r5,-1
 1001d60:	8c401a24 	muli	r17,r17,104
 1001d64:	dc800215 	stw	r18,8(sp)
 1001d68:	2825883a 	mov	r18,r5
 1001d6c:	89401d04 	addi	r5,r17,116
 1001d70:	dc000015 	stw	r16,0(sp)
 1001d74:	dfc00315 	stw	ra,12(sp)
 1001d78:	10025dc0 	call	10025dc <_malloc_r>
 1001d7c:	1021883a 	mov	r16,r2
 1001d80:	10000726 	beq	r2,zero,1001da0 <__sfmoreglue+0x4c>
 1001d84:	11000304 	addi	r4,r2,12
 1001d88:	10000015 	stw	zero,0(r2)
 1001d8c:	14800115 	stw	r18,4(r2)
 1001d90:	11000215 	stw	r4,8(r2)
 1001d94:	89801a04 	addi	r6,r17,104
 1001d98:	000b883a 	mov	r5,zero
 1001d9c:	10031700 	call	1003170 <memset>
 1001da0:	8005883a 	mov	r2,r16
 1001da4:	dfc00317 	ldw	ra,12(sp)
 1001da8:	dc800217 	ldw	r18,8(sp)
 1001dac:	dc400117 	ldw	r17,4(sp)
 1001db0:	dc000017 	ldw	r16,0(sp)
 1001db4:	dec00404 	addi	sp,sp,16
 1001db8:	f800283a 	ret

01001dbc <__sfp>:
 1001dbc:	defffb04 	addi	sp,sp,-20
 1001dc0:	dc000015 	stw	r16,0(sp)
 1001dc4:	04004074 	movhi	r16,257
 1001dc8:	8424ea04 	addi	r16,r16,-27736
 1001dcc:	dcc00315 	stw	r19,12(sp)
 1001dd0:	2027883a 	mov	r19,r4
 1001dd4:	81000017 	ldw	r4,0(r16)
 1001dd8:	dfc00415 	stw	ra,16(sp)
 1001ddc:	dc800215 	stw	r18,8(sp)
 1001de0:	20800e17 	ldw	r2,56(r4)
 1001de4:	dc400115 	stw	r17,4(sp)
 1001de8:	1000021e 	bne	r2,zero,1001df4 <__sfp+0x38>
 1001dec:	1001bb00 	call	1001bb0 <__sinit.part.1>
 1001df0:	81000017 	ldw	r4,0(r16)
 1001df4:	2480b804 	addi	r18,r4,736
 1001df8:	047fffc4 	movi	r17,-1
 1001dfc:	91000117 	ldw	r4,4(r18)
 1001e00:	94000217 	ldw	r16,8(r18)
 1001e04:	213fffc4 	addi	r4,r4,-1
 1001e08:	20000a16 	blt	r4,zero,1001e34 <__sfp+0x78>
 1001e0c:	8080030f 	ldh	r2,12(r16)
 1001e10:	10000c26 	beq	r2,zero,1001e44 <__sfp+0x88>
 1001e14:	80c01d04 	addi	r3,r16,116
 1001e18:	00000206 	br	1001e24 <__sfp+0x68>
 1001e1c:	18bfe60f 	ldh	r2,-104(r3)
 1001e20:	10000826 	beq	r2,zero,1001e44 <__sfp+0x88>
 1001e24:	213fffc4 	addi	r4,r4,-1
 1001e28:	1c3ffd04 	addi	r16,r3,-12
 1001e2c:	18c01a04 	addi	r3,r3,104
 1001e30:	247ffa1e 	bne	r4,r17,1001e1c <__sfp+0x60>
 1001e34:	90800017 	ldw	r2,0(r18)
 1001e38:	10001d26 	beq	r2,zero,1001eb0 <__sfp+0xf4>
 1001e3c:	1025883a 	mov	r18,r2
 1001e40:	003fee06 	br	1001dfc <__sfp+0x40>
 1001e44:	00bfffc4 	movi	r2,-1
 1001e48:	8080038d 	sth	r2,14(r16)
 1001e4c:	00800044 	movi	r2,1
 1001e50:	8080030d 	sth	r2,12(r16)
 1001e54:	80001915 	stw	zero,100(r16)
 1001e58:	80000015 	stw	zero,0(r16)
 1001e5c:	80000215 	stw	zero,8(r16)
 1001e60:	80000115 	stw	zero,4(r16)
 1001e64:	80000415 	stw	zero,16(r16)
 1001e68:	80000515 	stw	zero,20(r16)
 1001e6c:	80000615 	stw	zero,24(r16)
 1001e70:	01800204 	movi	r6,8
 1001e74:	000b883a 	mov	r5,zero
 1001e78:	81001704 	addi	r4,r16,92
 1001e7c:	10031700 	call	1003170 <memset>
 1001e80:	8005883a 	mov	r2,r16
 1001e84:	80000c15 	stw	zero,48(r16)
 1001e88:	80000d15 	stw	zero,52(r16)
 1001e8c:	80001115 	stw	zero,68(r16)
 1001e90:	80001215 	stw	zero,72(r16)
 1001e94:	dfc00417 	ldw	ra,16(sp)
 1001e98:	dcc00317 	ldw	r19,12(sp)
 1001e9c:	dc800217 	ldw	r18,8(sp)
 1001ea0:	dc400117 	ldw	r17,4(sp)
 1001ea4:	dc000017 	ldw	r16,0(sp)
 1001ea8:	dec00504 	addi	sp,sp,20
 1001eac:	f800283a 	ret
 1001eb0:	01400104 	movi	r5,4
 1001eb4:	9809883a 	mov	r4,r19
 1001eb8:	1001d540 	call	1001d54 <__sfmoreglue>
 1001ebc:	90800015 	stw	r2,0(r18)
 1001ec0:	103fde1e 	bne	r2,zero,1001e3c <__sfp+0x80>
 1001ec4:	00800304 	movi	r2,12
 1001ec8:	98800015 	stw	r2,0(r19)
 1001ecc:	0005883a 	mov	r2,zero
 1001ed0:	003ff006 	br	1001e94 <__sfp+0xd8>

01001ed4 <_cleanup>:
 1001ed4:	00804074 	movhi	r2,257
 1001ed8:	10a4ea04 	addi	r2,r2,-27736
 1001edc:	11000017 	ldw	r4,0(r2)
 1001ee0:	01404034 	movhi	r5,256
 1001ee4:	294ee504 	addi	r5,r5,15252
 1001ee8:	10024bc1 	jmpi	10024bc <_fwalk_reent>

01001eec <__sinit>:
 1001eec:	20800e17 	ldw	r2,56(r4)
 1001ef0:	10000126 	beq	r2,zero,1001ef8 <__sinit+0xc>
 1001ef4:	f800283a 	ret
 1001ef8:	1001bb01 	jmpi	1001bb0 <__sinit.part.1>

01001efc <__sfp_lock_acquire>:
 1001efc:	f800283a 	ret

01001f00 <__sfp_lock_release>:
 1001f00:	f800283a 	ret

01001f04 <__sinit_lock_acquire>:
 1001f04:	f800283a 	ret

01001f08 <__sinit_lock_release>:
 1001f08:	f800283a 	ret

01001f0c <__fp_lock_all>:
 1001f0c:	00804074 	movhi	r2,257
 1001f10:	10a4eb04 	addi	r2,r2,-27732
 1001f14:	11000017 	ldw	r4,0(r2)
 1001f18:	01404034 	movhi	r5,256
 1001f1c:	29475304 	addi	r5,r5,7500
 1001f20:	10023f81 	jmpi	10023f8 <_fwalk>

01001f24 <__fp_unlock_all>:
 1001f24:	00804074 	movhi	r2,257
 1001f28:	10a4eb04 	addi	r2,r2,-27732
 1001f2c:	11000017 	ldw	r4,0(r2)
 1001f30:	01404034 	movhi	r5,256
 1001f34:	2946e704 	addi	r5,r5,7068
 1001f38:	10023f81 	jmpi	10023f8 <_fwalk>

01001f3c <__sfvwrite_r>:
 1001f3c:	30800217 	ldw	r2,8(r6)
 1001f40:	10006726 	beq	r2,zero,10020e0 <__sfvwrite_r+0x1a4>
 1001f44:	28c0030b 	ldhu	r3,12(r5)
 1001f48:	defff404 	addi	sp,sp,-48
 1001f4c:	dd400715 	stw	r21,28(sp)
 1001f50:	dd000615 	stw	r20,24(sp)
 1001f54:	dc000215 	stw	r16,8(sp)
 1001f58:	dfc00b15 	stw	ra,44(sp)
 1001f5c:	df000a15 	stw	fp,40(sp)
 1001f60:	ddc00915 	stw	r23,36(sp)
 1001f64:	dd800815 	stw	r22,32(sp)
 1001f68:	dcc00515 	stw	r19,20(sp)
 1001f6c:	dc800415 	stw	r18,16(sp)
 1001f70:	dc400315 	stw	r17,12(sp)
 1001f74:	1880020c 	andi	r2,r3,8
 1001f78:	2821883a 	mov	r16,r5
 1001f7c:	202b883a 	mov	r21,r4
 1001f80:	3029883a 	mov	r20,r6
 1001f84:	10002726 	beq	r2,zero,1002024 <__sfvwrite_r+0xe8>
 1001f88:	28800417 	ldw	r2,16(r5)
 1001f8c:	10002526 	beq	r2,zero,1002024 <__sfvwrite_r+0xe8>
 1001f90:	1880008c 	andi	r2,r3,2
 1001f94:	a4400017 	ldw	r17,0(r20)
 1001f98:	10002a26 	beq	r2,zero,1002044 <__sfvwrite_r+0x108>
 1001f9c:	05a00034 	movhi	r22,32768
 1001fa0:	0027883a 	mov	r19,zero
 1001fa4:	0025883a 	mov	r18,zero
 1001fa8:	b5bf0004 	addi	r22,r22,-1024
 1001fac:	980d883a 	mov	r6,r19
 1001fb0:	a809883a 	mov	r4,r21
 1001fb4:	90004626 	beq	r18,zero,10020d0 <__sfvwrite_r+0x194>
 1001fb8:	900f883a 	mov	r7,r18
 1001fbc:	b480022e 	bgeu	r22,r18,1001fc8 <__sfvwrite_r+0x8c>
 1001fc0:	01e00034 	movhi	r7,32768
 1001fc4:	39ff0004 	addi	r7,r7,-1024
 1001fc8:	80800917 	ldw	r2,36(r16)
 1001fcc:	81400717 	ldw	r5,28(r16)
 1001fd0:	103ee83a 	callr	r2
 1001fd4:	0080570e 	bge	zero,r2,1002134 <__sfvwrite_r+0x1f8>
 1001fd8:	a0c00217 	ldw	r3,8(r20)
 1001fdc:	98a7883a 	add	r19,r19,r2
 1001fe0:	90a5c83a 	sub	r18,r18,r2
 1001fe4:	1885c83a 	sub	r2,r3,r2
 1001fe8:	a0800215 	stw	r2,8(r20)
 1001fec:	103fef1e 	bne	r2,zero,1001fac <__sfvwrite_r+0x70>
 1001ff0:	0005883a 	mov	r2,zero
 1001ff4:	dfc00b17 	ldw	ra,44(sp)
 1001ff8:	df000a17 	ldw	fp,40(sp)
 1001ffc:	ddc00917 	ldw	r23,36(sp)
 1002000:	dd800817 	ldw	r22,32(sp)
 1002004:	dd400717 	ldw	r21,28(sp)
 1002008:	dd000617 	ldw	r20,24(sp)
 100200c:	dcc00517 	ldw	r19,20(sp)
 1002010:	dc800417 	ldw	r18,16(sp)
 1002014:	dc400317 	ldw	r17,12(sp)
 1002018:	dc000217 	ldw	r16,8(sp)
 100201c:	dec00c04 	addi	sp,sp,48
 1002020:	f800283a 	ret
 1002024:	800b883a 	mov	r5,r16
 1002028:	a809883a 	mov	r4,r21
 100202c:	10039ec0 	call	10039ec <__swsetup_r>
 1002030:	1000eb1e 	bne	r2,zero,10023e0 <__sfvwrite_r+0x4a4>
 1002034:	80c0030b 	ldhu	r3,12(r16)
 1002038:	a4400017 	ldw	r17,0(r20)
 100203c:	1880008c 	andi	r2,r3,2
 1002040:	103fd61e 	bne	r2,zero,1001f9c <__sfvwrite_r+0x60>
 1002044:	1880004c 	andi	r2,r3,1
 1002048:	10003f1e 	bne	r2,zero,1002148 <__sfvwrite_r+0x20c>
 100204c:	0039883a 	mov	fp,zero
 1002050:	0025883a 	mov	r18,zero
 1002054:	90001a26 	beq	r18,zero,10020c0 <__sfvwrite_r+0x184>
 1002058:	1880800c 	andi	r2,r3,512
 100205c:	84c00217 	ldw	r19,8(r16)
 1002060:	10002126 	beq	r2,zero,10020e8 <__sfvwrite_r+0x1ac>
 1002064:	982f883a 	mov	r23,r19
 1002068:	94c09336 	bltu	r18,r19,10022b8 <__sfvwrite_r+0x37c>
 100206c:	1881200c 	andi	r2,r3,1152
 1002070:	10009e1e 	bne	r2,zero,10022ec <__sfvwrite_r+0x3b0>
 1002074:	81000017 	ldw	r4,0(r16)
 1002078:	b80d883a 	mov	r6,r23
 100207c:	e00b883a 	mov	r5,fp
 1002080:	10030140 	call	1003014 <memmove>
 1002084:	80c00217 	ldw	r3,8(r16)
 1002088:	81000017 	ldw	r4,0(r16)
 100208c:	9005883a 	mov	r2,r18
 1002090:	1ce7c83a 	sub	r19,r3,r19
 1002094:	25cf883a 	add	r7,r4,r23
 1002098:	84c00215 	stw	r19,8(r16)
 100209c:	81c00015 	stw	r7,0(r16)
 10020a0:	a0c00217 	ldw	r3,8(r20)
 10020a4:	e0b9883a 	add	fp,fp,r2
 10020a8:	90a5c83a 	sub	r18,r18,r2
 10020ac:	18a7c83a 	sub	r19,r3,r2
 10020b0:	a4c00215 	stw	r19,8(r20)
 10020b4:	983fce26 	beq	r19,zero,1001ff0 <__sfvwrite_r+0xb4>
 10020b8:	80c0030b 	ldhu	r3,12(r16)
 10020bc:	903fe61e 	bne	r18,zero,1002058 <__sfvwrite_r+0x11c>
 10020c0:	8f000017 	ldw	fp,0(r17)
 10020c4:	8c800117 	ldw	r18,4(r17)
 10020c8:	8c400204 	addi	r17,r17,8
 10020cc:	003fe106 	br	1002054 <__sfvwrite_r+0x118>
 10020d0:	8cc00017 	ldw	r19,0(r17)
 10020d4:	8c800117 	ldw	r18,4(r17)
 10020d8:	8c400204 	addi	r17,r17,8
 10020dc:	003fb306 	br	1001fac <__sfvwrite_r+0x70>
 10020e0:	0005883a 	mov	r2,zero
 10020e4:	f800283a 	ret
 10020e8:	81000017 	ldw	r4,0(r16)
 10020ec:	80800417 	ldw	r2,16(r16)
 10020f0:	11005736 	bltu	r2,r4,1002250 <__sfvwrite_r+0x314>
 10020f4:	85c00517 	ldw	r23,20(r16)
 10020f8:	95c05536 	bltu	r18,r23,1002250 <__sfvwrite_r+0x314>
 10020fc:	00a00034 	movhi	r2,32768
 1002100:	10bfffc4 	addi	r2,r2,-1
 1002104:	9009883a 	mov	r4,r18
 1002108:	1480012e 	bgeu	r2,r18,1002110 <__sfvwrite_r+0x1d4>
 100210c:	1009883a 	mov	r4,r2
 1002110:	b80b883a 	mov	r5,r23
 1002114:	10047000 	call	1004700 <__divsi3>
 1002118:	15cf383a 	mul	r7,r2,r23
 100211c:	81400717 	ldw	r5,28(r16)
 1002120:	80800917 	ldw	r2,36(r16)
 1002124:	e00d883a 	mov	r6,fp
 1002128:	a809883a 	mov	r4,r21
 100212c:	103ee83a 	callr	r2
 1002130:	00bfdb16 	blt	zero,r2,10020a0 <__sfvwrite_r+0x164>
 1002134:	8080030b 	ldhu	r2,12(r16)
 1002138:	10801014 	ori	r2,r2,64
 100213c:	8080030d 	sth	r2,12(r16)
 1002140:	00bfffc4 	movi	r2,-1
 1002144:	003fab06 	br	1001ff4 <__sfvwrite_r+0xb8>
 1002148:	0027883a 	mov	r19,zero
 100214c:	0011883a 	mov	r8,zero
 1002150:	0039883a 	mov	fp,zero
 1002154:	0025883a 	mov	r18,zero
 1002158:	90001f26 	beq	r18,zero,10021d8 <__sfvwrite_r+0x29c>
 100215c:	40005a26 	beq	r8,zero,10022c8 <__sfvwrite_r+0x38c>
 1002160:	982d883a 	mov	r22,r19
 1002164:	94c0012e 	bgeu	r18,r19,100216c <__sfvwrite_r+0x230>
 1002168:	902d883a 	mov	r22,r18
 100216c:	81000017 	ldw	r4,0(r16)
 1002170:	80800417 	ldw	r2,16(r16)
 1002174:	b02f883a 	mov	r23,r22
 1002178:	81c00517 	ldw	r7,20(r16)
 100217c:	1100032e 	bgeu	r2,r4,100218c <__sfvwrite_r+0x250>
 1002180:	80c00217 	ldw	r3,8(r16)
 1002184:	38c7883a 	add	r3,r7,r3
 1002188:	1d801816 	blt	r3,r22,10021ec <__sfvwrite_r+0x2b0>
 100218c:	b1c03e16 	blt	r22,r7,1002288 <__sfvwrite_r+0x34c>
 1002190:	80800917 	ldw	r2,36(r16)
 1002194:	81400717 	ldw	r5,28(r16)
 1002198:	e00d883a 	mov	r6,fp
 100219c:	da000115 	stw	r8,4(sp)
 10021a0:	a809883a 	mov	r4,r21
 10021a4:	103ee83a 	callr	r2
 10021a8:	102f883a 	mov	r23,r2
 10021ac:	da000117 	ldw	r8,4(sp)
 10021b0:	00bfe00e 	bge	zero,r2,1002134 <__sfvwrite_r+0x1f8>
 10021b4:	9de7c83a 	sub	r19,r19,r23
 10021b8:	98001f26 	beq	r19,zero,1002238 <__sfvwrite_r+0x2fc>
 10021bc:	a0800217 	ldw	r2,8(r20)
 10021c0:	e5f9883a 	add	fp,fp,r23
 10021c4:	95e5c83a 	sub	r18,r18,r23
 10021c8:	15efc83a 	sub	r23,r2,r23
 10021cc:	a5c00215 	stw	r23,8(r20)
 10021d0:	b83f8726 	beq	r23,zero,1001ff0 <__sfvwrite_r+0xb4>
 10021d4:	903fe11e 	bne	r18,zero,100215c <__sfvwrite_r+0x220>
 10021d8:	8f000017 	ldw	fp,0(r17)
 10021dc:	8c800117 	ldw	r18,4(r17)
 10021e0:	0011883a 	mov	r8,zero
 10021e4:	8c400204 	addi	r17,r17,8
 10021e8:	003fdb06 	br	1002158 <__sfvwrite_r+0x21c>
 10021ec:	180d883a 	mov	r6,r3
 10021f0:	e00b883a 	mov	r5,fp
 10021f4:	da000115 	stw	r8,4(sp)
 10021f8:	d8c00015 	stw	r3,0(sp)
 10021fc:	10030140 	call	1003014 <memmove>
 1002200:	d8c00017 	ldw	r3,0(sp)
 1002204:	80800017 	ldw	r2,0(r16)
 1002208:	800b883a 	mov	r5,r16
 100220c:	a809883a 	mov	r4,r21
 1002210:	10c5883a 	add	r2,r2,r3
 1002214:	80800015 	stw	r2,0(r16)
 1002218:	d8c00015 	stw	r3,0(sp)
 100221c:	1003eb40 	call	1003eb4 <_fflush_r>
 1002220:	d8c00017 	ldw	r3,0(sp)
 1002224:	da000117 	ldw	r8,4(sp)
 1002228:	103fc21e 	bne	r2,zero,1002134 <__sfvwrite_r+0x1f8>
 100222c:	182f883a 	mov	r23,r3
 1002230:	9de7c83a 	sub	r19,r19,r23
 1002234:	983fe11e 	bne	r19,zero,10021bc <__sfvwrite_r+0x280>
 1002238:	800b883a 	mov	r5,r16
 100223c:	a809883a 	mov	r4,r21
 1002240:	1003eb40 	call	1003eb4 <_fflush_r>
 1002244:	103fbb1e 	bne	r2,zero,1002134 <__sfvwrite_r+0x1f8>
 1002248:	0011883a 	mov	r8,zero
 100224c:	003fdb06 	br	10021bc <__sfvwrite_r+0x280>
 1002250:	94c0012e 	bgeu	r18,r19,1002258 <__sfvwrite_r+0x31c>
 1002254:	9027883a 	mov	r19,r18
 1002258:	980d883a 	mov	r6,r19
 100225c:	e00b883a 	mov	r5,fp
 1002260:	10030140 	call	1003014 <memmove>
 1002264:	80800217 	ldw	r2,8(r16)
 1002268:	80c00017 	ldw	r3,0(r16)
 100226c:	14c5c83a 	sub	r2,r2,r19
 1002270:	1cc7883a 	add	r3,r3,r19
 1002274:	80800215 	stw	r2,8(r16)
 1002278:	80c00015 	stw	r3,0(r16)
 100227c:	10004326 	beq	r2,zero,100238c <__sfvwrite_r+0x450>
 1002280:	9805883a 	mov	r2,r19
 1002284:	003f8606 	br	10020a0 <__sfvwrite_r+0x164>
 1002288:	b00d883a 	mov	r6,r22
 100228c:	e00b883a 	mov	r5,fp
 1002290:	da000115 	stw	r8,4(sp)
 1002294:	10030140 	call	1003014 <memmove>
 1002298:	80800217 	ldw	r2,8(r16)
 100229c:	80c00017 	ldw	r3,0(r16)
 10022a0:	da000117 	ldw	r8,4(sp)
 10022a4:	1585c83a 	sub	r2,r2,r22
 10022a8:	1dad883a 	add	r22,r3,r22
 10022ac:	80800215 	stw	r2,8(r16)
 10022b0:	85800015 	stw	r22,0(r16)
 10022b4:	003fbf06 	br	10021b4 <__sfvwrite_r+0x278>
 10022b8:	81000017 	ldw	r4,0(r16)
 10022bc:	9027883a 	mov	r19,r18
 10022c0:	902f883a 	mov	r23,r18
 10022c4:	003f6c06 	br	1002078 <__sfvwrite_r+0x13c>
 10022c8:	900d883a 	mov	r6,r18
 10022cc:	01400284 	movi	r5,10
 10022d0:	e009883a 	mov	r4,fp
 10022d4:	1002de80 	call	1002de8 <memchr>
 10022d8:	10003e26 	beq	r2,zero,10023d4 <__sfvwrite_r+0x498>
 10022dc:	10800044 	addi	r2,r2,1
 10022e0:	1727c83a 	sub	r19,r2,fp
 10022e4:	02000044 	movi	r8,1
 10022e8:	003f9d06 	br	1002160 <__sfvwrite_r+0x224>
 10022ec:	80800517 	ldw	r2,20(r16)
 10022f0:	81400417 	ldw	r5,16(r16)
 10022f4:	81c00017 	ldw	r7,0(r16)
 10022f8:	10a7883a 	add	r19,r2,r2
 10022fc:	9885883a 	add	r2,r19,r2
 1002300:	1026d7fa 	srli	r19,r2,31
 1002304:	396dc83a 	sub	r22,r7,r5
 1002308:	b1000044 	addi	r4,r22,1
 100230c:	9885883a 	add	r2,r19,r2
 1002310:	1027d07a 	srai	r19,r2,1
 1002314:	2485883a 	add	r2,r4,r18
 1002318:	980d883a 	mov	r6,r19
 100231c:	9880022e 	bgeu	r19,r2,1002328 <__sfvwrite_r+0x3ec>
 1002320:	1027883a 	mov	r19,r2
 1002324:	100d883a 	mov	r6,r2
 1002328:	18c1000c 	andi	r3,r3,1024
 100232c:	18001c26 	beq	r3,zero,10023a0 <__sfvwrite_r+0x464>
 1002330:	300b883a 	mov	r5,r6
 1002334:	a809883a 	mov	r4,r21
 1002338:	10025dc0 	call	10025dc <_malloc_r>
 100233c:	102f883a 	mov	r23,r2
 1002340:	10002926 	beq	r2,zero,10023e8 <__sfvwrite_r+0x4ac>
 1002344:	81400417 	ldw	r5,16(r16)
 1002348:	b00d883a 	mov	r6,r22
 100234c:	1009883a 	mov	r4,r2
 1002350:	1002ecc0 	call	1002ecc <memcpy>
 1002354:	8080030b 	ldhu	r2,12(r16)
 1002358:	00fedfc4 	movi	r3,-1153
 100235c:	10c4703a 	and	r2,r2,r3
 1002360:	10802014 	ori	r2,r2,128
 1002364:	8080030d 	sth	r2,12(r16)
 1002368:	bd89883a 	add	r4,r23,r22
 100236c:	9d8fc83a 	sub	r7,r19,r22
 1002370:	85c00415 	stw	r23,16(r16)
 1002374:	84c00515 	stw	r19,20(r16)
 1002378:	81000015 	stw	r4,0(r16)
 100237c:	9027883a 	mov	r19,r18
 1002380:	81c00215 	stw	r7,8(r16)
 1002384:	902f883a 	mov	r23,r18
 1002388:	003f3b06 	br	1002078 <__sfvwrite_r+0x13c>
 100238c:	800b883a 	mov	r5,r16
 1002390:	a809883a 	mov	r4,r21
 1002394:	1003eb40 	call	1003eb4 <_fflush_r>
 1002398:	103fb926 	beq	r2,zero,1002280 <__sfvwrite_r+0x344>
 100239c:	003f6506 	br	1002134 <__sfvwrite_r+0x1f8>
 10023a0:	a809883a 	mov	r4,r21
 10023a4:	10032980 	call	1003298 <_realloc_r>
 10023a8:	102f883a 	mov	r23,r2
 10023ac:	103fee1e 	bne	r2,zero,1002368 <__sfvwrite_r+0x42c>
 10023b0:	81400417 	ldw	r5,16(r16)
 10023b4:	a809883a 	mov	r4,r21
 10023b8:	10040640 	call	1004064 <_free_r>
 10023bc:	8080030b 	ldhu	r2,12(r16)
 10023c0:	00ffdfc4 	movi	r3,-129
 10023c4:	1884703a 	and	r2,r3,r2
 10023c8:	00c00304 	movi	r3,12
 10023cc:	a8c00015 	stw	r3,0(r21)
 10023d0:	003f5906 	br	1002138 <__sfvwrite_r+0x1fc>
 10023d4:	94c00044 	addi	r19,r18,1
 10023d8:	02000044 	movi	r8,1
 10023dc:	003f6006 	br	1002160 <__sfvwrite_r+0x224>
 10023e0:	00bfffc4 	movi	r2,-1
 10023e4:	003f0306 	br	1001ff4 <__sfvwrite_r+0xb8>
 10023e8:	00800304 	movi	r2,12
 10023ec:	a8800015 	stw	r2,0(r21)
 10023f0:	8080030b 	ldhu	r2,12(r16)
 10023f4:	003f5006 	br	1002138 <__sfvwrite_r+0x1fc>

010023f8 <_fwalk>:
 10023f8:	defff704 	addi	sp,sp,-36
 10023fc:	dd000415 	stw	r20,16(sp)
 1002400:	dfc00815 	stw	ra,32(sp)
 1002404:	ddc00715 	stw	r23,28(sp)
 1002408:	dd800615 	stw	r22,24(sp)
 100240c:	dd400515 	stw	r21,20(sp)
 1002410:	dcc00315 	stw	r19,12(sp)
 1002414:	dc800215 	stw	r18,8(sp)
 1002418:	dc400115 	stw	r17,4(sp)
 100241c:	dc000015 	stw	r16,0(sp)
 1002420:	2500b804 	addi	r20,r4,736
 1002424:	a0002326 	beq	r20,zero,10024b4 <_fwalk+0xbc>
 1002428:	282b883a 	mov	r21,r5
 100242c:	002f883a 	mov	r23,zero
 1002430:	05800044 	movi	r22,1
 1002434:	04ffffc4 	movi	r19,-1
 1002438:	a4400117 	ldw	r17,4(r20)
 100243c:	a4800217 	ldw	r18,8(r20)
 1002440:	8c7fffc4 	addi	r17,r17,-1
 1002444:	88000d16 	blt	r17,zero,100247c <_fwalk+0x84>
 1002448:	94000304 	addi	r16,r18,12
 100244c:	94800384 	addi	r18,r18,14
 1002450:	8080000b 	ldhu	r2,0(r16)
 1002454:	8c7fffc4 	addi	r17,r17,-1
 1002458:	813ffd04 	addi	r4,r16,-12
 100245c:	b080042e 	bgeu	r22,r2,1002470 <_fwalk+0x78>
 1002460:	9080000f 	ldh	r2,0(r18)
 1002464:	14c00226 	beq	r2,r19,1002470 <_fwalk+0x78>
 1002468:	a83ee83a 	callr	r21
 100246c:	b8aeb03a 	or	r23,r23,r2
 1002470:	84001a04 	addi	r16,r16,104
 1002474:	94801a04 	addi	r18,r18,104
 1002478:	8cfff51e 	bne	r17,r19,1002450 <_fwalk+0x58>
 100247c:	a5000017 	ldw	r20,0(r20)
 1002480:	a03fed1e 	bne	r20,zero,1002438 <_fwalk+0x40>
 1002484:	b805883a 	mov	r2,r23
 1002488:	dfc00817 	ldw	ra,32(sp)
 100248c:	ddc00717 	ldw	r23,28(sp)
 1002490:	dd800617 	ldw	r22,24(sp)
 1002494:	dd400517 	ldw	r21,20(sp)
 1002498:	dd000417 	ldw	r20,16(sp)
 100249c:	dcc00317 	ldw	r19,12(sp)
 10024a0:	dc800217 	ldw	r18,8(sp)
 10024a4:	dc400117 	ldw	r17,4(sp)
 10024a8:	dc000017 	ldw	r16,0(sp)
 10024ac:	dec00904 	addi	sp,sp,36
 10024b0:	f800283a 	ret
 10024b4:	002f883a 	mov	r23,zero
 10024b8:	003ff206 	br	1002484 <_fwalk+0x8c>

010024bc <_fwalk_reent>:
 10024bc:	defff704 	addi	sp,sp,-36
 10024c0:	dd000415 	stw	r20,16(sp)
 10024c4:	dfc00815 	stw	ra,32(sp)
 10024c8:	ddc00715 	stw	r23,28(sp)
 10024cc:	dd800615 	stw	r22,24(sp)
 10024d0:	dd400515 	stw	r21,20(sp)
 10024d4:	dcc00315 	stw	r19,12(sp)
 10024d8:	dc800215 	stw	r18,8(sp)
 10024dc:	dc400115 	stw	r17,4(sp)
 10024e0:	dc000015 	stw	r16,0(sp)
 10024e4:	2500b804 	addi	r20,r4,736
 10024e8:	a0002326 	beq	r20,zero,1002578 <_fwalk_reent+0xbc>
 10024ec:	282b883a 	mov	r21,r5
 10024f0:	2027883a 	mov	r19,r4
 10024f4:	002f883a 	mov	r23,zero
 10024f8:	05800044 	movi	r22,1
 10024fc:	04bfffc4 	movi	r18,-1
 1002500:	a4400117 	ldw	r17,4(r20)
 1002504:	a4000217 	ldw	r16,8(r20)
 1002508:	8c7fffc4 	addi	r17,r17,-1
 100250c:	88000c16 	blt	r17,zero,1002540 <_fwalk_reent+0x84>
 1002510:	84000304 	addi	r16,r16,12
 1002514:	8080000b 	ldhu	r2,0(r16)
 1002518:	8c7fffc4 	addi	r17,r17,-1
 100251c:	817ffd04 	addi	r5,r16,-12
 1002520:	b080052e 	bgeu	r22,r2,1002538 <_fwalk_reent+0x7c>
 1002524:	8080008f 	ldh	r2,2(r16)
 1002528:	9809883a 	mov	r4,r19
 100252c:	14800226 	beq	r2,r18,1002538 <_fwalk_reent+0x7c>
 1002530:	a83ee83a 	callr	r21
 1002534:	b8aeb03a 	or	r23,r23,r2
 1002538:	84001a04 	addi	r16,r16,104
 100253c:	8cbff51e 	bne	r17,r18,1002514 <_fwalk_reent+0x58>
 1002540:	a5000017 	ldw	r20,0(r20)
 1002544:	a03fee1e 	bne	r20,zero,1002500 <_fwalk_reent+0x44>
 1002548:	b805883a 	mov	r2,r23
 100254c:	dfc00817 	ldw	ra,32(sp)
 1002550:	ddc00717 	ldw	r23,28(sp)
 1002554:	dd800617 	ldw	r22,24(sp)
 1002558:	dd400517 	ldw	r21,20(sp)
 100255c:	dd000417 	ldw	r20,16(sp)
 1002560:	dcc00317 	ldw	r19,12(sp)
 1002564:	dc800217 	ldw	r18,8(sp)
 1002568:	dc400117 	ldw	r17,4(sp)
 100256c:	dc000017 	ldw	r16,0(sp)
 1002570:	dec00904 	addi	sp,sp,36
 1002574:	f800283a 	ret
 1002578:	002f883a 	mov	r23,zero
 100257c:	003ff206 	br	1002548 <_fwalk_reent+0x8c>

01002580 <_gettimeofday_r>:
 1002580:	defffd04 	addi	sp,sp,-12
 1002584:	2805883a 	mov	r2,r5
 1002588:	dc000015 	stw	r16,0(sp)
 100258c:	04004074 	movhi	r16,257
 1002590:	dc400115 	stw	r17,4(sp)
 1002594:	842b9504 	addi	r16,r16,-20908
 1002598:	2023883a 	mov	r17,r4
 100259c:	300b883a 	mov	r5,r6
 10025a0:	1009883a 	mov	r4,r2
 10025a4:	dfc00215 	stw	ra,8(sp)
 10025a8:	80000015 	stw	zero,0(r16)
 10025ac:	1004ad80 	call	1004ad8 <gettimeofday>
 10025b0:	00ffffc4 	movi	r3,-1
 10025b4:	10c00526 	beq	r2,r3,10025cc <_gettimeofday_r+0x4c>
 10025b8:	dfc00217 	ldw	ra,8(sp)
 10025bc:	dc400117 	ldw	r17,4(sp)
 10025c0:	dc000017 	ldw	r16,0(sp)
 10025c4:	dec00304 	addi	sp,sp,12
 10025c8:	f800283a 	ret
 10025cc:	80c00017 	ldw	r3,0(r16)
 10025d0:	183ff926 	beq	r3,zero,10025b8 <_gettimeofday_r+0x38>
 10025d4:	88c00015 	stw	r3,0(r17)
 10025d8:	003ff706 	br	10025b8 <_gettimeofday_r+0x38>

010025dc <_malloc_r>:
 10025dc:	defff504 	addi	sp,sp,-44
 10025e0:	dc800315 	stw	r18,12(sp)
 10025e4:	dfc00a15 	stw	ra,40(sp)
 10025e8:	df000915 	stw	fp,36(sp)
 10025ec:	ddc00815 	stw	r23,32(sp)
 10025f0:	dd800715 	stw	r22,28(sp)
 10025f4:	dd400615 	stw	r21,24(sp)
 10025f8:	dd000515 	stw	r20,20(sp)
 10025fc:	dcc00415 	stw	r19,16(sp)
 1002600:	dc400215 	stw	r17,8(sp)
 1002604:	dc000115 	stw	r16,4(sp)
 1002608:	288002c4 	addi	r2,r5,11
 100260c:	00c00584 	movi	r3,22
 1002610:	2025883a 	mov	r18,r4
 1002614:	18807f2e 	bgeu	r3,r2,1002814 <_malloc_r+0x238>
 1002618:	047ffe04 	movi	r17,-8
 100261c:	1462703a 	and	r17,r2,r17
 1002620:	8800a316 	blt	r17,zero,10028b0 <_malloc_r+0x2d4>
 1002624:	8940a236 	bltu	r17,r5,10028b0 <_malloc_r+0x2d4>
 1002628:	10050240 	call	1005024 <__malloc_lock>
 100262c:	00807dc4 	movi	r2,503
 1002630:	1441e92e 	bgeu	r2,r17,1002dd8 <_malloc_r+0x7fc>
 1002634:	8804d27a 	srli	r2,r17,9
 1002638:	1000a126 	beq	r2,zero,10028c0 <_malloc_r+0x2e4>
 100263c:	00c00104 	movi	r3,4
 1002640:	18811e36 	bltu	r3,r2,1002abc <_malloc_r+0x4e0>
 1002644:	8804d1ba 	srli	r2,r17,6
 1002648:	12000e44 	addi	r8,r2,57
 100264c:	11c00e04 	addi	r7,r2,56
 1002650:	4209883a 	add	r4,r8,r8
 1002654:	04c04034 	movhi	r19,256
 1002658:	2109883a 	add	r4,r4,r4
 100265c:	9cdf6404 	addi	r19,r19,32144
 1002660:	2109883a 	add	r4,r4,r4
 1002664:	9909883a 	add	r4,r19,r4
 1002668:	24000117 	ldw	r16,4(r4)
 100266c:	213ffe04 	addi	r4,r4,-8
 1002670:	24009726 	beq	r4,r16,10028d0 <_malloc_r+0x2f4>
 1002674:	80800117 	ldw	r2,4(r16)
 1002678:	01bfff04 	movi	r6,-4
 100267c:	014003c4 	movi	r5,15
 1002680:	1184703a 	and	r2,r2,r6
 1002684:	1447c83a 	sub	r3,r2,r17
 1002688:	28c00716 	blt	r5,r3,10026a8 <_malloc_r+0xcc>
 100268c:	1800920e 	bge	r3,zero,10028d8 <_malloc_r+0x2fc>
 1002690:	84000317 	ldw	r16,12(r16)
 1002694:	24008e26 	beq	r4,r16,10028d0 <_malloc_r+0x2f4>
 1002698:	80800117 	ldw	r2,4(r16)
 100269c:	1184703a 	and	r2,r2,r6
 10026a0:	1447c83a 	sub	r3,r2,r17
 10026a4:	28fff90e 	bge	r5,r3,100268c <_malloc_r+0xb0>
 10026a8:	3809883a 	mov	r4,r7
 10026ac:	01804034 	movhi	r6,256
 10026b0:	9c000417 	ldw	r16,16(r19)
 10026b4:	319f6404 	addi	r6,r6,32144
 10026b8:	32000204 	addi	r8,r6,8
 10026bc:	82013426 	beq	r16,r8,1002b90 <_malloc_r+0x5b4>
 10026c0:	80c00117 	ldw	r3,4(r16)
 10026c4:	00bfff04 	movi	r2,-4
 10026c8:	188e703a 	and	r7,r3,r2
 10026cc:	3c45c83a 	sub	r2,r7,r17
 10026d0:	00c003c4 	movi	r3,15
 10026d4:	18811f16 	blt	r3,r2,1002b54 <_malloc_r+0x578>
 10026d8:	32000515 	stw	r8,20(r6)
 10026dc:	32000415 	stw	r8,16(r6)
 10026e0:	10007f0e 	bge	r2,zero,10028e0 <_malloc_r+0x304>
 10026e4:	00807fc4 	movi	r2,511
 10026e8:	11c0fd36 	bltu	r2,r7,1002ae0 <_malloc_r+0x504>
 10026ec:	3806d0fa 	srli	r3,r7,3
 10026f0:	01c00044 	movi	r7,1
 10026f4:	30800117 	ldw	r2,4(r6)
 10026f8:	19400044 	addi	r5,r3,1
 10026fc:	294b883a 	add	r5,r5,r5
 1002700:	1807d0ba 	srai	r3,r3,2
 1002704:	294b883a 	add	r5,r5,r5
 1002708:	294b883a 	add	r5,r5,r5
 100270c:	298b883a 	add	r5,r5,r6
 1002710:	38c6983a 	sll	r3,r7,r3
 1002714:	29c00017 	ldw	r7,0(r5)
 1002718:	2a7ffe04 	addi	r9,r5,-8
 100271c:	1886b03a 	or	r3,r3,r2
 1002720:	82400315 	stw	r9,12(r16)
 1002724:	81c00215 	stw	r7,8(r16)
 1002728:	30c00115 	stw	r3,4(r6)
 100272c:	2c000015 	stw	r16,0(r5)
 1002730:	3c000315 	stw	r16,12(r7)
 1002734:	2005d0ba 	srai	r2,r4,2
 1002738:	01400044 	movi	r5,1
 100273c:	288a983a 	sll	r5,r5,r2
 1002740:	19406f36 	bltu	r3,r5,1002900 <_malloc_r+0x324>
 1002744:	28c4703a 	and	r2,r5,r3
 1002748:	10000a1e 	bne	r2,zero,1002774 <_malloc_r+0x198>
 100274c:	00bfff04 	movi	r2,-4
 1002750:	294b883a 	add	r5,r5,r5
 1002754:	2088703a 	and	r4,r4,r2
 1002758:	28c4703a 	and	r2,r5,r3
 100275c:	21000104 	addi	r4,r4,4
 1002760:	1000041e 	bne	r2,zero,1002774 <_malloc_r+0x198>
 1002764:	294b883a 	add	r5,r5,r5
 1002768:	28c4703a 	and	r2,r5,r3
 100276c:	21000104 	addi	r4,r4,4
 1002770:	103ffc26 	beq	r2,zero,1002764 <_malloc_r+0x188>
 1002774:	02bfff04 	movi	r10,-4
 1002778:	024003c4 	movi	r9,15
 100277c:	21800044 	addi	r6,r4,1
 1002780:	318d883a 	add	r6,r6,r6
 1002784:	318d883a 	add	r6,r6,r6
 1002788:	318d883a 	add	r6,r6,r6
 100278c:	998d883a 	add	r6,r19,r6
 1002790:	333ffe04 	addi	r12,r6,-8
 1002794:	2017883a 	mov	r11,r4
 1002798:	31800104 	addi	r6,r6,4
 100279c:	34000017 	ldw	r16,0(r6)
 10027a0:	31fffd04 	addi	r7,r6,-12
 10027a4:	81c0041e 	bne	r16,r7,10027b8 <_malloc_r+0x1dc>
 10027a8:	0000fb06 	br	1002b98 <_malloc_r+0x5bc>
 10027ac:	1801030e 	bge	r3,zero,1002bbc <_malloc_r+0x5e0>
 10027b0:	84000317 	ldw	r16,12(r16)
 10027b4:	81c0f826 	beq	r16,r7,1002b98 <_malloc_r+0x5bc>
 10027b8:	80800117 	ldw	r2,4(r16)
 10027bc:	1284703a 	and	r2,r2,r10
 10027c0:	1447c83a 	sub	r3,r2,r17
 10027c4:	48fff90e 	bge	r9,r3,10027ac <_malloc_r+0x1d0>
 10027c8:	80800317 	ldw	r2,12(r16)
 10027cc:	81000217 	ldw	r4,8(r16)
 10027d0:	89400054 	ori	r5,r17,1
 10027d4:	81400115 	stw	r5,4(r16)
 10027d8:	20800315 	stw	r2,12(r4)
 10027dc:	11000215 	stw	r4,8(r2)
 10027e0:	8463883a 	add	r17,r16,r17
 10027e4:	9c400515 	stw	r17,20(r19)
 10027e8:	9c400415 	stw	r17,16(r19)
 10027ec:	18800054 	ori	r2,r3,1
 10027f0:	88800115 	stw	r2,4(r17)
 10027f4:	8a000315 	stw	r8,12(r17)
 10027f8:	8a000215 	stw	r8,8(r17)
 10027fc:	88e3883a 	add	r17,r17,r3
 1002800:	88c00015 	stw	r3,0(r17)
 1002804:	9009883a 	mov	r4,r18
 1002808:	10050480 	call	1005048 <__malloc_unlock>
 100280c:	80800204 	addi	r2,r16,8
 1002810:	00001b06 	br	1002880 <_malloc_r+0x2a4>
 1002814:	04400404 	movi	r17,16
 1002818:	89402536 	bltu	r17,r5,10028b0 <_malloc_r+0x2d4>
 100281c:	10050240 	call	1005024 <__malloc_lock>
 1002820:	00800184 	movi	r2,6
 1002824:	01000084 	movi	r4,2
 1002828:	04c04034 	movhi	r19,256
 100282c:	1085883a 	add	r2,r2,r2
 1002830:	9cdf6404 	addi	r19,r19,32144
 1002834:	1085883a 	add	r2,r2,r2
 1002838:	9885883a 	add	r2,r19,r2
 100283c:	14000117 	ldw	r16,4(r2)
 1002840:	10fffe04 	addi	r3,r2,-8
 1002844:	80c0d926 	beq	r16,r3,1002bac <_malloc_r+0x5d0>
 1002848:	80c00117 	ldw	r3,4(r16)
 100284c:	81000317 	ldw	r4,12(r16)
 1002850:	00bfff04 	movi	r2,-4
 1002854:	1884703a 	and	r2,r3,r2
 1002858:	81400217 	ldw	r5,8(r16)
 100285c:	8085883a 	add	r2,r16,r2
 1002860:	10c00117 	ldw	r3,4(r2)
 1002864:	29000315 	stw	r4,12(r5)
 1002868:	21400215 	stw	r5,8(r4)
 100286c:	18c00054 	ori	r3,r3,1
 1002870:	10c00115 	stw	r3,4(r2)
 1002874:	9009883a 	mov	r4,r18
 1002878:	10050480 	call	1005048 <__malloc_unlock>
 100287c:	80800204 	addi	r2,r16,8
 1002880:	dfc00a17 	ldw	ra,40(sp)
 1002884:	df000917 	ldw	fp,36(sp)
 1002888:	ddc00817 	ldw	r23,32(sp)
 100288c:	dd800717 	ldw	r22,28(sp)
 1002890:	dd400617 	ldw	r21,24(sp)
 1002894:	dd000517 	ldw	r20,20(sp)
 1002898:	dcc00417 	ldw	r19,16(sp)
 100289c:	dc800317 	ldw	r18,12(sp)
 10028a0:	dc400217 	ldw	r17,8(sp)
 10028a4:	dc000117 	ldw	r16,4(sp)
 10028a8:	dec00b04 	addi	sp,sp,44
 10028ac:	f800283a 	ret
 10028b0:	00800304 	movi	r2,12
 10028b4:	90800015 	stw	r2,0(r18)
 10028b8:	0005883a 	mov	r2,zero
 10028bc:	003ff006 	br	1002880 <_malloc_r+0x2a4>
 10028c0:	01002004 	movi	r4,128
 10028c4:	02001004 	movi	r8,64
 10028c8:	01c00fc4 	movi	r7,63
 10028cc:	003f6106 	br	1002654 <_malloc_r+0x78>
 10028d0:	4009883a 	mov	r4,r8
 10028d4:	003f7506 	br	10026ac <_malloc_r+0xd0>
 10028d8:	81000317 	ldw	r4,12(r16)
 10028dc:	003fde06 	br	1002858 <_malloc_r+0x27c>
 10028e0:	81c5883a 	add	r2,r16,r7
 10028e4:	11400117 	ldw	r5,4(r2)
 10028e8:	9009883a 	mov	r4,r18
 10028ec:	29400054 	ori	r5,r5,1
 10028f0:	11400115 	stw	r5,4(r2)
 10028f4:	10050480 	call	1005048 <__malloc_unlock>
 10028f8:	80800204 	addi	r2,r16,8
 10028fc:	003fe006 	br	1002880 <_malloc_r+0x2a4>
 1002900:	9c000217 	ldw	r16,8(r19)
 1002904:	00bfff04 	movi	r2,-4
 1002908:	85800117 	ldw	r22,4(r16)
 100290c:	b0ac703a 	and	r22,r22,r2
 1002910:	b4400336 	bltu	r22,r17,1002920 <_malloc_r+0x344>
 1002914:	b445c83a 	sub	r2,r22,r17
 1002918:	00c003c4 	movi	r3,15
 100291c:	18805d16 	blt	r3,r2,1002a94 <_malloc_r+0x4b8>
 1002920:	05c04074 	movhi	r23,257
 1002924:	00804074 	movhi	r2,257
 1002928:	10ab9804 	addi	r2,r2,-20896
 100292c:	bde4ec04 	addi	r23,r23,-27728
 1002930:	15400017 	ldw	r21,0(r2)
 1002934:	b8c00017 	ldw	r3,0(r23)
 1002938:	00bfffc4 	movi	r2,-1
 100293c:	858d883a 	add	r6,r16,r22
 1002940:	8d6b883a 	add	r21,r17,r21
 1002944:	1880ea26 	beq	r3,r2,1002cf0 <_malloc_r+0x714>
 1002948:	ad4403c4 	addi	r21,r21,4111
 100294c:	00bc0004 	movi	r2,-4096
 1002950:	a8aa703a 	and	r21,r21,r2
 1002954:	a80b883a 	mov	r5,r21
 1002958:	9009883a 	mov	r4,r18
 100295c:	d9800015 	stw	r6,0(sp)
 1002960:	10037fc0 	call	10037fc <_sbrk_r>
 1002964:	1029883a 	mov	r20,r2
 1002968:	00bfffc4 	movi	r2,-1
 100296c:	d9800017 	ldw	r6,0(sp)
 1002970:	a080e826 	beq	r20,r2,1002d14 <_malloc_r+0x738>
 1002974:	a180a636 	bltu	r20,r6,1002c10 <_malloc_r+0x634>
 1002978:	07004074 	movhi	fp,257
 100297c:	e72ba404 	addi	fp,fp,-20848
 1002980:	e0800017 	ldw	r2,0(fp)
 1002984:	a887883a 	add	r3,r21,r2
 1002988:	e0c00015 	stw	r3,0(fp)
 100298c:	3500e626 	beq	r6,r20,1002d28 <_malloc_r+0x74c>
 1002990:	b9000017 	ldw	r4,0(r23)
 1002994:	00bfffc4 	movi	r2,-1
 1002998:	2080ee26 	beq	r4,r2,1002d54 <_malloc_r+0x778>
 100299c:	a185c83a 	sub	r2,r20,r6
 10029a0:	10c5883a 	add	r2,r2,r3
 10029a4:	e0800015 	stw	r2,0(fp)
 10029a8:	a0c001cc 	andi	r3,r20,7
 10029ac:	1800bc26 	beq	r3,zero,1002ca0 <_malloc_r+0x6c4>
 10029b0:	a0e9c83a 	sub	r20,r20,r3
 10029b4:	00840204 	movi	r2,4104
 10029b8:	a5000204 	addi	r20,r20,8
 10029bc:	10c7c83a 	sub	r3,r2,r3
 10029c0:	a545883a 	add	r2,r20,r21
 10029c4:	1083ffcc 	andi	r2,r2,4095
 10029c8:	18abc83a 	sub	r21,r3,r2
 10029cc:	a80b883a 	mov	r5,r21
 10029d0:	9009883a 	mov	r4,r18
 10029d4:	10037fc0 	call	10037fc <_sbrk_r>
 10029d8:	00ffffc4 	movi	r3,-1
 10029dc:	10c0e126 	beq	r2,r3,1002d64 <_malloc_r+0x788>
 10029e0:	1505c83a 	sub	r2,r2,r20
 10029e4:	1545883a 	add	r2,r2,r21
 10029e8:	10800054 	ori	r2,r2,1
 10029ec:	e0c00017 	ldw	r3,0(fp)
 10029f0:	9d000215 	stw	r20,8(r19)
 10029f4:	a0800115 	stw	r2,4(r20)
 10029f8:	a8c7883a 	add	r3,r21,r3
 10029fc:	e0c00015 	stw	r3,0(fp)
 1002a00:	84c00e26 	beq	r16,r19,1002a3c <_malloc_r+0x460>
 1002a04:	018003c4 	movi	r6,15
 1002a08:	3580a72e 	bgeu	r6,r22,1002ca8 <_malloc_r+0x6cc>
 1002a0c:	81400117 	ldw	r5,4(r16)
 1002a10:	013ffe04 	movi	r4,-8
 1002a14:	b0bffd04 	addi	r2,r22,-12
 1002a18:	1104703a 	and	r2,r2,r4
 1002a1c:	2900004c 	andi	r4,r5,1
 1002a20:	2088b03a 	or	r4,r4,r2
 1002a24:	81000115 	stw	r4,4(r16)
 1002a28:	01400144 	movi	r5,5
 1002a2c:	8089883a 	add	r4,r16,r2
 1002a30:	21400115 	stw	r5,4(r4)
 1002a34:	21400215 	stw	r5,8(r4)
 1002a38:	3080cd36 	bltu	r6,r2,1002d70 <_malloc_r+0x794>
 1002a3c:	00804074 	movhi	r2,257
 1002a40:	10ab9704 	addi	r2,r2,-20900
 1002a44:	11000017 	ldw	r4,0(r2)
 1002a48:	20c0012e 	bgeu	r4,r3,1002a50 <_malloc_r+0x474>
 1002a4c:	10c00015 	stw	r3,0(r2)
 1002a50:	00804074 	movhi	r2,257
 1002a54:	10ab9604 	addi	r2,r2,-20904
 1002a58:	11000017 	ldw	r4,0(r2)
 1002a5c:	9c000217 	ldw	r16,8(r19)
 1002a60:	20c0012e 	bgeu	r4,r3,1002a68 <_malloc_r+0x48c>
 1002a64:	10c00015 	stw	r3,0(r2)
 1002a68:	80c00117 	ldw	r3,4(r16)
 1002a6c:	00bfff04 	movi	r2,-4
 1002a70:	1886703a 	and	r3,r3,r2
 1002a74:	1c45c83a 	sub	r2,r3,r17
 1002a78:	1c400236 	bltu	r3,r17,1002a84 <_malloc_r+0x4a8>
 1002a7c:	00c003c4 	movi	r3,15
 1002a80:	18800416 	blt	r3,r2,1002a94 <_malloc_r+0x4b8>
 1002a84:	9009883a 	mov	r4,r18
 1002a88:	10050480 	call	1005048 <__malloc_unlock>
 1002a8c:	0005883a 	mov	r2,zero
 1002a90:	003f7b06 	br	1002880 <_malloc_r+0x2a4>
 1002a94:	88c00054 	ori	r3,r17,1
 1002a98:	80c00115 	stw	r3,4(r16)
 1002a9c:	8463883a 	add	r17,r16,r17
 1002aa0:	10800054 	ori	r2,r2,1
 1002aa4:	9c400215 	stw	r17,8(r19)
 1002aa8:	88800115 	stw	r2,4(r17)
 1002aac:	9009883a 	mov	r4,r18
 1002ab0:	10050480 	call	1005048 <__malloc_unlock>
 1002ab4:	80800204 	addi	r2,r16,8
 1002ab8:	003f7106 	br	1002880 <_malloc_r+0x2a4>
 1002abc:	00c00504 	movi	r3,20
 1002ac0:	18804a2e 	bgeu	r3,r2,1002bec <_malloc_r+0x610>
 1002ac4:	00c01504 	movi	r3,84
 1002ac8:	18806e36 	bltu	r3,r2,1002c84 <_malloc_r+0x6a8>
 1002acc:	8804d33a 	srli	r2,r17,12
 1002ad0:	12001bc4 	addi	r8,r2,111
 1002ad4:	11c01b84 	addi	r7,r2,110
 1002ad8:	4209883a 	add	r4,r8,r8
 1002adc:	003edd06 	br	1002654 <_malloc_r+0x78>
 1002ae0:	3804d27a 	srli	r2,r7,9
 1002ae4:	00c00104 	movi	r3,4
 1002ae8:	1880442e 	bgeu	r3,r2,1002bfc <_malloc_r+0x620>
 1002aec:	00c00504 	movi	r3,20
 1002af0:	18808136 	bltu	r3,r2,1002cf8 <_malloc_r+0x71c>
 1002af4:	11401704 	addi	r5,r2,92
 1002af8:	10c016c4 	addi	r3,r2,91
 1002afc:	294b883a 	add	r5,r5,r5
 1002b00:	294b883a 	add	r5,r5,r5
 1002b04:	294b883a 	add	r5,r5,r5
 1002b08:	994b883a 	add	r5,r19,r5
 1002b0c:	28800017 	ldw	r2,0(r5)
 1002b10:	01804034 	movhi	r6,256
 1002b14:	297ffe04 	addi	r5,r5,-8
 1002b18:	319f6404 	addi	r6,r6,32144
 1002b1c:	28806526 	beq	r5,r2,1002cb4 <_malloc_r+0x6d8>
 1002b20:	01bfff04 	movi	r6,-4
 1002b24:	10c00117 	ldw	r3,4(r2)
 1002b28:	1986703a 	and	r3,r3,r6
 1002b2c:	38c0022e 	bgeu	r7,r3,1002b38 <_malloc_r+0x55c>
 1002b30:	10800217 	ldw	r2,8(r2)
 1002b34:	28bffb1e 	bne	r5,r2,1002b24 <_malloc_r+0x548>
 1002b38:	11400317 	ldw	r5,12(r2)
 1002b3c:	98c00117 	ldw	r3,4(r19)
 1002b40:	81400315 	stw	r5,12(r16)
 1002b44:	80800215 	stw	r2,8(r16)
 1002b48:	2c000215 	stw	r16,8(r5)
 1002b4c:	14000315 	stw	r16,12(r2)
 1002b50:	003ef806 	br	1002734 <_malloc_r+0x158>
 1002b54:	88c00054 	ori	r3,r17,1
 1002b58:	80c00115 	stw	r3,4(r16)
 1002b5c:	8463883a 	add	r17,r16,r17
 1002b60:	34400515 	stw	r17,20(r6)
 1002b64:	34400415 	stw	r17,16(r6)
 1002b68:	10c00054 	ori	r3,r2,1
 1002b6c:	8a000315 	stw	r8,12(r17)
 1002b70:	8a000215 	stw	r8,8(r17)
 1002b74:	88c00115 	stw	r3,4(r17)
 1002b78:	88a3883a 	add	r17,r17,r2
 1002b7c:	88800015 	stw	r2,0(r17)
 1002b80:	9009883a 	mov	r4,r18
 1002b84:	10050480 	call	1005048 <__malloc_unlock>
 1002b88:	80800204 	addi	r2,r16,8
 1002b8c:	003f3c06 	br	1002880 <_malloc_r+0x2a4>
 1002b90:	30c00117 	ldw	r3,4(r6)
 1002b94:	003ee706 	br	1002734 <_malloc_r+0x158>
 1002b98:	5ac00044 	addi	r11,r11,1
 1002b9c:	588000cc 	andi	r2,r11,3
 1002ba0:	31800204 	addi	r6,r6,8
 1002ba4:	103efd1e 	bne	r2,zero,100279c <_malloc_r+0x1c0>
 1002ba8:	00002406 	br	1002c3c <_malloc_r+0x660>
 1002bac:	14000317 	ldw	r16,12(r2)
 1002bb0:	143f251e 	bne	r2,r16,1002848 <_malloc_r+0x26c>
 1002bb4:	21000084 	addi	r4,r4,2
 1002bb8:	003ebc06 	br	10026ac <_malloc_r+0xd0>
 1002bbc:	8085883a 	add	r2,r16,r2
 1002bc0:	10c00117 	ldw	r3,4(r2)
 1002bc4:	81000317 	ldw	r4,12(r16)
 1002bc8:	81400217 	ldw	r5,8(r16)
 1002bcc:	18c00054 	ori	r3,r3,1
 1002bd0:	10c00115 	stw	r3,4(r2)
 1002bd4:	29000315 	stw	r4,12(r5)
 1002bd8:	21400215 	stw	r5,8(r4)
 1002bdc:	9009883a 	mov	r4,r18
 1002be0:	10050480 	call	1005048 <__malloc_unlock>
 1002be4:	80800204 	addi	r2,r16,8
 1002be8:	003f2506 	br	1002880 <_malloc_r+0x2a4>
 1002bec:	12001704 	addi	r8,r2,92
 1002bf0:	11c016c4 	addi	r7,r2,91
 1002bf4:	4209883a 	add	r4,r8,r8
 1002bf8:	003e9606 	br	1002654 <_malloc_r+0x78>
 1002bfc:	3804d1ba 	srli	r2,r7,6
 1002c00:	11400e44 	addi	r5,r2,57
 1002c04:	10c00e04 	addi	r3,r2,56
 1002c08:	294b883a 	add	r5,r5,r5
 1002c0c:	003fbc06 	br	1002b00 <_malloc_r+0x524>
 1002c10:	84ff5926 	beq	r16,r19,1002978 <_malloc_r+0x39c>
 1002c14:	00804034 	movhi	r2,256
 1002c18:	109f6404 	addi	r2,r2,32144
 1002c1c:	14000217 	ldw	r16,8(r2)
 1002c20:	00bfff04 	movi	r2,-4
 1002c24:	80c00117 	ldw	r3,4(r16)
 1002c28:	1886703a 	and	r3,r3,r2
 1002c2c:	003f9106 	br	1002a74 <_malloc_r+0x498>
 1002c30:	60800217 	ldw	r2,8(r12)
 1002c34:	213fffc4 	addi	r4,r4,-1
 1002c38:	1300651e 	bne	r2,r12,1002dd0 <_malloc_r+0x7f4>
 1002c3c:	208000cc 	andi	r2,r4,3
 1002c40:	633ffe04 	addi	r12,r12,-8
 1002c44:	103ffa1e 	bne	r2,zero,1002c30 <_malloc_r+0x654>
 1002c48:	98800117 	ldw	r2,4(r19)
 1002c4c:	0146303a 	nor	r3,zero,r5
 1002c50:	1884703a 	and	r2,r3,r2
 1002c54:	98800115 	stw	r2,4(r19)
 1002c58:	294b883a 	add	r5,r5,r5
 1002c5c:	117f2836 	bltu	r2,r5,1002900 <_malloc_r+0x324>
 1002c60:	283f2726 	beq	r5,zero,1002900 <_malloc_r+0x324>
 1002c64:	2886703a 	and	r3,r5,r2
 1002c68:	5809883a 	mov	r4,r11
 1002c6c:	183ec31e 	bne	r3,zero,100277c <_malloc_r+0x1a0>
 1002c70:	294b883a 	add	r5,r5,r5
 1002c74:	2886703a 	and	r3,r5,r2
 1002c78:	21000104 	addi	r4,r4,4
 1002c7c:	183ffc26 	beq	r3,zero,1002c70 <_malloc_r+0x694>
 1002c80:	003ebe06 	br	100277c <_malloc_r+0x1a0>
 1002c84:	00c05504 	movi	r3,340
 1002c88:	18801236 	bltu	r3,r2,1002cd4 <_malloc_r+0x6f8>
 1002c8c:	8804d3fa 	srli	r2,r17,15
 1002c90:	12001e04 	addi	r8,r2,120
 1002c94:	11c01dc4 	addi	r7,r2,119
 1002c98:	4209883a 	add	r4,r8,r8
 1002c9c:	003e6d06 	br	1002654 <_malloc_r+0x78>
 1002ca0:	00c40004 	movi	r3,4096
 1002ca4:	003f4606 	br	10029c0 <_malloc_r+0x3e4>
 1002ca8:	00800044 	movi	r2,1
 1002cac:	a0800115 	stw	r2,4(r20)
 1002cb0:	003f7406 	br	1002a84 <_malloc_r+0x4a8>
 1002cb4:	1805d0ba 	srai	r2,r3,2
 1002cb8:	01c00044 	movi	r7,1
 1002cbc:	30c00117 	ldw	r3,4(r6)
 1002cc0:	388e983a 	sll	r7,r7,r2
 1002cc4:	2805883a 	mov	r2,r5
 1002cc8:	38c6b03a 	or	r3,r7,r3
 1002ccc:	30c00115 	stw	r3,4(r6)
 1002cd0:	003f9b06 	br	1002b40 <_malloc_r+0x564>
 1002cd4:	00c15504 	movi	r3,1364
 1002cd8:	18801a36 	bltu	r3,r2,1002d44 <_malloc_r+0x768>
 1002cdc:	8804d4ba 	srli	r2,r17,18
 1002ce0:	12001f44 	addi	r8,r2,125
 1002ce4:	11c01f04 	addi	r7,r2,124
 1002ce8:	4209883a 	add	r4,r8,r8
 1002cec:	003e5906 	br	1002654 <_malloc_r+0x78>
 1002cf0:	ad400404 	addi	r21,r21,16
 1002cf4:	003f1706 	br	1002954 <_malloc_r+0x378>
 1002cf8:	00c01504 	movi	r3,84
 1002cfc:	18802336 	bltu	r3,r2,1002d8c <_malloc_r+0x7b0>
 1002d00:	3804d33a 	srli	r2,r7,12
 1002d04:	11401bc4 	addi	r5,r2,111
 1002d08:	10c01b84 	addi	r3,r2,110
 1002d0c:	294b883a 	add	r5,r5,r5
 1002d10:	003f7b06 	br	1002b00 <_malloc_r+0x524>
 1002d14:	9c000217 	ldw	r16,8(r19)
 1002d18:	00bfff04 	movi	r2,-4
 1002d1c:	80c00117 	ldw	r3,4(r16)
 1002d20:	1886703a 	and	r3,r3,r2
 1002d24:	003f5306 	br	1002a74 <_malloc_r+0x498>
 1002d28:	3083ffcc 	andi	r2,r6,4095
 1002d2c:	103f181e 	bne	r2,zero,1002990 <_malloc_r+0x3b4>
 1002d30:	99000217 	ldw	r4,8(r19)
 1002d34:	b545883a 	add	r2,r22,r21
 1002d38:	10800054 	ori	r2,r2,1
 1002d3c:	20800115 	stw	r2,4(r4)
 1002d40:	003f3e06 	br	1002a3c <_malloc_r+0x460>
 1002d44:	01003f84 	movi	r4,254
 1002d48:	02001fc4 	movi	r8,127
 1002d4c:	01c01f84 	movi	r7,126
 1002d50:	003e4006 	br	1002654 <_malloc_r+0x78>
 1002d54:	00804074 	movhi	r2,257
 1002d58:	10a4ec04 	addi	r2,r2,-27728
 1002d5c:	15000015 	stw	r20,0(r2)
 1002d60:	003f1106 	br	10029a8 <_malloc_r+0x3cc>
 1002d64:	00800044 	movi	r2,1
 1002d68:	002b883a 	mov	r21,zero
 1002d6c:	003f1f06 	br	10029ec <_malloc_r+0x410>
 1002d70:	81400204 	addi	r5,r16,8
 1002d74:	9009883a 	mov	r4,r18
 1002d78:	10040640 	call	1004064 <_free_r>
 1002d7c:	00804074 	movhi	r2,257
 1002d80:	10aba404 	addi	r2,r2,-20848
 1002d84:	10c00017 	ldw	r3,0(r2)
 1002d88:	003f2c06 	br	1002a3c <_malloc_r+0x460>
 1002d8c:	00c05504 	movi	r3,340
 1002d90:	18800536 	bltu	r3,r2,1002da8 <_malloc_r+0x7cc>
 1002d94:	3804d3fa 	srli	r2,r7,15
 1002d98:	11401e04 	addi	r5,r2,120
 1002d9c:	10c01dc4 	addi	r3,r2,119
 1002da0:	294b883a 	add	r5,r5,r5
 1002da4:	003f5606 	br	1002b00 <_malloc_r+0x524>
 1002da8:	00c15504 	movi	r3,1364
 1002dac:	18800536 	bltu	r3,r2,1002dc4 <_malloc_r+0x7e8>
 1002db0:	3804d4ba 	srli	r2,r7,18
 1002db4:	11401f44 	addi	r5,r2,125
 1002db8:	10c01f04 	addi	r3,r2,124
 1002dbc:	294b883a 	add	r5,r5,r5
 1002dc0:	003f4f06 	br	1002b00 <_malloc_r+0x524>
 1002dc4:	01403f84 	movi	r5,254
 1002dc8:	00c01f84 	movi	r3,126
 1002dcc:	003f4c06 	br	1002b00 <_malloc_r+0x524>
 1002dd0:	98800117 	ldw	r2,4(r19)
 1002dd4:	003fa006 	br	1002c58 <_malloc_r+0x67c>
 1002dd8:	8808d0fa 	srli	r4,r17,3
 1002ddc:	20800044 	addi	r2,r4,1
 1002de0:	1085883a 	add	r2,r2,r2
 1002de4:	003e9006 	br	1002828 <_malloc_r+0x24c>

01002de8 <memchr>:
 1002de8:	208000cc 	andi	r2,r4,3
 1002dec:	280f883a 	mov	r7,r5
 1002df0:	10003426 	beq	r2,zero,1002ec4 <memchr+0xdc>
 1002df4:	30bfffc4 	addi	r2,r6,-1
 1002df8:	30001a26 	beq	r6,zero,1002e64 <memchr+0x7c>
 1002dfc:	20c00003 	ldbu	r3,0(r4)
 1002e00:	29803fcc 	andi	r6,r5,255
 1002e04:	30c0051e 	bne	r6,r3,1002e1c <memchr+0x34>
 1002e08:	00001806 	br	1002e6c <memchr+0x84>
 1002e0c:	10001526 	beq	r2,zero,1002e64 <memchr+0x7c>
 1002e10:	20c00003 	ldbu	r3,0(r4)
 1002e14:	10bfffc4 	addi	r2,r2,-1
 1002e18:	30c01426 	beq	r6,r3,1002e6c <memchr+0x84>
 1002e1c:	21000044 	addi	r4,r4,1
 1002e20:	20c000cc 	andi	r3,r4,3
 1002e24:	183ff91e 	bne	r3,zero,1002e0c <memchr+0x24>
 1002e28:	020000c4 	movi	r8,3
 1002e2c:	40801136 	bltu	r8,r2,1002e74 <memchr+0x8c>
 1002e30:	10000c26 	beq	r2,zero,1002e64 <memchr+0x7c>
 1002e34:	20c00003 	ldbu	r3,0(r4)
 1002e38:	29403fcc 	andi	r5,r5,255
 1002e3c:	28c00b26 	beq	r5,r3,1002e6c <memchr+0x84>
 1002e40:	20c00044 	addi	r3,r4,1
 1002e44:	39803fcc 	andi	r6,r7,255
 1002e48:	2089883a 	add	r4,r4,r2
 1002e4c:	00000306 	br	1002e5c <memchr+0x74>
 1002e50:	18c00044 	addi	r3,r3,1
 1002e54:	197fffc3 	ldbu	r5,-1(r3)
 1002e58:	31400526 	beq	r6,r5,1002e70 <memchr+0x88>
 1002e5c:	1805883a 	mov	r2,r3
 1002e60:	20fffb1e 	bne	r4,r3,1002e50 <memchr+0x68>
 1002e64:	0005883a 	mov	r2,zero
 1002e68:	f800283a 	ret
 1002e6c:	2005883a 	mov	r2,r4
 1002e70:	f800283a 	ret
 1002e74:	28c03fcc 	andi	r3,r5,255
 1002e78:	1812923a 	slli	r9,r3,8
 1002e7c:	02ffbff4 	movhi	r11,65279
 1002e80:	02a02074 	movhi	r10,32897
 1002e84:	48d2b03a 	or	r9,r9,r3
 1002e88:	4806943a 	slli	r3,r9,16
 1002e8c:	5affbfc4 	addi	r11,r11,-257
 1002e90:	52a02004 	addi	r10,r10,-32640
 1002e94:	48d2b03a 	or	r9,r9,r3
 1002e98:	20c00017 	ldw	r3,0(r4)
 1002e9c:	48c6f03a 	xor	r3,r9,r3
 1002ea0:	1acd883a 	add	r6,r3,r11
 1002ea4:	00c6303a 	nor	r3,zero,r3
 1002ea8:	30c6703a 	and	r3,r6,r3
 1002eac:	1a86703a 	and	r3,r3,r10
 1002eb0:	183fe01e 	bne	r3,zero,1002e34 <memchr+0x4c>
 1002eb4:	10bfff04 	addi	r2,r2,-4
 1002eb8:	21000104 	addi	r4,r4,4
 1002ebc:	40bff636 	bltu	r8,r2,1002e98 <memchr+0xb0>
 1002ec0:	003fdb06 	br	1002e30 <memchr+0x48>
 1002ec4:	3005883a 	mov	r2,r6
 1002ec8:	003fd706 	br	1002e28 <memchr+0x40>

01002ecc <memcpy>:
 1002ecc:	defffd04 	addi	sp,sp,-12
 1002ed0:	dfc00215 	stw	ra,8(sp)
 1002ed4:	dc400115 	stw	r17,4(sp)
 1002ed8:	dc000015 	stw	r16,0(sp)
 1002edc:	00c003c4 	movi	r3,15
 1002ee0:	2005883a 	mov	r2,r4
 1002ee4:	1980452e 	bgeu	r3,r6,1002ffc <memcpy+0x130>
 1002ee8:	2906b03a 	or	r3,r5,r4
 1002eec:	18c000cc 	andi	r3,r3,3
 1002ef0:	1800441e 	bne	r3,zero,1003004 <memcpy+0x138>
 1002ef4:	347ffc04 	addi	r17,r6,-16
 1002ef8:	8822d13a 	srli	r17,r17,4
 1002efc:	28c00104 	addi	r3,r5,4
 1002f00:	23400104 	addi	r13,r4,4
 1002f04:	8820913a 	slli	r16,r17,4
 1002f08:	2b000204 	addi	r12,r5,8
 1002f0c:	22c00204 	addi	r11,r4,8
 1002f10:	84000504 	addi	r16,r16,20
 1002f14:	2a800304 	addi	r10,r5,12
 1002f18:	22400304 	addi	r9,r4,12
 1002f1c:	2c21883a 	add	r16,r5,r16
 1002f20:	2811883a 	mov	r8,r5
 1002f24:	200f883a 	mov	r7,r4
 1002f28:	41000017 	ldw	r4,0(r8)
 1002f2c:	1fc00017 	ldw	ra,0(r3)
 1002f30:	63c00017 	ldw	r15,0(r12)
 1002f34:	39000015 	stw	r4,0(r7)
 1002f38:	53800017 	ldw	r14,0(r10)
 1002f3c:	6fc00015 	stw	ra,0(r13)
 1002f40:	5bc00015 	stw	r15,0(r11)
 1002f44:	4b800015 	stw	r14,0(r9)
 1002f48:	18c00404 	addi	r3,r3,16
 1002f4c:	39c00404 	addi	r7,r7,16
 1002f50:	42000404 	addi	r8,r8,16
 1002f54:	6b400404 	addi	r13,r13,16
 1002f58:	63000404 	addi	r12,r12,16
 1002f5c:	5ac00404 	addi	r11,r11,16
 1002f60:	52800404 	addi	r10,r10,16
 1002f64:	4a400404 	addi	r9,r9,16
 1002f68:	1c3fef1e 	bne	r3,r16,1002f28 <memcpy+0x5c>
 1002f6c:	89c00044 	addi	r7,r17,1
 1002f70:	380e913a 	slli	r7,r7,4
 1002f74:	310003cc 	andi	r4,r6,15
 1002f78:	02c000c4 	movi	r11,3
 1002f7c:	11c7883a 	add	r3,r2,r7
 1002f80:	29cb883a 	add	r5,r5,r7
 1002f84:	5900212e 	bgeu	r11,r4,100300c <memcpy+0x140>
 1002f88:	1813883a 	mov	r9,r3
 1002f8c:	2811883a 	mov	r8,r5
 1002f90:	200f883a 	mov	r7,r4
 1002f94:	42800017 	ldw	r10,0(r8)
 1002f98:	4a400104 	addi	r9,r9,4
 1002f9c:	39ffff04 	addi	r7,r7,-4
 1002fa0:	4abfff15 	stw	r10,-4(r9)
 1002fa4:	42000104 	addi	r8,r8,4
 1002fa8:	59fffa36 	bltu	r11,r7,1002f94 <memcpy+0xc8>
 1002fac:	213fff04 	addi	r4,r4,-4
 1002fb0:	2008d0ba 	srli	r4,r4,2
 1002fb4:	318000cc 	andi	r6,r6,3
 1002fb8:	21000044 	addi	r4,r4,1
 1002fbc:	2109883a 	add	r4,r4,r4
 1002fc0:	2109883a 	add	r4,r4,r4
 1002fc4:	1907883a 	add	r3,r3,r4
 1002fc8:	290b883a 	add	r5,r5,r4
 1002fcc:	30000626 	beq	r6,zero,1002fe8 <memcpy+0x11c>
 1002fd0:	198d883a 	add	r6,r3,r6
 1002fd4:	29c00003 	ldbu	r7,0(r5)
 1002fd8:	18c00044 	addi	r3,r3,1
 1002fdc:	29400044 	addi	r5,r5,1
 1002fe0:	19ffffc5 	stb	r7,-1(r3)
 1002fe4:	19bffb1e 	bne	r3,r6,1002fd4 <memcpy+0x108>
 1002fe8:	dfc00217 	ldw	ra,8(sp)
 1002fec:	dc400117 	ldw	r17,4(sp)
 1002ff0:	dc000017 	ldw	r16,0(sp)
 1002ff4:	dec00304 	addi	sp,sp,12
 1002ff8:	f800283a 	ret
 1002ffc:	2007883a 	mov	r3,r4
 1003000:	003ff206 	br	1002fcc <memcpy+0x100>
 1003004:	2007883a 	mov	r3,r4
 1003008:	003ff106 	br	1002fd0 <memcpy+0x104>
 100300c:	200d883a 	mov	r6,r4
 1003010:	003fee06 	br	1002fcc <memcpy+0x100>

01003014 <memmove>:
 1003014:	2005883a 	mov	r2,r4
 1003018:	29000b2e 	bgeu	r5,r4,1003048 <memmove+0x34>
 100301c:	298f883a 	add	r7,r5,r6
 1003020:	21c0092e 	bgeu	r4,r7,1003048 <memmove+0x34>
 1003024:	2187883a 	add	r3,r4,r6
 1003028:	198bc83a 	sub	r5,r3,r6
 100302c:	30004826 	beq	r6,zero,1003150 <memmove+0x13c>
 1003030:	39ffffc4 	addi	r7,r7,-1
 1003034:	39000003 	ldbu	r4,0(r7)
 1003038:	18ffffc4 	addi	r3,r3,-1
 100303c:	19000005 	stb	r4,0(r3)
 1003040:	28fffb1e 	bne	r5,r3,1003030 <memmove+0x1c>
 1003044:	f800283a 	ret
 1003048:	00c003c4 	movi	r3,15
 100304c:	1980412e 	bgeu	r3,r6,1003154 <memmove+0x140>
 1003050:	2886b03a 	or	r3,r5,r2
 1003054:	18c000cc 	andi	r3,r3,3
 1003058:	1800401e 	bne	r3,zero,100315c <memmove+0x148>
 100305c:	33fffc04 	addi	r15,r6,-16
 1003060:	781ed13a 	srli	r15,r15,4
 1003064:	28c00104 	addi	r3,r5,4
 1003068:	13400104 	addi	r13,r2,4
 100306c:	781c913a 	slli	r14,r15,4
 1003070:	2b000204 	addi	r12,r5,8
 1003074:	12c00204 	addi	r11,r2,8
 1003078:	73800504 	addi	r14,r14,20
 100307c:	2a800304 	addi	r10,r5,12
 1003080:	12400304 	addi	r9,r2,12
 1003084:	2b9d883a 	add	r14,r5,r14
 1003088:	2811883a 	mov	r8,r5
 100308c:	100f883a 	mov	r7,r2
 1003090:	41000017 	ldw	r4,0(r8)
 1003094:	39c00404 	addi	r7,r7,16
 1003098:	18c00404 	addi	r3,r3,16
 100309c:	393ffc15 	stw	r4,-16(r7)
 10030a0:	193ffc17 	ldw	r4,-16(r3)
 10030a4:	6b400404 	addi	r13,r13,16
 10030a8:	5ac00404 	addi	r11,r11,16
 10030ac:	693ffc15 	stw	r4,-16(r13)
 10030b0:	61000017 	ldw	r4,0(r12)
 10030b4:	4a400404 	addi	r9,r9,16
 10030b8:	42000404 	addi	r8,r8,16
 10030bc:	593ffc15 	stw	r4,-16(r11)
 10030c0:	51000017 	ldw	r4,0(r10)
 10030c4:	63000404 	addi	r12,r12,16
 10030c8:	52800404 	addi	r10,r10,16
 10030cc:	493ffc15 	stw	r4,-16(r9)
 10030d0:	1bbfef1e 	bne	r3,r14,1003090 <memmove+0x7c>
 10030d4:	79000044 	addi	r4,r15,1
 10030d8:	2008913a 	slli	r4,r4,4
 10030dc:	328003cc 	andi	r10,r6,15
 10030e0:	02c000c4 	movi	r11,3
 10030e4:	1107883a 	add	r3,r2,r4
 10030e8:	290b883a 	add	r5,r5,r4
 10030ec:	5a801e2e 	bgeu	r11,r10,1003168 <memmove+0x154>
 10030f0:	1813883a 	mov	r9,r3
 10030f4:	2811883a 	mov	r8,r5
 10030f8:	500f883a 	mov	r7,r10
 10030fc:	41000017 	ldw	r4,0(r8)
 1003100:	4a400104 	addi	r9,r9,4
 1003104:	39ffff04 	addi	r7,r7,-4
 1003108:	493fff15 	stw	r4,-4(r9)
 100310c:	42000104 	addi	r8,r8,4
 1003110:	59fffa36 	bltu	r11,r7,10030fc <memmove+0xe8>
 1003114:	513fff04 	addi	r4,r10,-4
 1003118:	2008d0ba 	srli	r4,r4,2
 100311c:	318000cc 	andi	r6,r6,3
 1003120:	21000044 	addi	r4,r4,1
 1003124:	2109883a 	add	r4,r4,r4
 1003128:	2109883a 	add	r4,r4,r4
 100312c:	1907883a 	add	r3,r3,r4
 1003130:	290b883a 	add	r5,r5,r4
 1003134:	30000b26 	beq	r6,zero,1003164 <memmove+0x150>
 1003138:	198d883a 	add	r6,r3,r6
 100313c:	29c00003 	ldbu	r7,0(r5)
 1003140:	18c00044 	addi	r3,r3,1
 1003144:	29400044 	addi	r5,r5,1
 1003148:	19ffffc5 	stb	r7,-1(r3)
 100314c:	19bffb1e 	bne	r3,r6,100313c <memmove+0x128>
 1003150:	f800283a 	ret
 1003154:	1007883a 	mov	r3,r2
 1003158:	003ff606 	br	1003134 <memmove+0x120>
 100315c:	1007883a 	mov	r3,r2
 1003160:	003ff506 	br	1003138 <memmove+0x124>
 1003164:	f800283a 	ret
 1003168:	500d883a 	mov	r6,r10
 100316c:	003ff106 	br	1003134 <memmove+0x120>

01003170 <memset>:
 1003170:	20c000cc 	andi	r3,r4,3
 1003174:	2005883a 	mov	r2,r4
 1003178:	18004426 	beq	r3,zero,100328c <memset+0x11c>
 100317c:	31ffffc4 	addi	r7,r6,-1
 1003180:	30004026 	beq	r6,zero,1003284 <memset+0x114>
 1003184:	2813883a 	mov	r9,r5
 1003188:	200d883a 	mov	r6,r4
 100318c:	2007883a 	mov	r3,r4
 1003190:	00000406 	br	10031a4 <memset+0x34>
 1003194:	3a3fffc4 	addi	r8,r7,-1
 1003198:	31800044 	addi	r6,r6,1
 100319c:	38003926 	beq	r7,zero,1003284 <memset+0x114>
 10031a0:	400f883a 	mov	r7,r8
 10031a4:	18c00044 	addi	r3,r3,1
 10031a8:	32400005 	stb	r9,0(r6)
 10031ac:	1a0000cc 	andi	r8,r3,3
 10031b0:	403ff81e 	bne	r8,zero,1003194 <memset+0x24>
 10031b4:	010000c4 	movi	r4,3
 10031b8:	21c02d2e 	bgeu	r4,r7,1003270 <memset+0x100>
 10031bc:	29003fcc 	andi	r4,r5,255
 10031c0:	200c923a 	slli	r6,r4,8
 10031c4:	3108b03a 	or	r4,r6,r4
 10031c8:	200c943a 	slli	r6,r4,16
 10031cc:	218cb03a 	or	r6,r4,r6
 10031d0:	010003c4 	movi	r4,15
 10031d4:	21c0182e 	bgeu	r4,r7,1003238 <memset+0xc8>
 10031d8:	3b3ffc04 	addi	r12,r7,-16
 10031dc:	6018d13a 	srli	r12,r12,4
 10031e0:	1a000104 	addi	r8,r3,4
 10031e4:	1ac00204 	addi	r11,r3,8
 10031e8:	6008913a 	slli	r4,r12,4
 10031ec:	1a800304 	addi	r10,r3,12
 10031f0:	1813883a 	mov	r9,r3
 10031f4:	21000504 	addi	r4,r4,20
 10031f8:	1909883a 	add	r4,r3,r4
 10031fc:	49800015 	stw	r6,0(r9)
 1003200:	41800015 	stw	r6,0(r8)
 1003204:	59800015 	stw	r6,0(r11)
 1003208:	51800015 	stw	r6,0(r10)
 100320c:	42000404 	addi	r8,r8,16
 1003210:	4a400404 	addi	r9,r9,16
 1003214:	5ac00404 	addi	r11,r11,16
 1003218:	52800404 	addi	r10,r10,16
 100321c:	413ff71e 	bne	r8,r4,10031fc <memset+0x8c>
 1003220:	63000044 	addi	r12,r12,1
 1003224:	6018913a 	slli	r12,r12,4
 1003228:	39c003cc 	andi	r7,r7,15
 100322c:	010000c4 	movi	r4,3
 1003230:	1b07883a 	add	r3,r3,r12
 1003234:	21c00e2e 	bgeu	r4,r7,1003270 <memset+0x100>
 1003238:	1813883a 	mov	r9,r3
 100323c:	3811883a 	mov	r8,r7
 1003240:	010000c4 	movi	r4,3
 1003244:	49800015 	stw	r6,0(r9)
 1003248:	423fff04 	addi	r8,r8,-4
 100324c:	4a400104 	addi	r9,r9,4
 1003250:	223ffc36 	bltu	r4,r8,1003244 <memset+0xd4>
 1003254:	393fff04 	addi	r4,r7,-4
 1003258:	2008d0ba 	srli	r4,r4,2
 100325c:	39c000cc 	andi	r7,r7,3
 1003260:	21000044 	addi	r4,r4,1
 1003264:	2109883a 	add	r4,r4,r4
 1003268:	2109883a 	add	r4,r4,r4
 100326c:	1907883a 	add	r3,r3,r4
 1003270:	38000526 	beq	r7,zero,1003288 <memset+0x118>
 1003274:	19cf883a 	add	r7,r3,r7
 1003278:	19400005 	stb	r5,0(r3)
 100327c:	18c00044 	addi	r3,r3,1
 1003280:	38fffd1e 	bne	r7,r3,1003278 <memset+0x108>
 1003284:	f800283a 	ret
 1003288:	f800283a 	ret
 100328c:	2007883a 	mov	r3,r4
 1003290:	300f883a 	mov	r7,r6
 1003294:	003fc706 	br	10031b4 <memset+0x44>

01003298 <_realloc_r>:
 1003298:	defff604 	addi	sp,sp,-40
 100329c:	dc800215 	stw	r18,8(sp)
 10032a0:	dfc00915 	stw	ra,36(sp)
 10032a4:	df000815 	stw	fp,32(sp)
 10032a8:	ddc00715 	stw	r23,28(sp)
 10032ac:	dd800615 	stw	r22,24(sp)
 10032b0:	dd400515 	stw	r21,20(sp)
 10032b4:	dd000415 	stw	r20,16(sp)
 10032b8:	dcc00315 	stw	r19,12(sp)
 10032bc:	dc400115 	stw	r17,4(sp)
 10032c0:	dc000015 	stw	r16,0(sp)
 10032c4:	3025883a 	mov	r18,r6
 10032c8:	2800b726 	beq	r5,zero,10035a8 <_realloc_r+0x310>
 10032cc:	282b883a 	mov	r21,r5
 10032d0:	2029883a 	mov	r20,r4
 10032d4:	10050240 	call	1005024 <__malloc_lock>
 10032d8:	a8bfff17 	ldw	r2,-4(r21)
 10032dc:	043fff04 	movi	r16,-4
 10032e0:	90c002c4 	addi	r3,r18,11
 10032e4:	01000584 	movi	r4,22
 10032e8:	acfffe04 	addi	r19,r21,-8
 10032ec:	1420703a 	and	r16,r2,r16
 10032f0:	20c0332e 	bgeu	r4,r3,10033c0 <_realloc_r+0x128>
 10032f4:	047ffe04 	movi	r17,-8
 10032f8:	1c62703a 	and	r17,r3,r17
 10032fc:	8807883a 	mov	r3,r17
 1003300:	88005816 	blt	r17,zero,1003464 <_realloc_r+0x1cc>
 1003304:	8c805736 	bltu	r17,r18,1003464 <_realloc_r+0x1cc>
 1003308:	80c0300e 	bge	r16,r3,10033cc <_realloc_r+0x134>
 100330c:	07004034 	movhi	fp,256
 1003310:	e71f6404 	addi	fp,fp,32144
 1003314:	e1c00217 	ldw	r7,8(fp)
 1003318:	9c09883a 	add	r4,r19,r16
 100331c:	22000117 	ldw	r8,4(r4)
 1003320:	21c06326 	beq	r4,r7,10034b0 <_realloc_r+0x218>
 1003324:	017fff84 	movi	r5,-2
 1003328:	414a703a 	and	r5,r8,r5
 100332c:	214b883a 	add	r5,r4,r5
 1003330:	29800117 	ldw	r6,4(r5)
 1003334:	3180004c 	andi	r6,r6,1
 1003338:	30003f26 	beq	r6,zero,1003438 <_realloc_r+0x1a0>
 100333c:	1080004c 	andi	r2,r2,1
 1003340:	10008326 	beq	r2,zero,1003550 <_realloc_r+0x2b8>
 1003344:	900b883a 	mov	r5,r18
 1003348:	a009883a 	mov	r4,r20
 100334c:	10025dc0 	call	10025dc <_malloc_r>
 1003350:	1025883a 	mov	r18,r2
 1003354:	10011e26 	beq	r2,zero,10037d0 <_realloc_r+0x538>
 1003358:	a93fff17 	ldw	r4,-4(r21)
 100335c:	10fffe04 	addi	r3,r2,-8
 1003360:	00bfff84 	movi	r2,-2
 1003364:	2084703a 	and	r2,r4,r2
 1003368:	9885883a 	add	r2,r19,r2
 100336c:	1880ee26 	beq	r3,r2,1003728 <_realloc_r+0x490>
 1003370:	81bfff04 	addi	r6,r16,-4
 1003374:	00800904 	movi	r2,36
 1003378:	1180b836 	bltu	r2,r6,100365c <_realloc_r+0x3c4>
 100337c:	00c004c4 	movi	r3,19
 1003380:	19809636 	bltu	r3,r6,10035dc <_realloc_r+0x344>
 1003384:	9005883a 	mov	r2,r18
 1003388:	a807883a 	mov	r3,r21
 100338c:	19000017 	ldw	r4,0(r3)
 1003390:	11000015 	stw	r4,0(r2)
 1003394:	19000117 	ldw	r4,4(r3)
 1003398:	11000115 	stw	r4,4(r2)
 100339c:	18c00217 	ldw	r3,8(r3)
 10033a0:	10c00215 	stw	r3,8(r2)
 10033a4:	a80b883a 	mov	r5,r21
 10033a8:	a009883a 	mov	r4,r20
 10033ac:	10040640 	call	1004064 <_free_r>
 10033b0:	a009883a 	mov	r4,r20
 10033b4:	10050480 	call	1005048 <__malloc_unlock>
 10033b8:	9005883a 	mov	r2,r18
 10033bc:	00001206 	br	1003408 <_realloc_r+0x170>
 10033c0:	00c00404 	movi	r3,16
 10033c4:	1823883a 	mov	r17,r3
 10033c8:	003fce06 	br	1003304 <_realloc_r+0x6c>
 10033cc:	a825883a 	mov	r18,r21
 10033d0:	8445c83a 	sub	r2,r16,r17
 10033d4:	00c003c4 	movi	r3,15
 10033d8:	18802636 	bltu	r3,r2,1003474 <_realloc_r+0x1dc>
 10033dc:	99800117 	ldw	r6,4(r19)
 10033e0:	9c07883a 	add	r3,r19,r16
 10033e4:	3180004c 	andi	r6,r6,1
 10033e8:	3420b03a 	or	r16,r6,r16
 10033ec:	9c000115 	stw	r16,4(r19)
 10033f0:	18800117 	ldw	r2,4(r3)
 10033f4:	10800054 	ori	r2,r2,1
 10033f8:	18800115 	stw	r2,4(r3)
 10033fc:	a009883a 	mov	r4,r20
 1003400:	10050480 	call	1005048 <__malloc_unlock>
 1003404:	9005883a 	mov	r2,r18
 1003408:	dfc00917 	ldw	ra,36(sp)
 100340c:	df000817 	ldw	fp,32(sp)
 1003410:	ddc00717 	ldw	r23,28(sp)
 1003414:	dd800617 	ldw	r22,24(sp)
 1003418:	dd400517 	ldw	r21,20(sp)
 100341c:	dd000417 	ldw	r20,16(sp)
 1003420:	dcc00317 	ldw	r19,12(sp)
 1003424:	dc800217 	ldw	r18,8(sp)
 1003428:	dc400117 	ldw	r17,4(sp)
 100342c:	dc000017 	ldw	r16,0(sp)
 1003430:	dec00a04 	addi	sp,sp,40
 1003434:	f800283a 	ret
 1003438:	017fff04 	movi	r5,-4
 100343c:	414a703a 	and	r5,r8,r5
 1003440:	814d883a 	add	r6,r16,r5
 1003444:	30c01f16 	blt	r6,r3,10034c4 <_realloc_r+0x22c>
 1003448:	20800317 	ldw	r2,12(r4)
 100344c:	20c00217 	ldw	r3,8(r4)
 1003450:	a825883a 	mov	r18,r21
 1003454:	3021883a 	mov	r16,r6
 1003458:	18800315 	stw	r2,12(r3)
 100345c:	10c00215 	stw	r3,8(r2)
 1003460:	003fdb06 	br	10033d0 <_realloc_r+0x138>
 1003464:	00800304 	movi	r2,12
 1003468:	a0800015 	stw	r2,0(r20)
 100346c:	0005883a 	mov	r2,zero
 1003470:	003fe506 	br	1003408 <_realloc_r+0x170>
 1003474:	98c00117 	ldw	r3,4(r19)
 1003478:	9c4b883a 	add	r5,r19,r17
 100347c:	11000054 	ori	r4,r2,1
 1003480:	18c0004c 	andi	r3,r3,1
 1003484:	1c62b03a 	or	r17,r3,r17
 1003488:	9c400115 	stw	r17,4(r19)
 100348c:	29000115 	stw	r4,4(r5)
 1003490:	2885883a 	add	r2,r5,r2
 1003494:	10c00117 	ldw	r3,4(r2)
 1003498:	29400204 	addi	r5,r5,8
 100349c:	a009883a 	mov	r4,r20
 10034a0:	18c00054 	ori	r3,r3,1
 10034a4:	10c00115 	stw	r3,4(r2)
 10034a8:	10040640 	call	1004064 <_free_r>
 10034ac:	003fd306 	br	10033fc <_realloc_r+0x164>
 10034b0:	017fff04 	movi	r5,-4
 10034b4:	414a703a 	and	r5,r8,r5
 10034b8:	89800404 	addi	r6,r17,16
 10034bc:	8151883a 	add	r8,r16,r5
 10034c0:	4180590e 	bge	r8,r6,1003628 <_realloc_r+0x390>
 10034c4:	1080004c 	andi	r2,r2,1
 10034c8:	103f9e1e 	bne	r2,zero,1003344 <_realloc_r+0xac>
 10034cc:	adbffe17 	ldw	r22,-8(r21)
 10034d0:	00bfff04 	movi	r2,-4
 10034d4:	9dadc83a 	sub	r22,r19,r22
 10034d8:	b1800117 	ldw	r6,4(r22)
 10034dc:	3084703a 	and	r2,r6,r2
 10034e0:	20002026 	beq	r4,zero,1003564 <_realloc_r+0x2cc>
 10034e4:	80af883a 	add	r23,r16,r2
 10034e8:	b96f883a 	add	r23,r23,r5
 10034ec:	21c05f26 	beq	r4,r7,100366c <_realloc_r+0x3d4>
 10034f0:	b8c01c16 	blt	r23,r3,1003564 <_realloc_r+0x2cc>
 10034f4:	20800317 	ldw	r2,12(r4)
 10034f8:	20c00217 	ldw	r3,8(r4)
 10034fc:	81bfff04 	addi	r6,r16,-4
 1003500:	01000904 	movi	r4,36
 1003504:	18800315 	stw	r2,12(r3)
 1003508:	10c00215 	stw	r3,8(r2)
 100350c:	b0c00217 	ldw	r3,8(r22)
 1003510:	b0800317 	ldw	r2,12(r22)
 1003514:	b4800204 	addi	r18,r22,8
 1003518:	18800315 	stw	r2,12(r3)
 100351c:	10c00215 	stw	r3,8(r2)
 1003520:	21801b36 	bltu	r4,r6,1003590 <_realloc_r+0x2f8>
 1003524:	008004c4 	movi	r2,19
 1003528:	1180352e 	bgeu	r2,r6,1003600 <_realloc_r+0x368>
 100352c:	a8800017 	ldw	r2,0(r21)
 1003530:	b0800215 	stw	r2,8(r22)
 1003534:	a8800117 	ldw	r2,4(r21)
 1003538:	b0800315 	stw	r2,12(r22)
 100353c:	008006c4 	movi	r2,27
 1003540:	11807f36 	bltu	r2,r6,1003740 <_realloc_r+0x4a8>
 1003544:	b0800404 	addi	r2,r22,16
 1003548:	ad400204 	addi	r21,r21,8
 100354c:	00002d06 	br	1003604 <_realloc_r+0x36c>
 1003550:	adbffe17 	ldw	r22,-8(r21)
 1003554:	00bfff04 	movi	r2,-4
 1003558:	9dadc83a 	sub	r22,r19,r22
 100355c:	b1000117 	ldw	r4,4(r22)
 1003560:	2084703a 	and	r2,r4,r2
 1003564:	b03f7726 	beq	r22,zero,1003344 <_realloc_r+0xac>
 1003568:	80af883a 	add	r23,r16,r2
 100356c:	b8ff7516 	blt	r23,r3,1003344 <_realloc_r+0xac>
 1003570:	b0800317 	ldw	r2,12(r22)
 1003574:	b0c00217 	ldw	r3,8(r22)
 1003578:	81bfff04 	addi	r6,r16,-4
 100357c:	01000904 	movi	r4,36
 1003580:	18800315 	stw	r2,12(r3)
 1003584:	10c00215 	stw	r3,8(r2)
 1003588:	b4800204 	addi	r18,r22,8
 100358c:	21bfe52e 	bgeu	r4,r6,1003524 <_realloc_r+0x28c>
 1003590:	a80b883a 	mov	r5,r21
 1003594:	9009883a 	mov	r4,r18
 1003598:	10030140 	call	1003014 <memmove>
 100359c:	b821883a 	mov	r16,r23
 10035a0:	b027883a 	mov	r19,r22
 10035a4:	003f8a06 	br	10033d0 <_realloc_r+0x138>
 10035a8:	300b883a 	mov	r5,r6
 10035ac:	dfc00917 	ldw	ra,36(sp)
 10035b0:	df000817 	ldw	fp,32(sp)
 10035b4:	ddc00717 	ldw	r23,28(sp)
 10035b8:	dd800617 	ldw	r22,24(sp)
 10035bc:	dd400517 	ldw	r21,20(sp)
 10035c0:	dd000417 	ldw	r20,16(sp)
 10035c4:	dcc00317 	ldw	r19,12(sp)
 10035c8:	dc800217 	ldw	r18,8(sp)
 10035cc:	dc400117 	ldw	r17,4(sp)
 10035d0:	dc000017 	ldw	r16,0(sp)
 10035d4:	dec00a04 	addi	sp,sp,40
 10035d8:	10025dc1 	jmpi	10025dc <_malloc_r>
 10035dc:	a8c00017 	ldw	r3,0(r21)
 10035e0:	90c00015 	stw	r3,0(r18)
 10035e4:	a8c00117 	ldw	r3,4(r21)
 10035e8:	90c00115 	stw	r3,4(r18)
 10035ec:	00c006c4 	movi	r3,27
 10035f0:	19804536 	bltu	r3,r6,1003708 <_realloc_r+0x470>
 10035f4:	90800204 	addi	r2,r18,8
 10035f8:	a8c00204 	addi	r3,r21,8
 10035fc:	003f6306 	br	100338c <_realloc_r+0xf4>
 1003600:	9005883a 	mov	r2,r18
 1003604:	a8c00017 	ldw	r3,0(r21)
 1003608:	b821883a 	mov	r16,r23
 100360c:	b027883a 	mov	r19,r22
 1003610:	10c00015 	stw	r3,0(r2)
 1003614:	a8c00117 	ldw	r3,4(r21)
 1003618:	10c00115 	stw	r3,4(r2)
 100361c:	a8c00217 	ldw	r3,8(r21)
 1003620:	10c00215 	stw	r3,8(r2)
 1003624:	003f6a06 	br	10033d0 <_realloc_r+0x138>
 1003628:	9c67883a 	add	r19,r19,r17
 100362c:	4445c83a 	sub	r2,r8,r17
 1003630:	e4c00215 	stw	r19,8(fp)
 1003634:	10800054 	ori	r2,r2,1
 1003638:	98800115 	stw	r2,4(r19)
 100363c:	a8bfff17 	ldw	r2,-4(r21)
 1003640:	a009883a 	mov	r4,r20
 1003644:	1080004c 	andi	r2,r2,1
 1003648:	1462b03a 	or	r17,r2,r17
 100364c:	ac7fff15 	stw	r17,-4(r21)
 1003650:	10050480 	call	1005048 <__malloc_unlock>
 1003654:	a805883a 	mov	r2,r21
 1003658:	003f6b06 	br	1003408 <_realloc_r+0x170>
 100365c:	a80b883a 	mov	r5,r21
 1003660:	9009883a 	mov	r4,r18
 1003664:	10030140 	call	1003014 <memmove>
 1003668:	003f4e06 	br	10033a4 <_realloc_r+0x10c>
 100366c:	89000404 	addi	r4,r17,16
 1003670:	b93fbc16 	blt	r23,r4,1003564 <_realloc_r+0x2cc>
 1003674:	b0800317 	ldw	r2,12(r22)
 1003678:	b0c00217 	ldw	r3,8(r22)
 100367c:	81bfff04 	addi	r6,r16,-4
 1003680:	01000904 	movi	r4,36
 1003684:	18800315 	stw	r2,12(r3)
 1003688:	10c00215 	stw	r3,8(r2)
 100368c:	b4800204 	addi	r18,r22,8
 1003690:	21804336 	bltu	r4,r6,10037a0 <_realloc_r+0x508>
 1003694:	008004c4 	movi	r2,19
 1003698:	11803f2e 	bgeu	r2,r6,1003798 <_realloc_r+0x500>
 100369c:	a8800017 	ldw	r2,0(r21)
 10036a0:	b0800215 	stw	r2,8(r22)
 10036a4:	a8800117 	ldw	r2,4(r21)
 10036a8:	b0800315 	stw	r2,12(r22)
 10036ac:	008006c4 	movi	r2,27
 10036b0:	11803f36 	bltu	r2,r6,10037b0 <_realloc_r+0x518>
 10036b4:	b0800404 	addi	r2,r22,16
 10036b8:	ad400204 	addi	r21,r21,8
 10036bc:	a8c00017 	ldw	r3,0(r21)
 10036c0:	10c00015 	stw	r3,0(r2)
 10036c4:	a8c00117 	ldw	r3,4(r21)
 10036c8:	10c00115 	stw	r3,4(r2)
 10036cc:	a8c00217 	ldw	r3,8(r21)
 10036d0:	10c00215 	stw	r3,8(r2)
 10036d4:	b447883a 	add	r3,r22,r17
 10036d8:	bc45c83a 	sub	r2,r23,r17
 10036dc:	e0c00215 	stw	r3,8(fp)
 10036e0:	10800054 	ori	r2,r2,1
 10036e4:	18800115 	stw	r2,4(r3)
 10036e8:	b0800117 	ldw	r2,4(r22)
 10036ec:	a009883a 	mov	r4,r20
 10036f0:	1080004c 	andi	r2,r2,1
 10036f4:	1462b03a 	or	r17,r2,r17
 10036f8:	b4400115 	stw	r17,4(r22)
 10036fc:	10050480 	call	1005048 <__malloc_unlock>
 1003700:	9005883a 	mov	r2,r18
 1003704:	003f4006 	br	1003408 <_realloc_r+0x170>
 1003708:	a8c00217 	ldw	r3,8(r21)
 100370c:	90c00215 	stw	r3,8(r18)
 1003710:	a8c00317 	ldw	r3,12(r21)
 1003714:	90c00315 	stw	r3,12(r18)
 1003718:	30801126 	beq	r6,r2,1003760 <_realloc_r+0x4c8>
 100371c:	90800404 	addi	r2,r18,16
 1003720:	a8c00404 	addi	r3,r21,16
 1003724:	003f1906 	br	100338c <_realloc_r+0xf4>
 1003728:	90ffff17 	ldw	r3,-4(r18)
 100372c:	00bfff04 	movi	r2,-4
 1003730:	a825883a 	mov	r18,r21
 1003734:	1884703a 	and	r2,r3,r2
 1003738:	80a1883a 	add	r16,r16,r2
 100373c:	003f2406 	br	10033d0 <_realloc_r+0x138>
 1003740:	a8800217 	ldw	r2,8(r21)
 1003744:	b0800415 	stw	r2,16(r22)
 1003748:	a8800317 	ldw	r2,12(r21)
 100374c:	b0800515 	stw	r2,20(r22)
 1003750:	31000a26 	beq	r6,r4,100377c <_realloc_r+0x4e4>
 1003754:	b0800604 	addi	r2,r22,24
 1003758:	ad400404 	addi	r21,r21,16
 100375c:	003fa906 	br	1003604 <_realloc_r+0x36c>
 1003760:	a9000417 	ldw	r4,16(r21)
 1003764:	90800604 	addi	r2,r18,24
 1003768:	a8c00604 	addi	r3,r21,24
 100376c:	91000415 	stw	r4,16(r18)
 1003770:	a9000517 	ldw	r4,20(r21)
 1003774:	91000515 	stw	r4,20(r18)
 1003778:	003f0406 	br	100338c <_realloc_r+0xf4>
 100377c:	a8c00417 	ldw	r3,16(r21)
 1003780:	ad400604 	addi	r21,r21,24
 1003784:	b0800804 	addi	r2,r22,32
 1003788:	b0c00615 	stw	r3,24(r22)
 100378c:	a8ffff17 	ldw	r3,-4(r21)
 1003790:	b0c00715 	stw	r3,28(r22)
 1003794:	003f9b06 	br	1003604 <_realloc_r+0x36c>
 1003798:	9005883a 	mov	r2,r18
 100379c:	003fc706 	br	10036bc <_realloc_r+0x424>
 10037a0:	a80b883a 	mov	r5,r21
 10037a4:	9009883a 	mov	r4,r18
 10037a8:	10030140 	call	1003014 <memmove>
 10037ac:	003fc906 	br	10036d4 <_realloc_r+0x43c>
 10037b0:	a8800217 	ldw	r2,8(r21)
 10037b4:	b0800415 	stw	r2,16(r22)
 10037b8:	a8800317 	ldw	r2,12(r21)
 10037bc:	b0800515 	stw	r2,20(r22)
 10037c0:	31000726 	beq	r6,r4,10037e0 <_realloc_r+0x548>
 10037c4:	b0800604 	addi	r2,r22,24
 10037c8:	ad400404 	addi	r21,r21,16
 10037cc:	003fbb06 	br	10036bc <_realloc_r+0x424>
 10037d0:	a009883a 	mov	r4,r20
 10037d4:	10050480 	call	1005048 <__malloc_unlock>
 10037d8:	0005883a 	mov	r2,zero
 10037dc:	003f0a06 	br	1003408 <_realloc_r+0x170>
 10037e0:	a8c00417 	ldw	r3,16(r21)
 10037e4:	ad400604 	addi	r21,r21,24
 10037e8:	b0800804 	addi	r2,r22,32
 10037ec:	b0c00615 	stw	r3,24(r22)
 10037f0:	a8ffff17 	ldw	r3,-4(r21)
 10037f4:	b0c00715 	stw	r3,28(r22)
 10037f8:	003fb006 	br	10036bc <_realloc_r+0x424>

010037fc <_sbrk_r>:
 10037fc:	defffd04 	addi	sp,sp,-12
 1003800:	dc000015 	stw	r16,0(sp)
 1003804:	04004074 	movhi	r16,257
 1003808:	dc400115 	stw	r17,4(sp)
 100380c:	842b9504 	addi	r16,r16,-20908
 1003810:	2023883a 	mov	r17,r4
 1003814:	2809883a 	mov	r4,r5
 1003818:	dfc00215 	stw	ra,8(sp)
 100381c:	80000015 	stw	zero,0(r16)
 1003820:	10052080 	call	1005208 <sbrk>
 1003824:	00ffffc4 	movi	r3,-1
 1003828:	10c00526 	beq	r2,r3,1003840 <_sbrk_r+0x44>
 100382c:	dfc00217 	ldw	ra,8(sp)
 1003830:	dc400117 	ldw	r17,4(sp)
 1003834:	dc000017 	ldw	r16,0(sp)
 1003838:	dec00304 	addi	sp,sp,12
 100383c:	f800283a 	ret
 1003840:	80c00017 	ldw	r3,0(r16)
 1003844:	183ff926 	beq	r3,zero,100382c <_sbrk_r+0x30>
 1003848:	88c00015 	stw	r3,0(r17)
 100384c:	003ff706 	br	100382c <_sbrk_r+0x30>

01003850 <__sread>:
 1003850:	defffe04 	addi	sp,sp,-8
 1003854:	dc000015 	stw	r16,0(sp)
 1003858:	2821883a 	mov	r16,r5
 100385c:	2940038f 	ldh	r5,14(r5)
 1003860:	dfc00115 	stw	ra,4(sp)
 1003864:	10045900 	call	1004590 <_read_r>
 1003868:	10000716 	blt	r2,zero,1003888 <__sread+0x38>
 100386c:	80c01417 	ldw	r3,80(r16)
 1003870:	1887883a 	add	r3,r3,r2
 1003874:	80c01415 	stw	r3,80(r16)
 1003878:	dfc00117 	ldw	ra,4(sp)
 100387c:	dc000017 	ldw	r16,0(sp)
 1003880:	dec00204 	addi	sp,sp,8
 1003884:	f800283a 	ret
 1003888:	80c0030b 	ldhu	r3,12(r16)
 100388c:	18fbffcc 	andi	r3,r3,61439
 1003890:	80c0030d 	sth	r3,12(r16)
 1003894:	dfc00117 	ldw	ra,4(sp)
 1003898:	dc000017 	ldw	r16,0(sp)
 100389c:	dec00204 	addi	sp,sp,8
 10038a0:	f800283a 	ret

010038a4 <__seofread>:
 10038a4:	0005883a 	mov	r2,zero
 10038a8:	f800283a 	ret

010038ac <__swrite>:
 10038ac:	2880030b 	ldhu	r2,12(r5)
 10038b0:	defffb04 	addi	sp,sp,-20
 10038b4:	dcc00315 	stw	r19,12(sp)
 10038b8:	dc800215 	stw	r18,8(sp)
 10038bc:	dc400115 	stw	r17,4(sp)
 10038c0:	dc000015 	stw	r16,0(sp)
 10038c4:	dfc00415 	stw	ra,16(sp)
 10038c8:	10c0400c 	andi	r3,r2,256
 10038cc:	2821883a 	mov	r16,r5
 10038d0:	2023883a 	mov	r17,r4
 10038d4:	3025883a 	mov	r18,r6
 10038d8:	3827883a 	mov	r19,r7
 10038dc:	18000526 	beq	r3,zero,10038f4 <__swrite+0x48>
 10038e0:	2940038f 	ldh	r5,14(r5)
 10038e4:	01c00084 	movi	r7,2
 10038e8:	000d883a 	mov	r6,zero
 10038ec:	10043740 	call	1004374 <_lseek_r>
 10038f0:	8080030b 	ldhu	r2,12(r16)
 10038f4:	8140038f 	ldh	r5,14(r16)
 10038f8:	10bbffcc 	andi	r2,r2,61439
 10038fc:	980f883a 	mov	r7,r19
 1003900:	900d883a 	mov	r6,r18
 1003904:	8809883a 	mov	r4,r17
 1003908:	8080030d 	sth	r2,12(r16)
 100390c:	dfc00417 	ldw	ra,16(sp)
 1003910:	dcc00317 	ldw	r19,12(sp)
 1003914:	dc800217 	ldw	r18,8(sp)
 1003918:	dc400117 	ldw	r17,4(sp)
 100391c:	dc000017 	ldw	r16,0(sp)
 1003920:	dec00504 	addi	sp,sp,20
 1003924:	100398c1 	jmpi	100398c <_write_r>

01003928 <__sseek>:
 1003928:	defffe04 	addi	sp,sp,-8
 100392c:	dc000015 	stw	r16,0(sp)
 1003930:	2821883a 	mov	r16,r5
 1003934:	2940038f 	ldh	r5,14(r5)
 1003938:	dfc00115 	stw	ra,4(sp)
 100393c:	10043740 	call	1004374 <_lseek_r>
 1003940:	00ffffc4 	movi	r3,-1
 1003944:	10c00826 	beq	r2,r3,1003968 <__sseek+0x40>
 1003948:	80c0030b 	ldhu	r3,12(r16)
 100394c:	80801415 	stw	r2,80(r16)
 1003950:	18c40014 	ori	r3,r3,4096
 1003954:	80c0030d 	sth	r3,12(r16)
 1003958:	dfc00117 	ldw	ra,4(sp)
 100395c:	dc000017 	ldw	r16,0(sp)
 1003960:	dec00204 	addi	sp,sp,8
 1003964:	f800283a 	ret
 1003968:	80c0030b 	ldhu	r3,12(r16)
 100396c:	18fbffcc 	andi	r3,r3,61439
 1003970:	80c0030d 	sth	r3,12(r16)
 1003974:	dfc00117 	ldw	ra,4(sp)
 1003978:	dc000017 	ldw	r16,0(sp)
 100397c:	dec00204 	addi	sp,sp,8
 1003980:	f800283a 	ret

01003984 <__sclose>:
 1003984:	2940038f 	ldh	r5,14(r5)
 1003988:	1003b401 	jmpi	1003b40 <_close_r>

0100398c <_write_r>:
 100398c:	defffd04 	addi	sp,sp,-12
 1003990:	2805883a 	mov	r2,r5
 1003994:	dc000015 	stw	r16,0(sp)
 1003998:	04004074 	movhi	r16,257
 100399c:	dc400115 	stw	r17,4(sp)
 10039a0:	300b883a 	mov	r5,r6
 10039a4:	842b9504 	addi	r16,r16,-20908
 10039a8:	2023883a 	mov	r17,r4
 10039ac:	380d883a 	mov	r6,r7
 10039b0:	1009883a 	mov	r4,r2
 10039b4:	dfc00215 	stw	ra,8(sp)
 10039b8:	80000015 	stw	zero,0(r16)
 10039bc:	10054c80 	call	10054c8 <write>
 10039c0:	00ffffc4 	movi	r3,-1
 10039c4:	10c00526 	beq	r2,r3,10039dc <_write_r+0x50>
 10039c8:	dfc00217 	ldw	ra,8(sp)
 10039cc:	dc400117 	ldw	r17,4(sp)
 10039d0:	dc000017 	ldw	r16,0(sp)
 10039d4:	dec00304 	addi	sp,sp,12
 10039d8:	f800283a 	ret
 10039dc:	80c00017 	ldw	r3,0(r16)
 10039e0:	183ff926 	beq	r3,zero,10039c8 <_write_r+0x3c>
 10039e4:	88c00015 	stw	r3,0(r17)
 10039e8:	003ff706 	br	10039c8 <_write_r+0x3c>

010039ec <__swsetup_r>:
 10039ec:	00804074 	movhi	r2,257
 10039f0:	defffd04 	addi	sp,sp,-12
 10039f4:	10a4eb04 	addi	r2,r2,-27732
 10039f8:	dc400115 	stw	r17,4(sp)
 10039fc:	2023883a 	mov	r17,r4
 1003a00:	11000017 	ldw	r4,0(r2)
 1003a04:	dc000015 	stw	r16,0(sp)
 1003a08:	dfc00215 	stw	ra,8(sp)
 1003a0c:	2821883a 	mov	r16,r5
 1003a10:	20000226 	beq	r4,zero,1003a1c <__swsetup_r+0x30>
 1003a14:	20800e17 	ldw	r2,56(r4)
 1003a18:	10003126 	beq	r2,zero,1003ae0 <__swsetup_r+0xf4>
 1003a1c:	8080030b 	ldhu	r2,12(r16)
 1003a20:	10c0020c 	andi	r3,r2,8
 1003a24:	1009883a 	mov	r4,r2
 1003a28:	18000f26 	beq	r3,zero,1003a68 <__swsetup_r+0x7c>
 1003a2c:	80c00417 	ldw	r3,16(r16)
 1003a30:	18001526 	beq	r3,zero,1003a88 <__swsetup_r+0x9c>
 1003a34:	1100004c 	andi	r4,r2,1
 1003a38:	20001c1e 	bne	r4,zero,1003aac <__swsetup_r+0xc0>
 1003a3c:	1080008c 	andi	r2,r2,2
 1003a40:	1000291e 	bne	r2,zero,1003ae8 <__swsetup_r+0xfc>
 1003a44:	80800517 	ldw	r2,20(r16)
 1003a48:	80800215 	stw	r2,8(r16)
 1003a4c:	18001c26 	beq	r3,zero,1003ac0 <__swsetup_r+0xd4>
 1003a50:	0005883a 	mov	r2,zero
 1003a54:	dfc00217 	ldw	ra,8(sp)
 1003a58:	dc400117 	ldw	r17,4(sp)
 1003a5c:	dc000017 	ldw	r16,0(sp)
 1003a60:	dec00304 	addi	sp,sp,12
 1003a64:	f800283a 	ret
 1003a68:	2080040c 	andi	r2,r4,16
 1003a6c:	10002e26 	beq	r2,zero,1003b28 <__swsetup_r+0x13c>
 1003a70:	2080010c 	andi	r2,r4,4
 1003a74:	10001e1e 	bne	r2,zero,1003af0 <__swsetup_r+0x104>
 1003a78:	80c00417 	ldw	r3,16(r16)
 1003a7c:	20800214 	ori	r2,r4,8
 1003a80:	8080030d 	sth	r2,12(r16)
 1003a84:	183feb1e 	bne	r3,zero,1003a34 <__swsetup_r+0x48>
 1003a88:	1100a00c 	andi	r4,r2,640
 1003a8c:	01408004 	movi	r5,512
 1003a90:	217fe826 	beq	r4,r5,1003a34 <__swsetup_r+0x48>
 1003a94:	800b883a 	mov	r5,r16
 1003a98:	8809883a 	mov	r4,r17
 1003a9c:	10043d40 	call	10043d4 <__smakebuf_r>
 1003aa0:	8080030b 	ldhu	r2,12(r16)
 1003aa4:	80c00417 	ldw	r3,16(r16)
 1003aa8:	003fe206 	br	1003a34 <__swsetup_r+0x48>
 1003aac:	80800517 	ldw	r2,20(r16)
 1003ab0:	80000215 	stw	zero,8(r16)
 1003ab4:	0085c83a 	sub	r2,zero,r2
 1003ab8:	80800615 	stw	r2,24(r16)
 1003abc:	183fe41e 	bne	r3,zero,1003a50 <__swsetup_r+0x64>
 1003ac0:	80c0030b 	ldhu	r3,12(r16)
 1003ac4:	0005883a 	mov	r2,zero
 1003ac8:	1900200c 	andi	r4,r3,128
 1003acc:	203fe126 	beq	r4,zero,1003a54 <__swsetup_r+0x68>
 1003ad0:	18c01014 	ori	r3,r3,64
 1003ad4:	80c0030d 	sth	r3,12(r16)
 1003ad8:	00bfffc4 	movi	r2,-1
 1003adc:	003fdd06 	br	1003a54 <__swsetup_r+0x68>
 1003ae0:	1001eec0 	call	1001eec <__sinit>
 1003ae4:	003fcd06 	br	1003a1c <__swsetup_r+0x30>
 1003ae8:	0005883a 	mov	r2,zero
 1003aec:	003fd606 	br	1003a48 <__swsetup_r+0x5c>
 1003af0:	81400c17 	ldw	r5,48(r16)
 1003af4:	28000626 	beq	r5,zero,1003b10 <__swsetup_r+0x124>
 1003af8:	80801004 	addi	r2,r16,64
 1003afc:	28800326 	beq	r5,r2,1003b0c <__swsetup_r+0x120>
 1003b00:	8809883a 	mov	r4,r17
 1003b04:	10040640 	call	1004064 <_free_r>
 1003b08:	8100030b 	ldhu	r4,12(r16)
 1003b0c:	80000c15 	stw	zero,48(r16)
 1003b10:	80c00417 	ldw	r3,16(r16)
 1003b14:	00bff6c4 	movi	r2,-37
 1003b18:	1108703a 	and	r4,r2,r4
 1003b1c:	80000115 	stw	zero,4(r16)
 1003b20:	80c00015 	stw	r3,0(r16)
 1003b24:	003fd506 	br	1003a7c <__swsetup_r+0x90>
 1003b28:	00800244 	movi	r2,9
 1003b2c:	88800015 	stw	r2,0(r17)
 1003b30:	20801014 	ori	r2,r4,64
 1003b34:	8080030d 	sth	r2,12(r16)
 1003b38:	00bfffc4 	movi	r2,-1
 1003b3c:	003fc506 	br	1003a54 <__swsetup_r+0x68>

01003b40 <_close_r>:
 1003b40:	defffd04 	addi	sp,sp,-12
 1003b44:	dc000015 	stw	r16,0(sp)
 1003b48:	04004074 	movhi	r16,257
 1003b4c:	dc400115 	stw	r17,4(sp)
 1003b50:	842b9504 	addi	r16,r16,-20908
 1003b54:	2023883a 	mov	r17,r4
 1003b58:	2809883a 	mov	r4,r5
 1003b5c:	dfc00215 	stw	ra,8(sp)
 1003b60:	80000015 	stw	zero,0(r16)
 1003b64:	10048f00 	call	10048f0 <close>
 1003b68:	00ffffc4 	movi	r3,-1
 1003b6c:	10c00526 	beq	r2,r3,1003b84 <_close_r+0x44>
 1003b70:	dfc00217 	ldw	ra,8(sp)
 1003b74:	dc400117 	ldw	r17,4(sp)
 1003b78:	dc000017 	ldw	r16,0(sp)
 1003b7c:	dec00304 	addi	sp,sp,12
 1003b80:	f800283a 	ret
 1003b84:	80c00017 	ldw	r3,0(r16)
 1003b88:	183ff926 	beq	r3,zero,1003b70 <_close_r+0x30>
 1003b8c:	88c00015 	stw	r3,0(r17)
 1003b90:	003ff706 	br	1003b70 <_close_r+0x30>

01003b94 <_fclose_r>:
 1003b94:	28003926 	beq	r5,zero,1003c7c <_fclose_r+0xe8>
 1003b98:	defffc04 	addi	sp,sp,-16
 1003b9c:	dc400115 	stw	r17,4(sp)
 1003ba0:	dc000015 	stw	r16,0(sp)
 1003ba4:	dfc00315 	stw	ra,12(sp)
 1003ba8:	dc800215 	stw	r18,8(sp)
 1003bac:	2023883a 	mov	r17,r4
 1003bb0:	2821883a 	mov	r16,r5
 1003bb4:	20000226 	beq	r4,zero,1003bc0 <_fclose_r+0x2c>
 1003bb8:	20800e17 	ldw	r2,56(r4)
 1003bbc:	10002726 	beq	r2,zero,1003c5c <_fclose_r+0xc8>
 1003bc0:	8080030f 	ldh	r2,12(r16)
 1003bc4:	1000071e 	bne	r2,zero,1003be4 <_fclose_r+0x50>
 1003bc8:	0005883a 	mov	r2,zero
 1003bcc:	dfc00317 	ldw	ra,12(sp)
 1003bd0:	dc800217 	ldw	r18,8(sp)
 1003bd4:	dc400117 	ldw	r17,4(sp)
 1003bd8:	dc000017 	ldw	r16,0(sp)
 1003bdc:	dec00404 	addi	sp,sp,16
 1003be0:	f800283a 	ret
 1003be4:	800b883a 	mov	r5,r16
 1003be8:	8809883a 	mov	r4,r17
 1003bec:	1003c980 	call	1003c98 <__sflush_r>
 1003bf0:	1025883a 	mov	r18,r2
 1003bf4:	80800b17 	ldw	r2,44(r16)
 1003bf8:	10000426 	beq	r2,zero,1003c0c <_fclose_r+0x78>
 1003bfc:	81400717 	ldw	r5,28(r16)
 1003c00:	8809883a 	mov	r4,r17
 1003c04:	103ee83a 	callr	r2
 1003c08:	10001616 	blt	r2,zero,1003c64 <_fclose_r+0xd0>
 1003c0c:	8080030b 	ldhu	r2,12(r16)
 1003c10:	1080200c 	andi	r2,r2,128
 1003c14:	1000151e 	bne	r2,zero,1003c6c <_fclose_r+0xd8>
 1003c18:	81400c17 	ldw	r5,48(r16)
 1003c1c:	28000526 	beq	r5,zero,1003c34 <_fclose_r+0xa0>
 1003c20:	80801004 	addi	r2,r16,64
 1003c24:	28800226 	beq	r5,r2,1003c30 <_fclose_r+0x9c>
 1003c28:	8809883a 	mov	r4,r17
 1003c2c:	10040640 	call	1004064 <_free_r>
 1003c30:	80000c15 	stw	zero,48(r16)
 1003c34:	81401117 	ldw	r5,68(r16)
 1003c38:	28000326 	beq	r5,zero,1003c48 <_fclose_r+0xb4>
 1003c3c:	8809883a 	mov	r4,r17
 1003c40:	10040640 	call	1004064 <_free_r>
 1003c44:	80001115 	stw	zero,68(r16)
 1003c48:	1001efc0 	call	1001efc <__sfp_lock_acquire>
 1003c4c:	8000030d 	sth	zero,12(r16)
 1003c50:	1001f000 	call	1001f00 <__sfp_lock_release>
 1003c54:	9005883a 	mov	r2,r18
 1003c58:	003fdc06 	br	1003bcc <_fclose_r+0x38>
 1003c5c:	1001eec0 	call	1001eec <__sinit>
 1003c60:	003fd706 	br	1003bc0 <_fclose_r+0x2c>
 1003c64:	04bfffc4 	movi	r18,-1
 1003c68:	003fe806 	br	1003c0c <_fclose_r+0x78>
 1003c6c:	81400417 	ldw	r5,16(r16)
 1003c70:	8809883a 	mov	r4,r17
 1003c74:	10040640 	call	1004064 <_free_r>
 1003c78:	003fe706 	br	1003c18 <_fclose_r+0x84>
 1003c7c:	0005883a 	mov	r2,zero
 1003c80:	f800283a 	ret

01003c84 <fclose>:
 1003c84:	00804074 	movhi	r2,257
 1003c88:	10a4eb04 	addi	r2,r2,-27732
 1003c8c:	200b883a 	mov	r5,r4
 1003c90:	11000017 	ldw	r4,0(r2)
 1003c94:	1003b941 	jmpi	1003b94 <_fclose_r>

01003c98 <__sflush_r>:
 1003c98:	2880030b 	ldhu	r2,12(r5)
 1003c9c:	defffb04 	addi	sp,sp,-20
 1003ca0:	dcc00315 	stw	r19,12(sp)
 1003ca4:	dc400115 	stw	r17,4(sp)
 1003ca8:	dfc00415 	stw	ra,16(sp)
 1003cac:	dc800215 	stw	r18,8(sp)
 1003cb0:	dc000015 	stw	r16,0(sp)
 1003cb4:	10c0020c 	andi	r3,r2,8
 1003cb8:	2823883a 	mov	r17,r5
 1003cbc:	2027883a 	mov	r19,r4
 1003cc0:	1800311e 	bne	r3,zero,1003d88 <__sflush_r+0xf0>
 1003cc4:	28c00117 	ldw	r3,4(r5)
 1003cc8:	10820014 	ori	r2,r2,2048
 1003ccc:	2880030d 	sth	r2,12(r5)
 1003cd0:	00c04b0e 	bge	zero,r3,1003e00 <__sflush_r+0x168>
 1003cd4:	8a000a17 	ldw	r8,40(r17)
 1003cd8:	40002326 	beq	r8,zero,1003d68 <__sflush_r+0xd0>
 1003cdc:	9c000017 	ldw	r16,0(r19)
 1003ce0:	10c4000c 	andi	r3,r2,4096
 1003ce4:	98000015 	stw	zero,0(r19)
 1003ce8:	18004826 	beq	r3,zero,1003e0c <__sflush_r+0x174>
 1003cec:	89801417 	ldw	r6,80(r17)
 1003cf0:	10c0010c 	andi	r3,r2,4
 1003cf4:	18000626 	beq	r3,zero,1003d10 <__sflush_r+0x78>
 1003cf8:	88c00117 	ldw	r3,4(r17)
 1003cfc:	88800c17 	ldw	r2,48(r17)
 1003d00:	30cdc83a 	sub	r6,r6,r3
 1003d04:	10000226 	beq	r2,zero,1003d10 <__sflush_r+0x78>
 1003d08:	88800f17 	ldw	r2,60(r17)
 1003d0c:	308dc83a 	sub	r6,r6,r2
 1003d10:	89400717 	ldw	r5,28(r17)
 1003d14:	000f883a 	mov	r7,zero
 1003d18:	9809883a 	mov	r4,r19
 1003d1c:	403ee83a 	callr	r8
 1003d20:	00ffffc4 	movi	r3,-1
 1003d24:	10c04426 	beq	r2,r3,1003e38 <__sflush_r+0x1a0>
 1003d28:	88c0030b 	ldhu	r3,12(r17)
 1003d2c:	89000417 	ldw	r4,16(r17)
 1003d30:	88000115 	stw	zero,4(r17)
 1003d34:	197dffcc 	andi	r5,r3,63487
 1003d38:	8940030d 	sth	r5,12(r17)
 1003d3c:	89000015 	stw	r4,0(r17)
 1003d40:	18c4000c 	andi	r3,r3,4096
 1003d44:	18002c1e 	bne	r3,zero,1003df8 <__sflush_r+0x160>
 1003d48:	89400c17 	ldw	r5,48(r17)
 1003d4c:	9c000015 	stw	r16,0(r19)
 1003d50:	28000526 	beq	r5,zero,1003d68 <__sflush_r+0xd0>
 1003d54:	88801004 	addi	r2,r17,64
 1003d58:	28800226 	beq	r5,r2,1003d64 <__sflush_r+0xcc>
 1003d5c:	9809883a 	mov	r4,r19
 1003d60:	10040640 	call	1004064 <_free_r>
 1003d64:	88000c15 	stw	zero,48(r17)
 1003d68:	0005883a 	mov	r2,zero
 1003d6c:	dfc00417 	ldw	ra,16(sp)
 1003d70:	dcc00317 	ldw	r19,12(sp)
 1003d74:	dc800217 	ldw	r18,8(sp)
 1003d78:	dc400117 	ldw	r17,4(sp)
 1003d7c:	dc000017 	ldw	r16,0(sp)
 1003d80:	dec00504 	addi	sp,sp,20
 1003d84:	f800283a 	ret
 1003d88:	2c800417 	ldw	r18,16(r5)
 1003d8c:	903ff626 	beq	r18,zero,1003d68 <__sflush_r+0xd0>
 1003d90:	2c000017 	ldw	r16,0(r5)
 1003d94:	108000cc 	andi	r2,r2,3
 1003d98:	2c800015 	stw	r18,0(r5)
 1003d9c:	84a1c83a 	sub	r16,r16,r18
 1003da0:	1000131e 	bne	r2,zero,1003df0 <__sflush_r+0x158>
 1003da4:	28800517 	ldw	r2,20(r5)
 1003da8:	88800215 	stw	r2,8(r17)
 1003dac:	04000316 	blt	zero,r16,1003dbc <__sflush_r+0x124>
 1003db0:	003fed06 	br	1003d68 <__sflush_r+0xd0>
 1003db4:	90a5883a 	add	r18,r18,r2
 1003db8:	043feb0e 	bge	zero,r16,1003d68 <__sflush_r+0xd0>
 1003dbc:	88800917 	ldw	r2,36(r17)
 1003dc0:	89400717 	ldw	r5,28(r17)
 1003dc4:	800f883a 	mov	r7,r16
 1003dc8:	900d883a 	mov	r6,r18
 1003dcc:	9809883a 	mov	r4,r19
 1003dd0:	103ee83a 	callr	r2
 1003dd4:	80a1c83a 	sub	r16,r16,r2
 1003dd8:	00bff616 	blt	zero,r2,1003db4 <__sflush_r+0x11c>
 1003ddc:	88c0030b 	ldhu	r3,12(r17)
 1003de0:	00bfffc4 	movi	r2,-1
 1003de4:	18c01014 	ori	r3,r3,64
 1003de8:	88c0030d 	sth	r3,12(r17)
 1003dec:	003fdf06 	br	1003d6c <__sflush_r+0xd4>
 1003df0:	0005883a 	mov	r2,zero
 1003df4:	003fec06 	br	1003da8 <__sflush_r+0x110>
 1003df8:	88801415 	stw	r2,80(r17)
 1003dfc:	003fd206 	br	1003d48 <__sflush_r+0xb0>
 1003e00:	28c00f17 	ldw	r3,60(r5)
 1003e04:	00ffb316 	blt	zero,r3,1003cd4 <__sflush_r+0x3c>
 1003e08:	003fd706 	br	1003d68 <__sflush_r+0xd0>
 1003e0c:	89400717 	ldw	r5,28(r17)
 1003e10:	000d883a 	mov	r6,zero
 1003e14:	01c00044 	movi	r7,1
 1003e18:	9809883a 	mov	r4,r19
 1003e1c:	403ee83a 	callr	r8
 1003e20:	100d883a 	mov	r6,r2
 1003e24:	00bfffc4 	movi	r2,-1
 1003e28:	30801426 	beq	r6,r2,1003e7c <__sflush_r+0x1e4>
 1003e2c:	8880030b 	ldhu	r2,12(r17)
 1003e30:	8a000a17 	ldw	r8,40(r17)
 1003e34:	003fae06 	br	1003cf0 <__sflush_r+0x58>
 1003e38:	98c00017 	ldw	r3,0(r19)
 1003e3c:	183fba26 	beq	r3,zero,1003d28 <__sflush_r+0x90>
 1003e40:	01000744 	movi	r4,29
 1003e44:	19000626 	beq	r3,r4,1003e60 <__sflush_r+0x1c8>
 1003e48:	01000584 	movi	r4,22
 1003e4c:	19000426 	beq	r3,r4,1003e60 <__sflush_r+0x1c8>
 1003e50:	88c0030b 	ldhu	r3,12(r17)
 1003e54:	18c01014 	ori	r3,r3,64
 1003e58:	88c0030d 	sth	r3,12(r17)
 1003e5c:	003fc306 	br	1003d6c <__sflush_r+0xd4>
 1003e60:	8880030b 	ldhu	r2,12(r17)
 1003e64:	88c00417 	ldw	r3,16(r17)
 1003e68:	88000115 	stw	zero,4(r17)
 1003e6c:	10bdffcc 	andi	r2,r2,63487
 1003e70:	8880030d 	sth	r2,12(r17)
 1003e74:	88c00015 	stw	r3,0(r17)
 1003e78:	003fb306 	br	1003d48 <__sflush_r+0xb0>
 1003e7c:	98800017 	ldw	r2,0(r19)
 1003e80:	103fea26 	beq	r2,zero,1003e2c <__sflush_r+0x194>
 1003e84:	00c00744 	movi	r3,29
 1003e88:	10c00226 	beq	r2,r3,1003e94 <__sflush_r+0x1fc>
 1003e8c:	00c00584 	movi	r3,22
 1003e90:	10c0031e 	bne	r2,r3,1003ea0 <__sflush_r+0x208>
 1003e94:	9c000015 	stw	r16,0(r19)
 1003e98:	0005883a 	mov	r2,zero
 1003e9c:	003fb306 	br	1003d6c <__sflush_r+0xd4>
 1003ea0:	88c0030b 	ldhu	r3,12(r17)
 1003ea4:	3005883a 	mov	r2,r6
 1003ea8:	18c01014 	ori	r3,r3,64
 1003eac:	88c0030d 	sth	r3,12(r17)
 1003eb0:	003fae06 	br	1003d6c <__sflush_r+0xd4>

01003eb4 <_fflush_r>:
 1003eb4:	defffd04 	addi	sp,sp,-12
 1003eb8:	dc000115 	stw	r16,4(sp)
 1003ebc:	dfc00215 	stw	ra,8(sp)
 1003ec0:	2021883a 	mov	r16,r4
 1003ec4:	20000226 	beq	r4,zero,1003ed0 <_fflush_r+0x1c>
 1003ec8:	20800e17 	ldw	r2,56(r4)
 1003ecc:	10000c26 	beq	r2,zero,1003f00 <_fflush_r+0x4c>
 1003ed0:	2880030f 	ldh	r2,12(r5)
 1003ed4:	1000051e 	bne	r2,zero,1003eec <_fflush_r+0x38>
 1003ed8:	0005883a 	mov	r2,zero
 1003edc:	dfc00217 	ldw	ra,8(sp)
 1003ee0:	dc000117 	ldw	r16,4(sp)
 1003ee4:	dec00304 	addi	sp,sp,12
 1003ee8:	f800283a 	ret
 1003eec:	8009883a 	mov	r4,r16
 1003ef0:	dfc00217 	ldw	ra,8(sp)
 1003ef4:	dc000117 	ldw	r16,4(sp)
 1003ef8:	dec00304 	addi	sp,sp,12
 1003efc:	1003c981 	jmpi	1003c98 <__sflush_r>
 1003f00:	d9400015 	stw	r5,0(sp)
 1003f04:	1001eec0 	call	1001eec <__sinit>
 1003f08:	d9400017 	ldw	r5,0(sp)
 1003f0c:	003ff006 	br	1003ed0 <_fflush_r+0x1c>

01003f10 <fflush>:
 1003f10:	20000526 	beq	r4,zero,1003f28 <fflush+0x18>
 1003f14:	00804074 	movhi	r2,257
 1003f18:	10a4eb04 	addi	r2,r2,-27732
 1003f1c:	200b883a 	mov	r5,r4
 1003f20:	11000017 	ldw	r4,0(r2)
 1003f24:	1003eb41 	jmpi	1003eb4 <_fflush_r>
 1003f28:	00804074 	movhi	r2,257
 1003f2c:	10a4ea04 	addi	r2,r2,-27736
 1003f30:	11000017 	ldw	r4,0(r2)
 1003f34:	01404034 	movhi	r5,256
 1003f38:	294fad04 	addi	r5,r5,16052
 1003f3c:	10024bc1 	jmpi	10024bc <_fwalk_reent>

01003f40 <_malloc_trim_r>:
 1003f40:	defffb04 	addi	sp,sp,-20
 1003f44:	dcc00315 	stw	r19,12(sp)
 1003f48:	04c04034 	movhi	r19,256
 1003f4c:	dc800215 	stw	r18,8(sp)
 1003f50:	dc400115 	stw	r17,4(sp)
 1003f54:	dc000015 	stw	r16,0(sp)
 1003f58:	dfc00415 	stw	ra,16(sp)
 1003f5c:	2821883a 	mov	r16,r5
 1003f60:	9cdf6404 	addi	r19,r19,32144
 1003f64:	2025883a 	mov	r18,r4
 1003f68:	10050240 	call	1005024 <__malloc_lock>
 1003f6c:	98800217 	ldw	r2,8(r19)
 1003f70:	14400117 	ldw	r17,4(r2)
 1003f74:	00bfff04 	movi	r2,-4
 1003f78:	88a2703a 	and	r17,r17,r2
 1003f7c:	8c21c83a 	sub	r16,r17,r16
 1003f80:	8403fbc4 	addi	r16,r16,4079
 1003f84:	8020d33a 	srli	r16,r16,12
 1003f88:	0083ffc4 	movi	r2,4095
 1003f8c:	843fffc4 	addi	r16,r16,-1
 1003f90:	8020933a 	slli	r16,r16,12
 1003f94:	1400060e 	bge	r2,r16,1003fb0 <_malloc_trim_r+0x70>
 1003f98:	000b883a 	mov	r5,zero
 1003f9c:	9009883a 	mov	r4,r18
 1003fa0:	10037fc0 	call	10037fc <_sbrk_r>
 1003fa4:	98c00217 	ldw	r3,8(r19)
 1003fa8:	1c47883a 	add	r3,r3,r17
 1003fac:	10c00a26 	beq	r2,r3,1003fd8 <_malloc_trim_r+0x98>
 1003fb0:	9009883a 	mov	r4,r18
 1003fb4:	10050480 	call	1005048 <__malloc_unlock>
 1003fb8:	0005883a 	mov	r2,zero
 1003fbc:	dfc00417 	ldw	ra,16(sp)
 1003fc0:	dcc00317 	ldw	r19,12(sp)
 1003fc4:	dc800217 	ldw	r18,8(sp)
 1003fc8:	dc400117 	ldw	r17,4(sp)
 1003fcc:	dc000017 	ldw	r16,0(sp)
 1003fd0:	dec00504 	addi	sp,sp,20
 1003fd4:	f800283a 	ret
 1003fd8:	040bc83a 	sub	r5,zero,r16
 1003fdc:	9009883a 	mov	r4,r18
 1003fe0:	10037fc0 	call	10037fc <_sbrk_r>
 1003fe4:	00ffffc4 	movi	r3,-1
 1003fe8:	10c00d26 	beq	r2,r3,1004020 <_malloc_trim_r+0xe0>
 1003fec:	00c04074 	movhi	r3,257
 1003ff0:	18eba404 	addi	r3,r3,-20848
 1003ff4:	18800017 	ldw	r2,0(r3)
 1003ff8:	99000217 	ldw	r4,8(r19)
 1003ffc:	8c23c83a 	sub	r17,r17,r16
 1004000:	8c400054 	ori	r17,r17,1
 1004004:	1421c83a 	sub	r16,r2,r16
 1004008:	24400115 	stw	r17,4(r4)
 100400c:	9009883a 	mov	r4,r18
 1004010:	1c000015 	stw	r16,0(r3)
 1004014:	10050480 	call	1005048 <__malloc_unlock>
 1004018:	00800044 	movi	r2,1
 100401c:	003fe706 	br	1003fbc <_malloc_trim_r+0x7c>
 1004020:	000b883a 	mov	r5,zero
 1004024:	9009883a 	mov	r4,r18
 1004028:	10037fc0 	call	10037fc <_sbrk_r>
 100402c:	99000217 	ldw	r4,8(r19)
 1004030:	014003c4 	movi	r5,15
 1004034:	1107c83a 	sub	r3,r2,r4
 1004038:	28ffdd0e 	bge	r5,r3,1003fb0 <_malloc_trim_r+0x70>
 100403c:	01404074 	movhi	r5,257
 1004040:	2964ec04 	addi	r5,r5,-27728
 1004044:	29400017 	ldw	r5,0(r5)
 1004048:	18c00054 	ori	r3,r3,1
 100404c:	20c00115 	stw	r3,4(r4)
 1004050:	00c04074 	movhi	r3,257
 1004054:	1145c83a 	sub	r2,r2,r5
 1004058:	18eba404 	addi	r3,r3,-20848
 100405c:	18800015 	stw	r2,0(r3)
 1004060:	003fd306 	br	1003fb0 <_malloc_trim_r+0x70>

01004064 <_free_r>:
 1004064:	28004126 	beq	r5,zero,100416c <_free_r+0x108>
 1004068:	defffd04 	addi	sp,sp,-12
 100406c:	dc400115 	stw	r17,4(sp)
 1004070:	dc000015 	stw	r16,0(sp)
 1004074:	2023883a 	mov	r17,r4
 1004078:	2821883a 	mov	r16,r5
 100407c:	dfc00215 	stw	ra,8(sp)
 1004080:	10050240 	call	1005024 <__malloc_lock>
 1004084:	81ffff17 	ldw	r7,-4(r16)
 1004088:	00bfff84 	movi	r2,-2
 100408c:	01004034 	movhi	r4,256
 1004090:	81bffe04 	addi	r6,r16,-8
 1004094:	3884703a 	and	r2,r7,r2
 1004098:	211f6404 	addi	r4,r4,32144
 100409c:	308b883a 	add	r5,r6,r2
 10040a0:	2a400117 	ldw	r9,4(r5)
 10040a4:	22000217 	ldw	r8,8(r4)
 10040a8:	00ffff04 	movi	r3,-4
 10040ac:	48c6703a 	and	r3,r9,r3
 10040b0:	2a005726 	beq	r5,r8,1004210 <_free_r+0x1ac>
 10040b4:	28c00115 	stw	r3,4(r5)
 10040b8:	39c0004c 	andi	r7,r7,1
 10040bc:	3800091e 	bne	r7,zero,10040e4 <_free_r+0x80>
 10040c0:	823ffe17 	ldw	r8,-8(r16)
 10040c4:	22400204 	addi	r9,r4,8
 10040c8:	320dc83a 	sub	r6,r6,r8
 10040cc:	31c00217 	ldw	r7,8(r6)
 10040d0:	1205883a 	add	r2,r2,r8
 10040d4:	3a406526 	beq	r7,r9,100426c <_free_r+0x208>
 10040d8:	32000317 	ldw	r8,12(r6)
 10040dc:	3a000315 	stw	r8,12(r7)
 10040e0:	41c00215 	stw	r7,8(r8)
 10040e4:	28cf883a 	add	r7,r5,r3
 10040e8:	39c00117 	ldw	r7,4(r7)
 10040ec:	39c0004c 	andi	r7,r7,1
 10040f0:	38003a26 	beq	r7,zero,10041dc <_free_r+0x178>
 10040f4:	10c00054 	ori	r3,r2,1
 10040f8:	30c00115 	stw	r3,4(r6)
 10040fc:	3087883a 	add	r3,r6,r2
 1004100:	18800015 	stw	r2,0(r3)
 1004104:	00c07fc4 	movi	r3,511
 1004108:	18801936 	bltu	r3,r2,1004170 <_free_r+0x10c>
 100410c:	1004d0fa 	srli	r2,r2,3
 1004110:	01c00044 	movi	r7,1
 1004114:	21400117 	ldw	r5,4(r4)
 1004118:	10c00044 	addi	r3,r2,1
 100411c:	18c7883a 	add	r3,r3,r3
 1004120:	1005d0ba 	srai	r2,r2,2
 1004124:	18c7883a 	add	r3,r3,r3
 1004128:	18c7883a 	add	r3,r3,r3
 100412c:	1907883a 	add	r3,r3,r4
 1004130:	3884983a 	sll	r2,r7,r2
 1004134:	19c00017 	ldw	r7,0(r3)
 1004138:	1a3ffe04 	addi	r8,r3,-8
 100413c:	1144b03a 	or	r2,r2,r5
 1004140:	32000315 	stw	r8,12(r6)
 1004144:	31c00215 	stw	r7,8(r6)
 1004148:	20800115 	stw	r2,4(r4)
 100414c:	19800015 	stw	r6,0(r3)
 1004150:	39800315 	stw	r6,12(r7)
 1004154:	8809883a 	mov	r4,r17
 1004158:	dfc00217 	ldw	ra,8(sp)
 100415c:	dc400117 	ldw	r17,4(sp)
 1004160:	dc000017 	ldw	r16,0(sp)
 1004164:	dec00304 	addi	sp,sp,12
 1004168:	10050481 	jmpi	1005048 <__malloc_unlock>
 100416c:	f800283a 	ret
 1004170:	100ad27a 	srli	r5,r2,9
 1004174:	00c00104 	movi	r3,4
 1004178:	19404a36 	bltu	r3,r5,10042a4 <_free_r+0x240>
 100417c:	100ad1ba 	srli	r5,r2,6
 1004180:	28c00e44 	addi	r3,r5,57
 1004184:	18c7883a 	add	r3,r3,r3
 1004188:	29400e04 	addi	r5,r5,56
 100418c:	18c7883a 	add	r3,r3,r3
 1004190:	18c7883a 	add	r3,r3,r3
 1004194:	1909883a 	add	r4,r3,r4
 1004198:	20c00017 	ldw	r3,0(r4)
 100419c:	01c04034 	movhi	r7,256
 10041a0:	213ffe04 	addi	r4,r4,-8
 10041a4:	39df6404 	addi	r7,r7,32144
 10041a8:	20c04426 	beq	r4,r3,10042bc <_free_r+0x258>
 10041ac:	01ffff04 	movi	r7,-4
 10041b0:	19400117 	ldw	r5,4(r3)
 10041b4:	29ca703a 	and	r5,r5,r7
 10041b8:	1140022e 	bgeu	r2,r5,10041c4 <_free_r+0x160>
 10041bc:	18c00217 	ldw	r3,8(r3)
 10041c0:	20fffb1e 	bne	r4,r3,10041b0 <_free_r+0x14c>
 10041c4:	19000317 	ldw	r4,12(r3)
 10041c8:	31000315 	stw	r4,12(r6)
 10041cc:	30c00215 	stw	r3,8(r6)
 10041d0:	21800215 	stw	r6,8(r4)
 10041d4:	19800315 	stw	r6,12(r3)
 10041d8:	003fde06 	br	1004154 <_free_r+0xf0>
 10041dc:	29c00217 	ldw	r7,8(r5)
 10041e0:	10c5883a 	add	r2,r2,r3
 10041e4:	00c04034 	movhi	r3,256
 10041e8:	18df6604 	addi	r3,r3,32152
 10041ec:	38c03b26 	beq	r7,r3,10042dc <_free_r+0x278>
 10041f0:	2a000317 	ldw	r8,12(r5)
 10041f4:	11400054 	ori	r5,r2,1
 10041f8:	3087883a 	add	r3,r6,r2
 10041fc:	3a000315 	stw	r8,12(r7)
 1004200:	41c00215 	stw	r7,8(r8)
 1004204:	31400115 	stw	r5,4(r6)
 1004208:	18800015 	stw	r2,0(r3)
 100420c:	003fbd06 	br	1004104 <_free_r+0xa0>
 1004210:	39c0004c 	andi	r7,r7,1
 1004214:	10c5883a 	add	r2,r2,r3
 1004218:	3800071e 	bne	r7,zero,1004238 <_free_r+0x1d4>
 100421c:	81fffe17 	ldw	r7,-8(r16)
 1004220:	31cdc83a 	sub	r6,r6,r7
 1004224:	30c00317 	ldw	r3,12(r6)
 1004228:	31400217 	ldw	r5,8(r6)
 100422c:	11c5883a 	add	r2,r2,r7
 1004230:	28c00315 	stw	r3,12(r5)
 1004234:	19400215 	stw	r5,8(r3)
 1004238:	10c00054 	ori	r3,r2,1
 100423c:	30c00115 	stw	r3,4(r6)
 1004240:	00c04074 	movhi	r3,257
 1004244:	18e4ed04 	addi	r3,r3,-27724
 1004248:	18c00017 	ldw	r3,0(r3)
 100424c:	21800215 	stw	r6,8(r4)
 1004250:	10ffc036 	bltu	r2,r3,1004154 <_free_r+0xf0>
 1004254:	00804074 	movhi	r2,257
 1004258:	10ab9804 	addi	r2,r2,-20896
 100425c:	11400017 	ldw	r5,0(r2)
 1004260:	8809883a 	mov	r4,r17
 1004264:	1003f400 	call	1003f40 <_malloc_trim_r>
 1004268:	003fba06 	br	1004154 <_free_r+0xf0>
 100426c:	28c9883a 	add	r4,r5,r3
 1004270:	21000117 	ldw	r4,4(r4)
 1004274:	2100004c 	andi	r4,r4,1
 1004278:	2000391e 	bne	r4,zero,1004360 <_free_r+0x2fc>
 100427c:	29c00217 	ldw	r7,8(r5)
 1004280:	29000317 	ldw	r4,12(r5)
 1004284:	1885883a 	add	r2,r3,r2
 1004288:	10c00054 	ori	r3,r2,1
 100428c:	39000315 	stw	r4,12(r7)
 1004290:	21c00215 	stw	r7,8(r4)
 1004294:	30c00115 	stw	r3,4(r6)
 1004298:	308d883a 	add	r6,r6,r2
 100429c:	30800015 	stw	r2,0(r6)
 10042a0:	003fac06 	br	1004154 <_free_r+0xf0>
 10042a4:	00c00504 	movi	r3,20
 10042a8:	19401536 	bltu	r3,r5,1004300 <_free_r+0x29c>
 10042ac:	28c01704 	addi	r3,r5,92
 10042b0:	18c7883a 	add	r3,r3,r3
 10042b4:	294016c4 	addi	r5,r5,91
 10042b8:	003fb406 	br	100418c <_free_r+0x128>
 10042bc:	280bd0ba 	srai	r5,r5,2
 10042c0:	00c00044 	movi	r3,1
 10042c4:	38800117 	ldw	r2,4(r7)
 10042c8:	194a983a 	sll	r5,r3,r5
 10042cc:	2007883a 	mov	r3,r4
 10042d0:	2884b03a 	or	r2,r5,r2
 10042d4:	38800115 	stw	r2,4(r7)
 10042d8:	003fbb06 	br	10041c8 <_free_r+0x164>
 10042dc:	21800515 	stw	r6,20(r4)
 10042e0:	21800415 	stw	r6,16(r4)
 10042e4:	10c00054 	ori	r3,r2,1
 10042e8:	31c00315 	stw	r7,12(r6)
 10042ec:	31c00215 	stw	r7,8(r6)
 10042f0:	30c00115 	stw	r3,4(r6)
 10042f4:	308d883a 	add	r6,r6,r2
 10042f8:	30800015 	stw	r2,0(r6)
 10042fc:	003f9506 	br	1004154 <_free_r+0xf0>
 1004300:	00c01504 	movi	r3,84
 1004304:	19400536 	bltu	r3,r5,100431c <_free_r+0x2b8>
 1004308:	100ad33a 	srli	r5,r2,12
 100430c:	28c01bc4 	addi	r3,r5,111
 1004310:	18c7883a 	add	r3,r3,r3
 1004314:	29401b84 	addi	r5,r5,110
 1004318:	003f9c06 	br	100418c <_free_r+0x128>
 100431c:	00c05504 	movi	r3,340
 1004320:	19400536 	bltu	r3,r5,1004338 <_free_r+0x2d4>
 1004324:	100ad3fa 	srli	r5,r2,15
 1004328:	28c01e04 	addi	r3,r5,120
 100432c:	18c7883a 	add	r3,r3,r3
 1004330:	29401dc4 	addi	r5,r5,119
 1004334:	003f9506 	br	100418c <_free_r+0x128>
 1004338:	00c15504 	movi	r3,1364
 100433c:	19400536 	bltu	r3,r5,1004354 <_free_r+0x2f0>
 1004340:	100ad4ba 	srli	r5,r2,18
 1004344:	28c01f44 	addi	r3,r5,125
 1004348:	18c7883a 	add	r3,r3,r3
 100434c:	29401f04 	addi	r5,r5,124
 1004350:	003f8e06 	br	100418c <_free_r+0x128>
 1004354:	00c03f84 	movi	r3,254
 1004358:	01401f84 	movi	r5,126
 100435c:	003f8b06 	br	100418c <_free_r+0x128>
 1004360:	10c00054 	ori	r3,r2,1
 1004364:	30c00115 	stw	r3,4(r6)
 1004368:	308d883a 	add	r6,r6,r2
 100436c:	30800015 	stw	r2,0(r6)
 1004370:	003f7806 	br	1004154 <_free_r+0xf0>

01004374 <_lseek_r>:
 1004374:	defffd04 	addi	sp,sp,-12
 1004378:	2805883a 	mov	r2,r5
 100437c:	dc000015 	stw	r16,0(sp)
 1004380:	04004074 	movhi	r16,257
 1004384:	dc400115 	stw	r17,4(sp)
 1004388:	300b883a 	mov	r5,r6
 100438c:	842b9504 	addi	r16,r16,-20908
 1004390:	2023883a 	mov	r17,r4
 1004394:	380d883a 	mov	r6,r7
 1004398:	1009883a 	mov	r4,r2
 100439c:	dfc00215 	stw	ra,8(sp)
 10043a0:	80000015 	stw	zero,0(r16)
 10043a4:	1004ed40 	call	1004ed4 <lseek>
 10043a8:	00ffffc4 	movi	r3,-1
 10043ac:	10c00526 	beq	r2,r3,10043c4 <_lseek_r+0x50>
 10043b0:	dfc00217 	ldw	ra,8(sp)
 10043b4:	dc400117 	ldw	r17,4(sp)
 10043b8:	dc000017 	ldw	r16,0(sp)
 10043bc:	dec00304 	addi	sp,sp,12
 10043c0:	f800283a 	ret
 10043c4:	80c00017 	ldw	r3,0(r16)
 10043c8:	183ff926 	beq	r3,zero,10043b0 <_lseek_r+0x3c>
 10043cc:	88c00015 	stw	r3,0(r17)
 10043d0:	003ff706 	br	10043b0 <_lseek_r+0x3c>

010043d4 <__smakebuf_r>:
 10043d4:	2880030b 	ldhu	r2,12(r5)
 10043d8:	10c0008c 	andi	r3,r2,2
 10043dc:	1800411e 	bne	r3,zero,10044e4 <__smakebuf_r+0x110>
 10043e0:	deffec04 	addi	sp,sp,-80
 10043e4:	dc000f15 	stw	r16,60(sp)
 10043e8:	2821883a 	mov	r16,r5
 10043ec:	2940038f 	ldh	r5,14(r5)
 10043f0:	dc401015 	stw	r17,64(sp)
 10043f4:	dfc01315 	stw	ra,76(sp)
 10043f8:	dcc01215 	stw	r19,72(sp)
 10043fc:	dc801115 	stw	r18,68(sp)
 1004400:	2023883a 	mov	r17,r4
 1004404:	28001c16 	blt	r5,zero,1004478 <__smakebuf_r+0xa4>
 1004408:	d80d883a 	mov	r6,sp
 100440c:	10045f00 	call	10045f0 <_fstat_r>
 1004410:	10001816 	blt	r2,zero,1004474 <__smakebuf_r+0xa0>
 1004414:	d8800117 	ldw	r2,4(sp)
 1004418:	00e00014 	movui	r3,32768
 100441c:	10bc000c 	andi	r2,r2,61440
 1004420:	14c80020 	cmpeqi	r19,r2,8192
 1004424:	10c03726 	beq	r2,r3,1004504 <__smakebuf_r+0x130>
 1004428:	80c0030b 	ldhu	r3,12(r16)
 100442c:	18c20014 	ori	r3,r3,2048
 1004430:	80c0030d 	sth	r3,12(r16)
 1004434:	00c80004 	movi	r3,8192
 1004438:	10c0521e 	bne	r2,r3,1004584 <__smakebuf_r+0x1b0>
 100443c:	8140038f 	ldh	r5,14(r16)
 1004440:	8809883a 	mov	r4,r17
 1004444:	100464c0 	call	100464c <_isatty_r>
 1004448:	10004c26 	beq	r2,zero,100457c <__smakebuf_r+0x1a8>
 100444c:	8080030b 	ldhu	r2,12(r16)
 1004450:	80c010c4 	addi	r3,r16,67
 1004454:	80c00015 	stw	r3,0(r16)
 1004458:	10800054 	ori	r2,r2,1
 100445c:	8080030d 	sth	r2,12(r16)
 1004460:	00800044 	movi	r2,1
 1004464:	80c00415 	stw	r3,16(r16)
 1004468:	80800515 	stw	r2,20(r16)
 100446c:	04810004 	movi	r18,1024
 1004470:	00000706 	br	1004490 <__smakebuf_r+0xbc>
 1004474:	8080030b 	ldhu	r2,12(r16)
 1004478:	10c0200c 	andi	r3,r2,128
 100447c:	18001f1e 	bne	r3,zero,10044fc <__smakebuf_r+0x128>
 1004480:	04810004 	movi	r18,1024
 1004484:	10820014 	ori	r2,r2,2048
 1004488:	8080030d 	sth	r2,12(r16)
 100448c:	0027883a 	mov	r19,zero
 1004490:	900b883a 	mov	r5,r18
 1004494:	8809883a 	mov	r4,r17
 1004498:	10025dc0 	call	10025dc <_malloc_r>
 100449c:	10002c26 	beq	r2,zero,1004550 <__smakebuf_r+0x17c>
 10044a0:	80c0030b 	ldhu	r3,12(r16)
 10044a4:	01004034 	movhi	r4,256
 10044a8:	2106e904 	addi	r4,r4,7076
 10044ac:	89000f15 	stw	r4,60(r17)
 10044b0:	18c02014 	ori	r3,r3,128
 10044b4:	80c0030d 	sth	r3,12(r16)
 10044b8:	80800015 	stw	r2,0(r16)
 10044bc:	80800415 	stw	r2,16(r16)
 10044c0:	84800515 	stw	r18,20(r16)
 10044c4:	98001a1e 	bne	r19,zero,1004530 <__smakebuf_r+0x15c>
 10044c8:	dfc01317 	ldw	ra,76(sp)
 10044cc:	dcc01217 	ldw	r19,72(sp)
 10044d0:	dc801117 	ldw	r18,68(sp)
 10044d4:	dc401017 	ldw	r17,64(sp)
 10044d8:	dc000f17 	ldw	r16,60(sp)
 10044dc:	dec01404 	addi	sp,sp,80
 10044e0:	f800283a 	ret
 10044e4:	288010c4 	addi	r2,r5,67
 10044e8:	28800015 	stw	r2,0(r5)
 10044ec:	28800415 	stw	r2,16(r5)
 10044f0:	00800044 	movi	r2,1
 10044f4:	28800515 	stw	r2,20(r5)
 10044f8:	f800283a 	ret
 10044fc:	04801004 	movi	r18,64
 1004500:	003fe006 	br	1004484 <__smakebuf_r+0xb0>
 1004504:	81000a17 	ldw	r4,40(r16)
 1004508:	00c04034 	movhi	r3,256
 100450c:	18ce4a04 	addi	r3,r3,14632
 1004510:	20ffc51e 	bne	r4,r3,1004428 <__smakebuf_r+0x54>
 1004514:	8080030b 	ldhu	r2,12(r16)
 1004518:	04810004 	movi	r18,1024
 100451c:	84801315 	stw	r18,76(r16)
 1004520:	1484b03a 	or	r2,r2,r18
 1004524:	8080030d 	sth	r2,12(r16)
 1004528:	0027883a 	mov	r19,zero
 100452c:	003fd806 	br	1004490 <__smakebuf_r+0xbc>
 1004530:	8140038f 	ldh	r5,14(r16)
 1004534:	8809883a 	mov	r4,r17
 1004538:	100464c0 	call	100464c <_isatty_r>
 100453c:	103fe226 	beq	r2,zero,10044c8 <__smakebuf_r+0xf4>
 1004540:	8080030b 	ldhu	r2,12(r16)
 1004544:	10800054 	ori	r2,r2,1
 1004548:	8080030d 	sth	r2,12(r16)
 100454c:	003fde06 	br	10044c8 <__smakebuf_r+0xf4>
 1004550:	8080030b 	ldhu	r2,12(r16)
 1004554:	10c0800c 	andi	r3,r2,512
 1004558:	183fdb1e 	bne	r3,zero,10044c8 <__smakebuf_r+0xf4>
 100455c:	10800094 	ori	r2,r2,2
 1004560:	80c010c4 	addi	r3,r16,67
 1004564:	8080030d 	sth	r2,12(r16)
 1004568:	00800044 	movi	r2,1
 100456c:	80c00015 	stw	r3,0(r16)
 1004570:	80c00415 	stw	r3,16(r16)
 1004574:	80800515 	stw	r2,20(r16)
 1004578:	003fd306 	br	10044c8 <__smakebuf_r+0xf4>
 100457c:	04810004 	movi	r18,1024
 1004580:	003fc306 	br	1004490 <__smakebuf_r+0xbc>
 1004584:	0027883a 	mov	r19,zero
 1004588:	04810004 	movi	r18,1024
 100458c:	003fc006 	br	1004490 <__smakebuf_r+0xbc>

01004590 <_read_r>:
 1004590:	defffd04 	addi	sp,sp,-12
 1004594:	2805883a 	mov	r2,r5
 1004598:	dc000015 	stw	r16,0(sp)
 100459c:	04004074 	movhi	r16,257
 10045a0:	dc400115 	stw	r17,4(sp)
 10045a4:	300b883a 	mov	r5,r6
 10045a8:	842b9504 	addi	r16,r16,-20908
 10045ac:	2023883a 	mov	r17,r4
 10045b0:	380d883a 	mov	r6,r7
 10045b4:	1009883a 	mov	r4,r2
 10045b8:	dfc00215 	stw	ra,8(sp)
 10045bc:	80000015 	stw	zero,0(r16)
 10045c0:	10050a80 	call	10050a8 <read>
 10045c4:	00ffffc4 	movi	r3,-1
 10045c8:	10c00526 	beq	r2,r3,10045e0 <_read_r+0x50>
 10045cc:	dfc00217 	ldw	ra,8(sp)
 10045d0:	dc400117 	ldw	r17,4(sp)
 10045d4:	dc000017 	ldw	r16,0(sp)
 10045d8:	dec00304 	addi	sp,sp,12
 10045dc:	f800283a 	ret
 10045e0:	80c00017 	ldw	r3,0(r16)
 10045e4:	183ff926 	beq	r3,zero,10045cc <_read_r+0x3c>
 10045e8:	88c00015 	stw	r3,0(r17)
 10045ec:	003ff706 	br	10045cc <_read_r+0x3c>

010045f0 <_fstat_r>:
 10045f0:	defffd04 	addi	sp,sp,-12
 10045f4:	2805883a 	mov	r2,r5
 10045f8:	dc000015 	stw	r16,0(sp)
 10045fc:	04004074 	movhi	r16,257
 1004600:	dc400115 	stw	r17,4(sp)
 1004604:	842b9504 	addi	r16,r16,-20908
 1004608:	2023883a 	mov	r17,r4
 100460c:	300b883a 	mov	r5,r6
 1004610:	1009883a 	mov	r4,r2
 1004614:	dfc00215 	stw	ra,8(sp)
 1004618:	80000015 	stw	zero,0(r16)
 100461c:	1004a280 	call	1004a28 <fstat>
 1004620:	00ffffc4 	movi	r3,-1
 1004624:	10c00526 	beq	r2,r3,100463c <_fstat_r+0x4c>
 1004628:	dfc00217 	ldw	ra,8(sp)
 100462c:	dc400117 	ldw	r17,4(sp)
 1004630:	dc000017 	ldw	r16,0(sp)
 1004634:	dec00304 	addi	sp,sp,12
 1004638:	f800283a 	ret
 100463c:	80c00017 	ldw	r3,0(r16)
 1004640:	183ff926 	beq	r3,zero,1004628 <_fstat_r+0x38>
 1004644:	88c00015 	stw	r3,0(r17)
 1004648:	003ff706 	br	1004628 <_fstat_r+0x38>

0100464c <_isatty_r>:
 100464c:	defffd04 	addi	sp,sp,-12
 1004650:	dc000015 	stw	r16,0(sp)
 1004654:	04004074 	movhi	r16,257
 1004658:	dc400115 	stw	r17,4(sp)
 100465c:	842b9504 	addi	r16,r16,-20908
 1004660:	2023883a 	mov	r17,r4
 1004664:	2809883a 	mov	r4,r5
 1004668:	dfc00215 	stw	ra,8(sp)
 100466c:	80000015 	stw	zero,0(r16)
 1004670:	1004d080 	call	1004d08 <isatty>
 1004674:	00ffffc4 	movi	r3,-1
 1004678:	10c00526 	beq	r2,r3,1004690 <_isatty_r+0x44>
 100467c:	dfc00217 	ldw	ra,8(sp)
 1004680:	dc400117 	ldw	r17,4(sp)
 1004684:	dc000017 	ldw	r16,0(sp)
 1004688:	dec00304 	addi	sp,sp,12
 100468c:	f800283a 	ret
 1004690:	80c00017 	ldw	r3,0(r16)
 1004694:	183ff926 	beq	r3,zero,100467c <_isatty_r+0x30>
 1004698:	88c00015 	stw	r3,0(r17)
 100469c:	003ff706 	br	100467c <_isatty_r+0x30>

010046a0 <__muldi3>:
 10046a0:	223fffcc 	andi	r8,r4,65535
 10046a4:	2006d43a 	srli	r3,r4,16
 10046a8:	32bfffcc 	andi	r10,r6,65535
 10046ac:	3012d43a 	srli	r9,r6,16
 10046b0:	4297383a 	mul	r11,r8,r10
 10046b4:	1a95383a 	mul	r10,r3,r10
 10046b8:	4251383a 	mul	r8,r8,r9
 10046bc:	5804d43a 	srli	r2,r11,16
 10046c0:	4291883a 	add	r8,r8,r10
 10046c4:	1205883a 	add	r2,r2,r8
 10046c8:	1a51383a 	mul	r8,r3,r9
 10046cc:	1280022e 	bgeu	r2,r10,10046d8 <__muldi3+0x38>
 10046d0:	00c00074 	movhi	r3,1
 10046d4:	40d1883a 	add	r8,r8,r3
 10046d8:	1006d43a 	srli	r3,r2,16
 10046dc:	21cf383a 	mul	r7,r4,r7
 10046e0:	314b383a 	mul	r5,r6,r5
 10046e4:	1004943a 	slli	r2,r2,16
 10046e8:	1a11883a 	add	r8,r3,r8
 10046ec:	5affffcc 	andi	r11,r11,65535
 10046f0:	3947883a 	add	r3,r7,r5
 10046f4:	12c5883a 	add	r2,r2,r11
 10046f8:	1a07883a 	add	r3,r3,r8
 10046fc:	f800283a 	ret

01004700 <__divsi3>:
 1004700:	20001b16 	blt	r4,zero,1004770 <__divsi3+0x70>
 1004704:	000f883a 	mov	r7,zero
 1004708:	28001616 	blt	r5,zero,1004764 <__divsi3+0x64>
 100470c:	200d883a 	mov	r6,r4
 1004710:	29001a2e 	bgeu	r5,r4,100477c <__divsi3+0x7c>
 1004714:	00800804 	movi	r2,32
 1004718:	00c00044 	movi	r3,1
 100471c:	00000106 	br	1004724 <__divsi3+0x24>
 1004720:	10000d26 	beq	r2,zero,1004758 <__divsi3+0x58>
 1004724:	294b883a 	add	r5,r5,r5
 1004728:	10bfffc4 	addi	r2,r2,-1
 100472c:	18c7883a 	add	r3,r3,r3
 1004730:	293ffb36 	bltu	r5,r4,1004720 <__divsi3+0x20>
 1004734:	0005883a 	mov	r2,zero
 1004738:	18000726 	beq	r3,zero,1004758 <__divsi3+0x58>
 100473c:	0005883a 	mov	r2,zero
 1004740:	31400236 	bltu	r6,r5,100474c <__divsi3+0x4c>
 1004744:	314dc83a 	sub	r6,r6,r5
 1004748:	10c4b03a 	or	r2,r2,r3
 100474c:	1806d07a 	srli	r3,r3,1
 1004750:	280ad07a 	srli	r5,r5,1
 1004754:	183ffa1e 	bne	r3,zero,1004740 <__divsi3+0x40>
 1004758:	38000126 	beq	r7,zero,1004760 <__divsi3+0x60>
 100475c:	0085c83a 	sub	r2,zero,r2
 1004760:	f800283a 	ret
 1004764:	014bc83a 	sub	r5,zero,r5
 1004768:	39c0005c 	xori	r7,r7,1
 100476c:	003fe706 	br	100470c <__divsi3+0xc>
 1004770:	0109c83a 	sub	r4,zero,r4
 1004774:	01c00044 	movi	r7,1
 1004778:	003fe306 	br	1004708 <__divsi3+0x8>
 100477c:	00c00044 	movi	r3,1
 1004780:	003fee06 	br	100473c <__divsi3+0x3c>

01004784 <__modsi3>:
 1004784:	20001716 	blt	r4,zero,10047e4 <__modsi3+0x60>
 1004788:	000f883a 	mov	r7,zero
 100478c:	2005883a 	mov	r2,r4
 1004790:	28001216 	blt	r5,zero,10047dc <__modsi3+0x58>
 1004794:	2900162e 	bgeu	r5,r4,10047f0 <__modsi3+0x6c>
 1004798:	01800804 	movi	r6,32
 100479c:	00c00044 	movi	r3,1
 10047a0:	00000106 	br	10047a8 <__modsi3+0x24>
 10047a4:	30000a26 	beq	r6,zero,10047d0 <__modsi3+0x4c>
 10047a8:	294b883a 	add	r5,r5,r5
 10047ac:	31bfffc4 	addi	r6,r6,-1
 10047b0:	18c7883a 	add	r3,r3,r3
 10047b4:	293ffb36 	bltu	r5,r4,10047a4 <__modsi3+0x20>
 10047b8:	18000526 	beq	r3,zero,10047d0 <__modsi3+0x4c>
 10047bc:	1806d07a 	srli	r3,r3,1
 10047c0:	11400136 	bltu	r2,r5,10047c8 <__modsi3+0x44>
 10047c4:	1145c83a 	sub	r2,r2,r5
 10047c8:	280ad07a 	srli	r5,r5,1
 10047cc:	183ffb1e 	bne	r3,zero,10047bc <__modsi3+0x38>
 10047d0:	38000126 	beq	r7,zero,10047d8 <__modsi3+0x54>
 10047d4:	0085c83a 	sub	r2,zero,r2
 10047d8:	f800283a 	ret
 10047dc:	014bc83a 	sub	r5,zero,r5
 10047e0:	003fec06 	br	1004794 <__modsi3+0x10>
 10047e4:	0109c83a 	sub	r4,zero,r4
 10047e8:	01c00044 	movi	r7,1
 10047ec:	003fe706 	br	100478c <__modsi3+0x8>
 10047f0:	00c00044 	movi	r3,1
 10047f4:	003ff106 	br	10047bc <__modsi3+0x38>

010047f8 <__udivsi3>:
 10047f8:	200d883a 	mov	r6,r4
 10047fc:	2900152e 	bgeu	r5,r4,1004854 <__udivsi3+0x5c>
 1004800:	28001416 	blt	r5,zero,1004854 <__udivsi3+0x5c>
 1004804:	00800804 	movi	r2,32
 1004808:	00c00044 	movi	r3,1
 100480c:	00000206 	br	1004818 <__udivsi3+0x20>
 1004810:	10000e26 	beq	r2,zero,100484c <__udivsi3+0x54>
 1004814:	28000516 	blt	r5,zero,100482c <__udivsi3+0x34>
 1004818:	294b883a 	add	r5,r5,r5
 100481c:	10bfffc4 	addi	r2,r2,-1
 1004820:	18c7883a 	add	r3,r3,r3
 1004824:	293ffa36 	bltu	r5,r4,1004810 <__udivsi3+0x18>
 1004828:	18000826 	beq	r3,zero,100484c <__udivsi3+0x54>
 100482c:	0005883a 	mov	r2,zero
 1004830:	31400236 	bltu	r6,r5,100483c <__udivsi3+0x44>
 1004834:	314dc83a 	sub	r6,r6,r5
 1004838:	10c4b03a 	or	r2,r2,r3
 100483c:	1806d07a 	srli	r3,r3,1
 1004840:	280ad07a 	srli	r5,r5,1
 1004844:	183ffa1e 	bne	r3,zero,1004830 <__udivsi3+0x38>
 1004848:	f800283a 	ret
 100484c:	0005883a 	mov	r2,zero
 1004850:	f800283a 	ret
 1004854:	00c00044 	movi	r3,1
 1004858:	003ff406 	br	100482c <__udivsi3+0x34>

0100485c <__umodsi3>:
 100485c:	2005883a 	mov	r2,r4
 1004860:	2900122e 	bgeu	r5,r4,10048ac <__umodsi3+0x50>
 1004864:	28001116 	blt	r5,zero,10048ac <__umodsi3+0x50>
 1004868:	01800804 	movi	r6,32
 100486c:	00c00044 	movi	r3,1
 1004870:	00000206 	br	100487c <__umodsi3+0x20>
 1004874:	30000c26 	beq	r6,zero,10048a8 <__umodsi3+0x4c>
 1004878:	28000516 	blt	r5,zero,1004890 <__umodsi3+0x34>
 100487c:	294b883a 	add	r5,r5,r5
 1004880:	31bfffc4 	addi	r6,r6,-1
 1004884:	18c7883a 	add	r3,r3,r3
 1004888:	293ffa36 	bltu	r5,r4,1004874 <__umodsi3+0x18>
 100488c:	18000626 	beq	r3,zero,10048a8 <__umodsi3+0x4c>
 1004890:	1806d07a 	srli	r3,r3,1
 1004894:	11400136 	bltu	r2,r5,100489c <__umodsi3+0x40>
 1004898:	1145c83a 	sub	r2,r2,r5
 100489c:	280ad07a 	srli	r5,r5,1
 10048a0:	183ffb1e 	bne	r3,zero,1004890 <__umodsi3+0x34>
 10048a4:	f800283a 	ret
 10048a8:	f800283a 	ret
 10048ac:	00c00044 	movi	r3,1
 10048b0:	003ff706 	br	1004890 <__umodsi3+0x34>

010048b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10048b4:	defffe04 	addi	sp,sp,-8
 10048b8:	dfc00115 	stw	ra,4(sp)
 10048bc:	df000015 	stw	fp,0(sp)
 10048c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10048c4:	d0a00b17 	ldw	r2,-32724(gp)
 10048c8:	10000326 	beq	r2,zero,10048d8 <alt_get_errno+0x24>
 10048cc:	d0a00b17 	ldw	r2,-32724(gp)
 10048d0:	103ee83a 	callr	r2
 10048d4:	00000106 	br	10048dc <alt_get_errno+0x28>
 10048d8:	d0a6ad04 	addi	r2,gp,-25932
}
 10048dc:	e037883a 	mov	sp,fp
 10048e0:	dfc00117 	ldw	ra,4(sp)
 10048e4:	df000017 	ldw	fp,0(sp)
 10048e8:	dec00204 	addi	sp,sp,8
 10048ec:	f800283a 	ret

010048f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 10048f0:	defffb04 	addi	sp,sp,-20
 10048f4:	dfc00415 	stw	ra,16(sp)
 10048f8:	df000315 	stw	fp,12(sp)
 10048fc:	df000304 	addi	fp,sp,12
 1004900:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1004904:	e0bfff17 	ldw	r2,-4(fp)
 1004908:	10000616 	blt	r2,zero,1004924 <close+0x34>
 100490c:	e0bfff17 	ldw	r2,-4(fp)
 1004910:	10c00324 	muli	r3,r2,12
 1004914:	00804074 	movhi	r2,257
 1004918:	10a07004 	addi	r2,r2,-32320
 100491c:	1885883a 	add	r2,r3,r2
 1004920:	00000106 	br	1004928 <close+0x38>
 1004924:	0005883a 	mov	r2,zero
 1004928:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 100492c:	e0bffd17 	ldw	r2,-12(fp)
 1004930:	10001926 	beq	r2,zero,1004998 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1004934:	e0bffd17 	ldw	r2,-12(fp)
 1004938:	10800017 	ldw	r2,0(r2)
 100493c:	10800417 	ldw	r2,16(r2)
 1004940:	10000626 	beq	r2,zero,100495c <close+0x6c>
 1004944:	e0bffd17 	ldw	r2,-12(fp)
 1004948:	10800017 	ldw	r2,0(r2)
 100494c:	10800417 	ldw	r2,16(r2)
 1004950:	e13ffd17 	ldw	r4,-12(fp)
 1004954:	103ee83a 	callr	r2
 1004958:	00000106 	br	1004960 <close+0x70>
 100495c:	0005883a 	mov	r2,zero
 1004960:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1004964:	e13fff17 	ldw	r4,-4(fp)
 1004968:	10051a40 	call	10051a4 <alt_release_fd>
    if (rval < 0)
 100496c:	e0bffe17 	ldw	r2,-8(fp)
 1004970:	1000070e 	bge	r2,zero,1004990 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 1004974:	10048b40 	call	10048b4 <alt_get_errno>
 1004978:	1007883a 	mov	r3,r2
 100497c:	e0bffe17 	ldw	r2,-8(fp)
 1004980:	0085c83a 	sub	r2,zero,r2
 1004984:	18800015 	stw	r2,0(r3)
      return -1;
 1004988:	00bfffc4 	movi	r2,-1
 100498c:	00000706 	br	10049ac <close+0xbc>
    }
    return 0;
 1004990:	0005883a 	mov	r2,zero
 1004994:	00000506 	br	10049ac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1004998:	10048b40 	call	10048b4 <alt_get_errno>
 100499c:	1007883a 	mov	r3,r2
 10049a0:	00801444 	movi	r2,81
 10049a4:	18800015 	stw	r2,0(r3)
    return -1;
 10049a8:	00bfffc4 	movi	r2,-1
  }
}
 10049ac:	e037883a 	mov	sp,fp
 10049b0:	dfc00117 	ldw	ra,4(sp)
 10049b4:	df000017 	ldw	fp,0(sp)
 10049b8:	dec00204 	addi	sp,sp,8
 10049bc:	f800283a 	ret

010049c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 10049c0:	defffc04 	addi	sp,sp,-16
 10049c4:	df000315 	stw	fp,12(sp)
 10049c8:	df000304 	addi	fp,sp,12
 10049cc:	e13ffd15 	stw	r4,-12(fp)
 10049d0:	e17ffe15 	stw	r5,-8(fp)
 10049d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 10049d8:	e0bfff17 	ldw	r2,-4(fp)
}
 10049dc:	e037883a 	mov	sp,fp
 10049e0:	df000017 	ldw	fp,0(sp)
 10049e4:	dec00104 	addi	sp,sp,4
 10049e8:	f800283a 	ret

010049ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10049ec:	defffe04 	addi	sp,sp,-8
 10049f0:	dfc00115 	stw	ra,4(sp)
 10049f4:	df000015 	stw	fp,0(sp)
 10049f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10049fc:	d0a00b17 	ldw	r2,-32724(gp)
 1004a00:	10000326 	beq	r2,zero,1004a10 <alt_get_errno+0x24>
 1004a04:	d0a00b17 	ldw	r2,-32724(gp)
 1004a08:	103ee83a 	callr	r2
 1004a0c:	00000106 	br	1004a14 <alt_get_errno+0x28>
 1004a10:	d0a6ad04 	addi	r2,gp,-25932
}
 1004a14:	e037883a 	mov	sp,fp
 1004a18:	dfc00117 	ldw	ra,4(sp)
 1004a1c:	df000017 	ldw	fp,0(sp)
 1004a20:	dec00204 	addi	sp,sp,8
 1004a24:	f800283a 	ret

01004a28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1004a28:	defffb04 	addi	sp,sp,-20
 1004a2c:	dfc00415 	stw	ra,16(sp)
 1004a30:	df000315 	stw	fp,12(sp)
 1004a34:	df000304 	addi	fp,sp,12
 1004a38:	e13ffe15 	stw	r4,-8(fp)
 1004a3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004a40:	e0bffe17 	ldw	r2,-8(fp)
 1004a44:	10000616 	blt	r2,zero,1004a60 <fstat+0x38>
 1004a48:	e0bffe17 	ldw	r2,-8(fp)
 1004a4c:	10c00324 	muli	r3,r2,12
 1004a50:	00804074 	movhi	r2,257
 1004a54:	10a07004 	addi	r2,r2,-32320
 1004a58:	1885883a 	add	r2,r3,r2
 1004a5c:	00000106 	br	1004a64 <fstat+0x3c>
 1004a60:	0005883a 	mov	r2,zero
 1004a64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 1004a68:	e0bffd17 	ldw	r2,-12(fp)
 1004a6c:	10001026 	beq	r2,zero,1004ab0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1004a70:	e0bffd17 	ldw	r2,-12(fp)
 1004a74:	10800017 	ldw	r2,0(r2)
 1004a78:	10800817 	ldw	r2,32(r2)
 1004a7c:	10000726 	beq	r2,zero,1004a9c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 1004a80:	e0bffd17 	ldw	r2,-12(fp)
 1004a84:	10800017 	ldw	r2,0(r2)
 1004a88:	10800817 	ldw	r2,32(r2)
 1004a8c:	e17fff17 	ldw	r5,-4(fp)
 1004a90:	e13ffd17 	ldw	r4,-12(fp)
 1004a94:	103ee83a 	callr	r2
 1004a98:	00000a06 	br	1004ac4 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1004a9c:	e0bfff17 	ldw	r2,-4(fp)
 1004aa0:	00c80004 	movi	r3,8192
 1004aa4:	10c00115 	stw	r3,4(r2)
      return 0;
 1004aa8:	0005883a 	mov	r2,zero
 1004aac:	00000506 	br	1004ac4 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1004ab0:	10049ec0 	call	10049ec <alt_get_errno>
 1004ab4:	1007883a 	mov	r3,r2
 1004ab8:	00801444 	movi	r2,81
 1004abc:	18800015 	stw	r2,0(r3)
    return -1;
 1004ac0:	00bfffc4 	movi	r2,-1
  }
}
 1004ac4:	e037883a 	mov	sp,fp
 1004ac8:	dfc00117 	ldw	ra,4(sp)
 1004acc:	df000017 	ldw	fp,0(sp)
 1004ad0:	dec00204 	addi	sp,sp,8
 1004ad4:	f800283a 	ret

01004ad8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 1004ad8:	defff404 	addi	sp,sp,-48
 1004adc:	dfc00b15 	stw	ra,44(sp)
 1004ae0:	df000a15 	stw	fp,40(sp)
 1004ae4:	dd000915 	stw	r20,36(sp)
 1004ae8:	dcc00815 	stw	r19,32(sp)
 1004aec:	dc800715 	stw	r18,28(sp)
 1004af0:	dc400615 	stw	r17,24(sp)
 1004af4:	dc000515 	stw	r16,20(sp)
 1004af8:	df000a04 	addi	fp,sp,40
 1004afc:	e13ff915 	stw	r4,-28(fp)
 1004b00:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 1004b04:	e0bffa17 	ldw	r2,-24(fp)
 1004b08:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1004b0c:	d0a6b917 	ldw	r2,-25884(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 1004b10:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1004b14:	d0a6b817 	ldw	r2,-25888(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 1004b18:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 1004b1c:	e0bff817 	ldw	r2,-32(fp)
 1004b20:	10005f26 	beq	r2,zero,1004ca0 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 1004b24:	d0a6b317 	ldw	r2,-25908(gp)
 1004b28:	1029883a 	mov	r20,r2
 1004b2c:	e17ff817 	ldw	r5,-32(fp)
 1004b30:	e13ff717 	ldw	r4,-36(fp)
 1004b34:	10047f80 	call	10047f8 <__udivsi3>
 1004b38:	a085883a 	add	r2,r20,r2
 1004b3c:	1007883a 	mov	r3,r2
 1004b40:	e0bff917 	ldw	r2,-28(fp)
 1004b44:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 1004b48:	d0a6b417 	ldw	r2,-25904(gp)
 1004b4c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 1004b50:	e0bff717 	ldw	r2,-36(fp)
 1004b54:	1021883a 	mov	r16,r2
 1004b58:	0023883a 	mov	r17,zero
 1004b5c:	e17ff817 	ldw	r5,-32(fp)
 1004b60:	010003f4 	movhi	r4,15
 1004b64:	21109004 	addi	r4,r4,16960
 1004b68:	10047f80 	call	10047f8 <__udivsi3>
 1004b6c:	1025883a 	mov	r18,r2
 1004b70:	0027883a 	mov	r19,zero
 1004b74:	900d883a 	mov	r6,r18
 1004b78:	980f883a 	mov	r7,r19
 1004b7c:	8009883a 	mov	r4,r16
 1004b80:	880b883a 	mov	r5,r17
 1004b84:	10046a00 	call	10046a0 <__muldi3>
 1004b88:	1009883a 	mov	r4,r2
 1004b8c:	180b883a 	mov	r5,r3
 1004b90:	2005883a 	mov	r2,r4
 1004b94:	2807883a 	mov	r3,r5
 1004b98:	018003f4 	movhi	r6,15
 1004b9c:	31909004 	addi	r6,r6,16960
 1004ba0:	000f883a 	mov	r7,zero
 1004ba4:	1009883a 	mov	r4,r2
 1004ba8:	180b883a 	mov	r5,r3
 1004bac:	10072ac0 	call	10072ac <__umoddi3>
 1004bb0:	1009883a 	mov	r4,r2
 1004bb4:	180b883a 	mov	r5,r3
 1004bb8:	2005883a 	mov	r2,r4
 1004bbc:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 1004bc0:	a085883a 	add	r2,r20,r2
 1004bc4:	1007883a 	mov	r3,r2
 1004bc8:	e0bff917 	ldw	r2,-28(fp)
 1004bcc:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 1004bd0:	00001406 	br	1004c24 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 1004bd4:	e0bff917 	ldw	r2,-28(fp)
 1004bd8:	10800017 	ldw	r2,0(r2)
 1004bdc:	00800516 	blt	zero,r2,1004bf4 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 1004be0:	e0bff917 	ldw	r2,-28(fp)
 1004be4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 1004be8:	e0bff917 	ldw	r2,-28(fp)
 1004bec:	10000115 	stw	zero,4(r2)
          break;
 1004bf0:	00000f06 	br	1004c30 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 1004bf4:	e0bff917 	ldw	r2,-28(fp)
 1004bf8:	10800017 	ldw	r2,0(r2)
 1004bfc:	10ffffc4 	addi	r3,r2,-1
 1004c00:	e0bff917 	ldw	r2,-28(fp)
 1004c04:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 1004c08:	e0bff917 	ldw	r2,-28(fp)
 1004c0c:	10c00117 	ldw	r3,4(r2)
 1004c10:	008003f4 	movhi	r2,15
 1004c14:	10909004 	addi	r2,r2,16960
 1004c18:	1887883a 	add	r3,r3,r2
 1004c1c:	e0bff917 	ldw	r2,-28(fp)
 1004c20:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 1004c24:	e0bff917 	ldw	r2,-28(fp)
 1004c28:	10800117 	ldw	r2,4(r2)
 1004c2c:	103fe916 	blt	r2,zero,1004bd4 <gettimeofday+0xfc>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 1004c30:	00000c06 	br	1004c64 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 1004c34:	e0bff917 	ldw	r2,-28(fp)
 1004c38:	10800017 	ldw	r2,0(r2)
 1004c3c:	10c00044 	addi	r3,r2,1
 1004c40:	e0bff917 	ldw	r2,-28(fp)
 1004c44:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 1004c48:	e0bff917 	ldw	r2,-28(fp)
 1004c4c:	10c00117 	ldw	r3,4(r2)
 1004c50:	00bffc74 	movhi	r2,65521
 1004c54:	10af7004 	addi	r2,r2,-16960
 1004c58:	1887883a 	add	r3,r3,r2
 1004c5c:	e0bff917 	ldw	r2,-28(fp)
 1004c60:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 1004c64:	e0bff917 	ldw	r2,-28(fp)
 1004c68:	10c00117 	ldw	r3,4(r2)
 1004c6c:	008003f4 	movhi	r2,15
 1004c70:	10908fc4 	addi	r2,r2,16959
 1004c74:	10ffef16 	blt	r2,r3,1004c34 <gettimeofday+0x15c>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 1004c78:	e0bff617 	ldw	r2,-40(fp)
 1004c7c:	10000626 	beq	r2,zero,1004c98 <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 1004c80:	d0e6b117 	ldw	r3,-25916(gp)
 1004c84:	e0bff617 	ldw	r2,-40(fp)
 1004c88:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 1004c8c:	d0e6b217 	ldw	r3,-25912(gp)
 1004c90:	e0bff617 	ldw	r2,-40(fp)
 1004c94:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 1004c98:	0005883a 	mov	r2,zero
 1004c9c:	00000106 	br	1004ca4 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 1004ca0:	00bfde84 	movi	r2,-134
}
 1004ca4:	e6fffb04 	addi	sp,fp,-20
 1004ca8:	dfc00617 	ldw	ra,24(sp)
 1004cac:	df000517 	ldw	fp,20(sp)
 1004cb0:	dd000417 	ldw	r20,16(sp)
 1004cb4:	dcc00317 	ldw	r19,12(sp)
 1004cb8:	dc800217 	ldw	r18,8(sp)
 1004cbc:	dc400117 	ldw	r17,4(sp)
 1004cc0:	dc000017 	ldw	r16,0(sp)
 1004cc4:	dec00704 	addi	sp,sp,28
 1004cc8:	f800283a 	ret

01004ccc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004ccc:	defffe04 	addi	sp,sp,-8
 1004cd0:	dfc00115 	stw	ra,4(sp)
 1004cd4:	df000015 	stw	fp,0(sp)
 1004cd8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004cdc:	d0a00b17 	ldw	r2,-32724(gp)
 1004ce0:	10000326 	beq	r2,zero,1004cf0 <alt_get_errno+0x24>
 1004ce4:	d0a00b17 	ldw	r2,-32724(gp)
 1004ce8:	103ee83a 	callr	r2
 1004cec:	00000106 	br	1004cf4 <alt_get_errno+0x28>
 1004cf0:	d0a6ad04 	addi	r2,gp,-25932
}
 1004cf4:	e037883a 	mov	sp,fp
 1004cf8:	dfc00117 	ldw	ra,4(sp)
 1004cfc:	df000017 	ldw	fp,0(sp)
 1004d00:	dec00204 	addi	sp,sp,8
 1004d04:	f800283a 	ret

01004d08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1004d08:	deffed04 	addi	sp,sp,-76
 1004d0c:	dfc01215 	stw	ra,72(sp)
 1004d10:	df001115 	stw	fp,68(sp)
 1004d14:	df001104 	addi	fp,sp,68
 1004d18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004d1c:	e0bfff17 	ldw	r2,-4(fp)
 1004d20:	10000616 	blt	r2,zero,1004d3c <isatty+0x34>
 1004d24:	e0bfff17 	ldw	r2,-4(fp)
 1004d28:	10c00324 	muli	r3,r2,12
 1004d2c:	00804074 	movhi	r2,257
 1004d30:	10a07004 	addi	r2,r2,-32320
 1004d34:	1885883a 	add	r2,r3,r2
 1004d38:	00000106 	br	1004d40 <isatty+0x38>
 1004d3c:	0005883a 	mov	r2,zero
 1004d40:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 1004d44:	e0bfef17 	ldw	r2,-68(fp)
 1004d48:	10000e26 	beq	r2,zero,1004d84 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1004d4c:	e0bfef17 	ldw	r2,-68(fp)
 1004d50:	10800017 	ldw	r2,0(r2)
 1004d54:	10800817 	ldw	r2,32(r2)
 1004d58:	1000021e 	bne	r2,zero,1004d64 <isatty+0x5c>
    {
      return 1;
 1004d5c:	00800044 	movi	r2,1
 1004d60:	00000d06 	br	1004d98 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1004d64:	e0bff004 	addi	r2,fp,-64
 1004d68:	100b883a 	mov	r5,r2
 1004d6c:	e13fff17 	ldw	r4,-4(fp)
 1004d70:	1004a280 	call	1004a28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1004d74:	e0bff117 	ldw	r2,-60(fp)
 1004d78:	10880020 	cmpeqi	r2,r2,8192
 1004d7c:	10803fcc 	andi	r2,r2,255
 1004d80:	00000506 	br	1004d98 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1004d84:	1004ccc0 	call	1004ccc <alt_get_errno>
 1004d88:	1007883a 	mov	r3,r2
 1004d8c:	00801444 	movi	r2,81
 1004d90:	18800015 	stw	r2,0(r3)
    return 0;
 1004d94:	0005883a 	mov	r2,zero
  }
}
 1004d98:	e037883a 	mov	sp,fp
 1004d9c:	dfc00117 	ldw	ra,4(sp)
 1004da0:	df000017 	ldw	fp,0(sp)
 1004da4:	dec00204 	addi	sp,sp,8
 1004da8:	f800283a 	ret

01004dac <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1004dac:	defffc04 	addi	sp,sp,-16
 1004db0:	df000315 	stw	fp,12(sp)
 1004db4:	df000304 	addi	fp,sp,12
 1004db8:	e13ffd15 	stw	r4,-12(fp)
 1004dbc:	e17ffe15 	stw	r5,-8(fp)
 1004dc0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1004dc4:	e0fffe17 	ldw	r3,-8(fp)
 1004dc8:	e0bffd17 	ldw	r2,-12(fp)
 1004dcc:	18800c26 	beq	r3,r2,1004e00 <alt_load_section+0x54>
  {
    while( to != end )
 1004dd0:	00000806 	br	1004df4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 1004dd4:	e0bffe17 	ldw	r2,-8(fp)
 1004dd8:	10c00104 	addi	r3,r2,4
 1004ddc:	e0fffe15 	stw	r3,-8(fp)
 1004de0:	e0fffd17 	ldw	r3,-12(fp)
 1004de4:	19000104 	addi	r4,r3,4
 1004de8:	e13ffd15 	stw	r4,-12(fp)
 1004dec:	18c00017 	ldw	r3,0(r3)
 1004df0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1004df4:	e0fffe17 	ldw	r3,-8(fp)
 1004df8:	e0bfff17 	ldw	r2,-4(fp)
 1004dfc:	18bff51e 	bne	r3,r2,1004dd4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1004e00:	0001883a 	nop
 1004e04:	e037883a 	mov	sp,fp
 1004e08:	df000017 	ldw	fp,0(sp)
 1004e0c:	dec00104 	addi	sp,sp,4
 1004e10:	f800283a 	ret

01004e14 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1004e14:	defffe04 	addi	sp,sp,-8
 1004e18:	dfc00115 	stw	ra,4(sp)
 1004e1c:	df000015 	stw	fp,0(sp)
 1004e20:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1004e24:	01804074 	movhi	r6,257
 1004e28:	31a4f804 	addi	r6,r6,-27680
 1004e2c:	01404034 	movhi	r5,256
 1004e30:	295e5b04 	addi	r5,r5,31084
 1004e34:	01004074 	movhi	r4,257
 1004e38:	2124f804 	addi	r4,r4,-27680
 1004e3c:	1004dac0 	call	1004dac <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1004e40:	01804034 	movhi	r6,256
 1004e44:	31809104 	addi	r6,r6,580
 1004e48:	01404034 	movhi	r5,256
 1004e4c:	29400804 	addi	r5,r5,32
 1004e50:	01004034 	movhi	r4,256
 1004e54:	21000804 	addi	r4,r4,32
 1004e58:	1004dac0 	call	1004dac <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1004e5c:	01804034 	movhi	r6,256
 1004e60:	319e5b04 	addi	r6,r6,31084
 1004e64:	01404034 	movhi	r5,256
 1004e68:	295e0604 	addi	r5,r5,30744
 1004e6c:	01004034 	movhi	r4,256
 1004e70:	211e0604 	addi	r4,r4,30744
 1004e74:	1004dac0 	call	1004dac <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1004e78:	10063700 	call	1006370 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1004e7c:	10065580 	call	1006558 <alt_icache_flush_all>
}
 1004e80:	0001883a 	nop
 1004e84:	e037883a 	mov	sp,fp
 1004e88:	dfc00117 	ldw	ra,4(sp)
 1004e8c:	df000017 	ldw	fp,0(sp)
 1004e90:	dec00204 	addi	sp,sp,8
 1004e94:	f800283a 	ret

01004e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1004e98:	defffe04 	addi	sp,sp,-8
 1004e9c:	dfc00115 	stw	ra,4(sp)
 1004ea0:	df000015 	stw	fp,0(sp)
 1004ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 1004ea8:	d0a00b17 	ldw	r2,-32724(gp)
 1004eac:	10000326 	beq	r2,zero,1004ebc <alt_get_errno+0x24>
 1004eb0:	d0a00b17 	ldw	r2,-32724(gp)
 1004eb4:	103ee83a 	callr	r2
 1004eb8:	00000106 	br	1004ec0 <alt_get_errno+0x28>
 1004ebc:	d0a6ad04 	addi	r2,gp,-25932
}
 1004ec0:	e037883a 	mov	sp,fp
 1004ec4:	dfc00117 	ldw	ra,4(sp)
 1004ec8:	df000017 	ldw	fp,0(sp)
 1004ecc:	dec00204 	addi	sp,sp,8
 1004ed0:	f800283a 	ret

01004ed4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1004ed4:	defff904 	addi	sp,sp,-28
 1004ed8:	dfc00615 	stw	ra,24(sp)
 1004edc:	df000515 	stw	fp,20(sp)
 1004ee0:	df000504 	addi	fp,sp,20
 1004ee4:	e13ffd15 	stw	r4,-12(fp)
 1004ee8:	e17ffe15 	stw	r5,-8(fp)
 1004eec:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1004ef0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1004ef4:	e0bffd17 	ldw	r2,-12(fp)
 1004ef8:	10000616 	blt	r2,zero,1004f14 <lseek+0x40>
 1004efc:	e0bffd17 	ldw	r2,-12(fp)
 1004f00:	10c00324 	muli	r3,r2,12
 1004f04:	00804074 	movhi	r2,257
 1004f08:	10a07004 	addi	r2,r2,-32320
 1004f0c:	1885883a 	add	r2,r3,r2
 1004f10:	00000106 	br	1004f18 <lseek+0x44>
 1004f14:	0005883a 	mov	r2,zero
 1004f18:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 1004f1c:	e0bffc17 	ldw	r2,-16(fp)
 1004f20:	10001026 	beq	r2,zero,1004f64 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1004f24:	e0bffc17 	ldw	r2,-16(fp)
 1004f28:	10800017 	ldw	r2,0(r2)
 1004f2c:	10800717 	ldw	r2,28(r2)
 1004f30:	10000926 	beq	r2,zero,1004f58 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1004f34:	e0bffc17 	ldw	r2,-16(fp)
 1004f38:	10800017 	ldw	r2,0(r2)
 1004f3c:	10800717 	ldw	r2,28(r2)
 1004f40:	e1bfff17 	ldw	r6,-4(fp)
 1004f44:	e17ffe17 	ldw	r5,-8(fp)
 1004f48:	e13ffc17 	ldw	r4,-16(fp)
 1004f4c:	103ee83a 	callr	r2
 1004f50:	e0bffb15 	stw	r2,-20(fp)
 1004f54:	00000506 	br	1004f6c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1004f58:	00bfde84 	movi	r2,-134
 1004f5c:	e0bffb15 	stw	r2,-20(fp)
 1004f60:	00000206 	br	1004f6c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 1004f64:	00bfebc4 	movi	r2,-81
 1004f68:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 1004f6c:	e0bffb17 	ldw	r2,-20(fp)
 1004f70:	1000070e 	bge	r2,zero,1004f90 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 1004f74:	1004e980 	call	1004e98 <alt_get_errno>
 1004f78:	1007883a 	mov	r3,r2
 1004f7c:	e0bffb17 	ldw	r2,-20(fp)
 1004f80:	0085c83a 	sub	r2,zero,r2
 1004f84:	18800015 	stw	r2,0(r3)
    rc = -1;
 1004f88:	00bfffc4 	movi	r2,-1
 1004f8c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 1004f90:	e0bffb17 	ldw	r2,-20(fp)
}
 1004f94:	e037883a 	mov	sp,fp
 1004f98:	dfc00117 	ldw	ra,4(sp)
 1004f9c:	df000017 	ldw	fp,0(sp)
 1004fa0:	dec00204 	addi	sp,sp,8
 1004fa4:	f800283a 	ret

01004fa8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1004fa8:	defffd04 	addi	sp,sp,-12
 1004fac:	dfc00215 	stw	ra,8(sp)
 1004fb0:	df000115 	stw	fp,4(sp)
 1004fb4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1004fb8:	0009883a 	mov	r4,zero
 1004fbc:	10055f40 	call	10055f4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 1004fc0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1004fc4:	100562c0 	call	100562c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1004fc8:	01804034 	movhi	r6,256
 1004fcc:	319e5104 	addi	r6,r6,31044
 1004fd0:	01404034 	movhi	r5,256
 1004fd4:	295e5104 	addi	r5,r5,31044
 1004fd8:	01004034 	movhi	r4,256
 1004fdc:	211e5104 	addi	r4,r4,31044
 1004fe0:	10068f00 	call	10068f0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1004fe4:	10064980 	call	1006498 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1004fe8:	01004034 	movhi	r4,256
 1004fec:	21193e04 	addi	r4,r4,25848
 1004ff0:	1006f4c0 	call	1006f4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1004ff4:	d0a6b517 	ldw	r2,-25900(gp)
 1004ff8:	d0e6b617 	ldw	r3,-25896(gp)
 1004ffc:	d126b717 	ldw	r4,-25892(gp)
 1005000:	200d883a 	mov	r6,r4
 1005004:	180b883a 	mov	r5,r3
 1005008:	1009883a 	mov	r4,r2
 100500c:	10002900 	call	1000290 <main>
 1005010:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 1005014:	01000044 	movi	r4,1
 1005018:	10048f00 	call	10048f0 <close>
  exit (result);
 100501c:	e13fff17 	ldw	r4,-4(fp)
 1005020:	1006f600 	call	1006f60 <exit>

01005024 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 1005024:	defffe04 	addi	sp,sp,-8
 1005028:	df000115 	stw	fp,4(sp)
 100502c:	df000104 	addi	fp,sp,4
 1005030:	e13fff15 	stw	r4,-4(fp)
}
 1005034:	0001883a 	nop
 1005038:	e037883a 	mov	sp,fp
 100503c:	df000017 	ldw	fp,0(sp)
 1005040:	dec00104 	addi	sp,sp,4
 1005044:	f800283a 	ret

01005048 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 1005048:	defffe04 	addi	sp,sp,-8
 100504c:	df000115 	stw	fp,4(sp)
 1005050:	df000104 	addi	fp,sp,4
 1005054:	e13fff15 	stw	r4,-4(fp)
}
 1005058:	0001883a 	nop
 100505c:	e037883a 	mov	sp,fp
 1005060:	df000017 	ldw	fp,0(sp)
 1005064:	dec00104 	addi	sp,sp,4
 1005068:	f800283a 	ret

0100506c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100506c:	defffe04 	addi	sp,sp,-8
 1005070:	dfc00115 	stw	ra,4(sp)
 1005074:	df000015 	stw	fp,0(sp)
 1005078:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100507c:	d0a00b17 	ldw	r2,-32724(gp)
 1005080:	10000326 	beq	r2,zero,1005090 <alt_get_errno+0x24>
 1005084:	d0a00b17 	ldw	r2,-32724(gp)
 1005088:	103ee83a 	callr	r2
 100508c:	00000106 	br	1005094 <alt_get_errno+0x28>
 1005090:	d0a6ad04 	addi	r2,gp,-25932
}
 1005094:	e037883a 	mov	sp,fp
 1005098:	dfc00117 	ldw	ra,4(sp)
 100509c:	df000017 	ldw	fp,0(sp)
 10050a0:	dec00204 	addi	sp,sp,8
 10050a4:	f800283a 	ret

010050a8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10050a8:	defff904 	addi	sp,sp,-28
 10050ac:	dfc00615 	stw	ra,24(sp)
 10050b0:	df000515 	stw	fp,20(sp)
 10050b4:	df000504 	addi	fp,sp,20
 10050b8:	e13ffd15 	stw	r4,-12(fp)
 10050bc:	e17ffe15 	stw	r5,-8(fp)
 10050c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10050c4:	e0bffd17 	ldw	r2,-12(fp)
 10050c8:	10000616 	blt	r2,zero,10050e4 <read+0x3c>
 10050cc:	e0bffd17 	ldw	r2,-12(fp)
 10050d0:	10c00324 	muli	r3,r2,12
 10050d4:	00804074 	movhi	r2,257
 10050d8:	10a07004 	addi	r2,r2,-32320
 10050dc:	1885883a 	add	r2,r3,r2
 10050e0:	00000106 	br	10050e8 <read+0x40>
 10050e4:	0005883a 	mov	r2,zero
 10050e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 10050ec:	e0bffb17 	ldw	r2,-20(fp)
 10050f0:	10002226 	beq	r2,zero,100517c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 10050f4:	e0bffb17 	ldw	r2,-20(fp)
 10050f8:	10800217 	ldw	r2,8(r2)
 10050fc:	108000cc 	andi	r2,r2,3
 1005100:	10800060 	cmpeqi	r2,r2,1
 1005104:	1000181e 	bne	r2,zero,1005168 <read+0xc0>
        (fd->dev->read))
 1005108:	e0bffb17 	ldw	r2,-20(fp)
 100510c:	10800017 	ldw	r2,0(r2)
 1005110:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1005114:	10001426 	beq	r2,zero,1005168 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 1005118:	e0bffb17 	ldw	r2,-20(fp)
 100511c:	10800017 	ldw	r2,0(r2)
 1005120:	10800517 	ldw	r2,20(r2)
 1005124:	e0ffff17 	ldw	r3,-4(fp)
 1005128:	180d883a 	mov	r6,r3
 100512c:	e17ffe17 	ldw	r5,-8(fp)
 1005130:	e13ffb17 	ldw	r4,-20(fp)
 1005134:	103ee83a 	callr	r2
 1005138:	e0bffc15 	stw	r2,-16(fp)
 100513c:	e0bffc17 	ldw	r2,-16(fp)
 1005140:	1000070e 	bge	r2,zero,1005160 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 1005144:	100506c0 	call	100506c <alt_get_errno>
 1005148:	1007883a 	mov	r3,r2
 100514c:	e0bffc17 	ldw	r2,-16(fp)
 1005150:	0085c83a 	sub	r2,zero,r2
 1005154:	18800015 	stw	r2,0(r3)
          return -1;
 1005158:	00bfffc4 	movi	r2,-1
 100515c:	00000c06 	br	1005190 <read+0xe8>
        }
        return rval;
 1005160:	e0bffc17 	ldw	r2,-16(fp)
 1005164:	00000a06 	br	1005190 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1005168:	100506c0 	call	100506c <alt_get_errno>
 100516c:	1007883a 	mov	r3,r2
 1005170:	00800344 	movi	r2,13
 1005174:	18800015 	stw	r2,0(r3)
 1005178:	00000406 	br	100518c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100517c:	100506c0 	call	100506c <alt_get_errno>
 1005180:	1007883a 	mov	r3,r2
 1005184:	00801444 	movi	r2,81
 1005188:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100518c:	00bfffc4 	movi	r2,-1
}
 1005190:	e037883a 	mov	sp,fp
 1005194:	dfc00117 	ldw	ra,4(sp)
 1005198:	df000017 	ldw	fp,0(sp)
 100519c:	dec00204 	addi	sp,sp,8
 10051a0:	f800283a 	ret

010051a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 10051a4:	defffe04 	addi	sp,sp,-8
 10051a8:	df000115 	stw	fp,4(sp)
 10051ac:	df000104 	addi	fp,sp,4
 10051b0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 10051b4:	e0bfff17 	ldw	r2,-4(fp)
 10051b8:	108000d0 	cmplti	r2,r2,3
 10051bc:	10000d1e 	bne	r2,zero,10051f4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 10051c0:	00804074 	movhi	r2,257
 10051c4:	10a07004 	addi	r2,r2,-32320
 10051c8:	e0ffff17 	ldw	r3,-4(fp)
 10051cc:	18c00324 	muli	r3,r3,12
 10051d0:	10c5883a 	add	r2,r2,r3
 10051d4:	10800204 	addi	r2,r2,8
 10051d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10051dc:	00804074 	movhi	r2,257
 10051e0:	10a07004 	addi	r2,r2,-32320
 10051e4:	e0ffff17 	ldw	r3,-4(fp)
 10051e8:	18c00324 	muli	r3,r3,12
 10051ec:	10c5883a 	add	r2,r2,r3
 10051f0:	10000015 	stw	zero,0(r2)
  }
}
 10051f4:	0001883a 	nop
 10051f8:	e037883a 	mov	sp,fp
 10051fc:	df000017 	ldw	fp,0(sp)
 1005200:	dec00104 	addi	sp,sp,4
 1005204:	f800283a 	ret

01005208 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 1005208:	defff904 	addi	sp,sp,-28
 100520c:	df000615 	stw	fp,24(sp)
 1005210:	df000604 	addi	fp,sp,24
 1005214:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005218:	0005303a 	rdctl	r2,status
 100521c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005220:	e0fffe17 	ldw	r3,-8(fp)
 1005224:	00bfff84 	movi	r2,-2
 1005228:	1884703a 	and	r2,r3,r2
 100522c:	1001703a 	wrctl	status,r2
  
  return context;
 1005230:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1005234:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1005238:	d0a00c17 	ldw	r2,-32720(gp)
 100523c:	10c000c4 	addi	r3,r2,3
 1005240:	00bfff04 	movi	r2,-4
 1005244:	1884703a 	and	r2,r3,r2
 1005248:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100524c:	d0e00c17 	ldw	r3,-32720(gp)
 1005250:	e0bfff17 	ldw	r2,-4(fp)
 1005254:	1887883a 	add	r3,r3,r2
 1005258:	00808034 	movhi	r2,512
 100525c:	10800004 	addi	r2,r2,0
 1005260:	10c0062e 	bgeu	r2,r3,100527c <sbrk+0x74>
 1005264:	e0bffb17 	ldw	r2,-20(fp)
 1005268:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100526c:	e0bffa17 	ldw	r2,-24(fp)
 1005270:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1005274:	00bfffc4 	movi	r2,-1
 1005278:	00000b06 	br	10052a8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 100527c:	d0a00c17 	ldw	r2,-32720(gp)
 1005280:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 1005284:	d0e00c17 	ldw	r3,-32720(gp)
 1005288:	e0bfff17 	ldw	r2,-4(fp)
 100528c:	1885883a 	add	r2,r3,r2
 1005290:	d0a00c15 	stw	r2,-32720(gp)
 1005294:	e0bffb17 	ldw	r2,-20(fp)
 1005298:	e0bffc15 	stw	r2,-16(fp)
 100529c:	e0bffc17 	ldw	r2,-16(fp)
 10052a0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 10052a4:	e0bffd17 	ldw	r2,-12(fp)
} 
 10052a8:	e037883a 	mov	sp,fp
 10052ac:	df000017 	ldw	fp,0(sp)
 10052b0:	dec00104 	addi	sp,sp,4
 10052b4:	f800283a 	ret

010052b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 10052b8:	defffa04 	addi	sp,sp,-24
 10052bc:	df000515 	stw	fp,20(sp)
 10052c0:	df000504 	addi	fp,sp,20
 10052c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10052c8:	0005303a 	rdctl	r2,status
 10052cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10052d0:	e0fffc17 	ldw	r3,-16(fp)
 10052d4:	00bfff84 	movi	r2,-2
 10052d8:	1884703a 	and	r2,r3,r2
 10052dc:	1001703a 	wrctl	status,r2
  
  return context;
 10052e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 10052e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 10052e8:	e0bfff17 	ldw	r2,-4(fp)
 10052ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 10052f0:	e0bffd17 	ldw	r2,-12(fp)
 10052f4:	10800017 	ldw	r2,0(r2)
 10052f8:	e0fffd17 	ldw	r3,-12(fp)
 10052fc:	18c00117 	ldw	r3,4(r3)
 1005300:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 1005304:	e0bffd17 	ldw	r2,-12(fp)
 1005308:	10800117 	ldw	r2,4(r2)
 100530c:	e0fffd17 	ldw	r3,-12(fp)
 1005310:	18c00017 	ldw	r3,0(r3)
 1005314:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1005318:	e0bffd17 	ldw	r2,-12(fp)
 100531c:	e0fffd17 	ldw	r3,-12(fp)
 1005320:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 1005324:	e0bffd17 	ldw	r2,-12(fp)
 1005328:	e0fffd17 	ldw	r3,-12(fp)
 100532c:	10c00015 	stw	r3,0(r2)
 1005330:	e0bffb17 	ldw	r2,-20(fp)
 1005334:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005338:	e0bffe17 	ldw	r2,-8(fp)
 100533c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1005340:	0001883a 	nop
 1005344:	e037883a 	mov	sp,fp
 1005348:	df000017 	ldw	fp,0(sp)
 100534c:	dec00104 	addi	sp,sp,4
 1005350:	f800283a 	ret

01005354 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1005354:	defffb04 	addi	sp,sp,-20
 1005358:	dfc00415 	stw	ra,16(sp)
 100535c:	df000315 	stw	fp,12(sp)
 1005360:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1005364:	d0a00d17 	ldw	r2,-32716(gp)
 1005368:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100536c:	d0a6b917 	ldw	r2,-25884(gp)
 1005370:	10800044 	addi	r2,r2,1
 1005374:	d0a6b915 	stw	r2,-25884(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005378:	00002e06 	br	1005434 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 100537c:	e0bffd17 	ldw	r2,-12(fp)
 1005380:	10800017 	ldw	r2,0(r2)
 1005384:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1005388:	e0bffd17 	ldw	r2,-12(fp)
 100538c:	10800403 	ldbu	r2,16(r2)
 1005390:	10803fcc 	andi	r2,r2,255
 1005394:	10000426 	beq	r2,zero,10053a8 <alt_tick+0x54>
 1005398:	d0a6b917 	ldw	r2,-25884(gp)
 100539c:	1000021e 	bne	r2,zero,10053a8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 10053a0:	e0bffd17 	ldw	r2,-12(fp)
 10053a4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 10053a8:	e0bffd17 	ldw	r2,-12(fp)
 10053ac:	10800217 	ldw	r2,8(r2)
 10053b0:	d0e6b917 	ldw	r3,-25884(gp)
 10053b4:	18801d36 	bltu	r3,r2,100542c <alt_tick+0xd8>
 10053b8:	e0bffd17 	ldw	r2,-12(fp)
 10053bc:	10800403 	ldbu	r2,16(r2)
 10053c0:	10803fcc 	andi	r2,r2,255
 10053c4:	1000191e 	bne	r2,zero,100542c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 10053c8:	e0bffd17 	ldw	r2,-12(fp)
 10053cc:	10800317 	ldw	r2,12(r2)
 10053d0:	e0fffd17 	ldw	r3,-12(fp)
 10053d4:	18c00517 	ldw	r3,20(r3)
 10053d8:	1809883a 	mov	r4,r3
 10053dc:	103ee83a 	callr	r2
 10053e0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 10053e4:	e0bfff17 	ldw	r2,-4(fp)
 10053e8:	1000031e 	bne	r2,zero,10053f8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 10053ec:	e13ffd17 	ldw	r4,-12(fp)
 10053f0:	10052b80 	call	10052b8 <alt_alarm_stop>
 10053f4:	00000d06 	br	100542c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 10053f8:	e0bffd17 	ldw	r2,-12(fp)
 10053fc:	10c00217 	ldw	r3,8(r2)
 1005400:	e0bfff17 	ldw	r2,-4(fp)
 1005404:	1887883a 	add	r3,r3,r2
 1005408:	e0bffd17 	ldw	r2,-12(fp)
 100540c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1005410:	e0bffd17 	ldw	r2,-12(fp)
 1005414:	10c00217 	ldw	r3,8(r2)
 1005418:	d0a6b917 	ldw	r2,-25884(gp)
 100541c:	1880032e 	bgeu	r3,r2,100542c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 1005420:	e0bffd17 	ldw	r2,-12(fp)
 1005424:	00c00044 	movi	r3,1
 1005428:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 100542c:	e0bffe17 	ldw	r2,-8(fp)
 1005430:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1005434:	e0fffd17 	ldw	r3,-12(fp)
 1005438:	d0a00d04 	addi	r2,gp,-32716
 100543c:	18bfcf1e 	bne	r3,r2,100537c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 1005440:	0001883a 	nop
}
 1005444:	0001883a 	nop
 1005448:	e037883a 	mov	sp,fp
 100544c:	dfc00117 	ldw	ra,4(sp)
 1005450:	df000017 	ldw	fp,0(sp)
 1005454:	dec00204 	addi	sp,sp,8
 1005458:	f800283a 	ret

0100545c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 100545c:	defffd04 	addi	sp,sp,-12
 1005460:	dfc00215 	stw	ra,8(sp)
 1005464:	df000115 	stw	fp,4(sp)
 1005468:	df000104 	addi	fp,sp,4
 100546c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 1005470:	e13fff17 	ldw	r4,-4(fp)
 1005474:	10062180 	call	1006218 <alt_busy_sleep>
}
 1005478:	e037883a 	mov	sp,fp
 100547c:	dfc00117 	ldw	ra,4(sp)
 1005480:	df000017 	ldw	fp,0(sp)
 1005484:	dec00204 	addi	sp,sp,8
 1005488:	f800283a 	ret

0100548c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100548c:	defffe04 	addi	sp,sp,-8
 1005490:	dfc00115 	stw	ra,4(sp)
 1005494:	df000015 	stw	fp,0(sp)
 1005498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100549c:	d0a00b17 	ldw	r2,-32724(gp)
 10054a0:	10000326 	beq	r2,zero,10054b0 <alt_get_errno+0x24>
 10054a4:	d0a00b17 	ldw	r2,-32724(gp)
 10054a8:	103ee83a 	callr	r2
 10054ac:	00000106 	br	10054b4 <alt_get_errno+0x28>
 10054b0:	d0a6ad04 	addi	r2,gp,-25932
}
 10054b4:	e037883a 	mov	sp,fp
 10054b8:	dfc00117 	ldw	ra,4(sp)
 10054bc:	df000017 	ldw	fp,0(sp)
 10054c0:	dec00204 	addi	sp,sp,8
 10054c4:	f800283a 	ret

010054c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 10054c8:	defff904 	addi	sp,sp,-28
 10054cc:	dfc00615 	stw	ra,24(sp)
 10054d0:	df000515 	stw	fp,20(sp)
 10054d4:	df000504 	addi	fp,sp,20
 10054d8:	e13ffd15 	stw	r4,-12(fp)
 10054dc:	e17ffe15 	stw	r5,-8(fp)
 10054e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10054e4:	e0bffd17 	ldw	r2,-12(fp)
 10054e8:	10000616 	blt	r2,zero,1005504 <write+0x3c>
 10054ec:	e0bffd17 	ldw	r2,-12(fp)
 10054f0:	10c00324 	muli	r3,r2,12
 10054f4:	00804074 	movhi	r2,257
 10054f8:	10a07004 	addi	r2,r2,-32320
 10054fc:	1885883a 	add	r2,r3,r2
 1005500:	00000106 	br	1005508 <write+0x40>
 1005504:	0005883a 	mov	r2,zero
 1005508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100550c:	e0bffb17 	ldw	r2,-20(fp)
 1005510:	10002126 	beq	r2,zero,1005598 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 1005514:	e0bffb17 	ldw	r2,-20(fp)
 1005518:	10800217 	ldw	r2,8(r2)
 100551c:	108000cc 	andi	r2,r2,3
 1005520:	10001826 	beq	r2,zero,1005584 <write+0xbc>
 1005524:	e0bffb17 	ldw	r2,-20(fp)
 1005528:	10800017 	ldw	r2,0(r2)
 100552c:	10800617 	ldw	r2,24(r2)
 1005530:	10001426 	beq	r2,zero,1005584 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1005534:	e0bffb17 	ldw	r2,-20(fp)
 1005538:	10800017 	ldw	r2,0(r2)
 100553c:	10800617 	ldw	r2,24(r2)
 1005540:	e0ffff17 	ldw	r3,-4(fp)
 1005544:	180d883a 	mov	r6,r3
 1005548:	e17ffe17 	ldw	r5,-8(fp)
 100554c:	e13ffb17 	ldw	r4,-20(fp)
 1005550:	103ee83a 	callr	r2
 1005554:	e0bffc15 	stw	r2,-16(fp)
 1005558:	e0bffc17 	ldw	r2,-16(fp)
 100555c:	1000070e 	bge	r2,zero,100557c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 1005560:	100548c0 	call	100548c <alt_get_errno>
 1005564:	1007883a 	mov	r3,r2
 1005568:	e0bffc17 	ldw	r2,-16(fp)
 100556c:	0085c83a 	sub	r2,zero,r2
 1005570:	18800015 	stw	r2,0(r3)
        return -1;
 1005574:	00bfffc4 	movi	r2,-1
 1005578:	00000c06 	br	10055ac <write+0xe4>
      }
      return rval;
 100557c:	e0bffc17 	ldw	r2,-16(fp)
 1005580:	00000a06 	br	10055ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1005584:	100548c0 	call	100548c <alt_get_errno>
 1005588:	1007883a 	mov	r3,r2
 100558c:	00800344 	movi	r2,13
 1005590:	18800015 	stw	r2,0(r3)
 1005594:	00000406 	br	10055a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1005598:	100548c0 	call	100548c <alt_get_errno>
 100559c:	1007883a 	mov	r3,r2
 10055a0:	00801444 	movi	r2,81
 10055a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10055a8:	00bfffc4 	movi	r2,-1
}
 10055ac:	e037883a 	mov	sp,fp
 10055b0:	dfc00117 	ldw	ra,4(sp)
 10055b4:	df000017 	ldw	fp,0(sp)
 10055b8:	dec00204 	addi	sp,sp,8
 10055bc:	f800283a 	ret

010055c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10055c0:	defffd04 	addi	sp,sp,-12
 10055c4:	dfc00215 	stw	ra,8(sp)
 10055c8:	df000115 	stw	fp,4(sp)
 10055cc:	df000104 	addi	fp,sp,4
 10055d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10055d4:	d1600804 	addi	r5,gp,-32736
 10055d8:	e13fff17 	ldw	r4,-4(fp)
 10055dc:	10063f40 	call	10063f4 <alt_dev_llist_insert>
}
 10055e0:	e037883a 	mov	sp,fp
 10055e4:	dfc00117 	ldw	ra,4(sp)
 10055e8:	df000017 	ldw	fp,0(sp)
 10055ec:	dec00204 	addi	sp,sp,8
 10055f0:	f800283a 	ret

010055f4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10055f4:	defffd04 	addi	sp,sp,-12
 10055f8:	dfc00215 	stw	ra,8(sp)
 10055fc:	df000115 	stw	fp,4(sp)
 1005600:	df000104 	addi	fp,sp,4
 1005604:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 1005608:	1006bc00 	call	1006bc0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100560c:	00800044 	movi	r2,1
 1005610:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1005614:	0001883a 	nop
 1005618:	e037883a 	mov	sp,fp
 100561c:	dfc00117 	ldw	ra,4(sp)
 1005620:	df000017 	ldw	fp,0(sp)
 1005624:	dec00204 	addi	sp,sp,8
 1005628:	f800283a 	ret

0100562c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100562c:	defffe04 	addi	sp,sp,-8
 1005630:	dfc00115 	stw	ra,4(sp)
 1005634:	df000015 	stw	fp,0(sp)
 1005638:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100563c:	000d883a 	mov	r6,zero
 1005640:	000b883a 	mov	r5,zero
 1005644:	01004074 	movhi	r4,257
 1005648:	2120da04 	addi	r4,r4,-31896
 100564c:	10057e80 	call	10057e8 <altera_avalon_jtag_uart_init>
 1005650:	01004074 	movhi	r4,257
 1005654:	2120d004 	addi	r4,r4,-31936
 1005658:	10055c00 	call	10055c0 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 100565c:	00c00044 	movi	r3,1
 1005660:	00808034 	movhi	r2,512
 1005664:	10840004 	addi	r2,r2,4096
 1005668:	10c00035 	stwio	r3,0(r2)
}
 100566c:	0001883a 	nop
 1005670:	e037883a 	mov	sp,fp
 1005674:	dfc00117 	ldw	ra,4(sp)
 1005678:	df000017 	ldw	fp,0(sp)
 100567c:	dec00204 	addi	sp,sp,8
 1005680:	f800283a 	ret

01005684 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1005684:	defffa04 	addi	sp,sp,-24
 1005688:	dfc00515 	stw	ra,20(sp)
 100568c:	df000415 	stw	fp,16(sp)
 1005690:	df000404 	addi	fp,sp,16
 1005694:	e13ffd15 	stw	r4,-12(fp)
 1005698:	e17ffe15 	stw	r5,-8(fp)
 100569c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10056a0:	e0bffd17 	ldw	r2,-12(fp)
 10056a4:	10800017 	ldw	r2,0(r2)
 10056a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 10056ac:	e0bffc17 	ldw	r2,-16(fp)
 10056b0:	10c00a04 	addi	r3,r2,40
 10056b4:	e0bffd17 	ldw	r2,-12(fp)
 10056b8:	10800217 	ldw	r2,8(r2)
 10056bc:	100f883a 	mov	r7,r2
 10056c0:	e1bfff17 	ldw	r6,-4(fp)
 10056c4:	e17ffe17 	ldw	r5,-8(fp)
 10056c8:	1809883a 	mov	r4,r3
 10056cc:	1005cac0 	call	1005cac <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 10056d0:	e037883a 	mov	sp,fp
 10056d4:	dfc00117 	ldw	ra,4(sp)
 10056d8:	df000017 	ldw	fp,0(sp)
 10056dc:	dec00204 	addi	sp,sp,8
 10056e0:	f800283a 	ret

010056e4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 10056e4:	defffa04 	addi	sp,sp,-24
 10056e8:	dfc00515 	stw	ra,20(sp)
 10056ec:	df000415 	stw	fp,16(sp)
 10056f0:	df000404 	addi	fp,sp,16
 10056f4:	e13ffd15 	stw	r4,-12(fp)
 10056f8:	e17ffe15 	stw	r5,-8(fp)
 10056fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1005700:	e0bffd17 	ldw	r2,-12(fp)
 1005704:	10800017 	ldw	r2,0(r2)
 1005708:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100570c:	e0bffc17 	ldw	r2,-16(fp)
 1005710:	10c00a04 	addi	r3,r2,40
 1005714:	e0bffd17 	ldw	r2,-12(fp)
 1005718:	10800217 	ldw	r2,8(r2)
 100571c:	100f883a 	mov	r7,r2
 1005720:	e1bfff17 	ldw	r6,-4(fp)
 1005724:	e17ffe17 	ldw	r5,-8(fp)
 1005728:	1809883a 	mov	r4,r3
 100572c:	1005ec80 	call	1005ec8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1005730:	e037883a 	mov	sp,fp
 1005734:	dfc00117 	ldw	ra,4(sp)
 1005738:	df000017 	ldw	fp,0(sp)
 100573c:	dec00204 	addi	sp,sp,8
 1005740:	f800283a 	ret

01005744 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1005744:	defffc04 	addi	sp,sp,-16
 1005748:	dfc00315 	stw	ra,12(sp)
 100574c:	df000215 	stw	fp,8(sp)
 1005750:	df000204 	addi	fp,sp,8
 1005754:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1005758:	e0bfff17 	ldw	r2,-4(fp)
 100575c:	10800017 	ldw	r2,0(r2)
 1005760:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1005764:	e0bffe17 	ldw	r2,-8(fp)
 1005768:	10c00a04 	addi	r3,r2,40
 100576c:	e0bfff17 	ldw	r2,-4(fp)
 1005770:	10800217 	ldw	r2,8(r2)
 1005774:	100b883a 	mov	r5,r2
 1005778:	1809883a 	mov	r4,r3
 100577c:	1005b540 	call	1005b54 <altera_avalon_jtag_uart_close>
}
 1005780:	e037883a 	mov	sp,fp
 1005784:	dfc00117 	ldw	ra,4(sp)
 1005788:	df000017 	ldw	fp,0(sp)
 100578c:	dec00204 	addi	sp,sp,8
 1005790:	f800283a 	ret

01005794 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1005794:	defffa04 	addi	sp,sp,-24
 1005798:	dfc00515 	stw	ra,20(sp)
 100579c:	df000415 	stw	fp,16(sp)
 10057a0:	df000404 	addi	fp,sp,16
 10057a4:	e13ffd15 	stw	r4,-12(fp)
 10057a8:	e17ffe15 	stw	r5,-8(fp)
 10057ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10057b0:	e0bffd17 	ldw	r2,-12(fp)
 10057b4:	10800017 	ldw	r2,0(r2)
 10057b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 10057bc:	e0bffc17 	ldw	r2,-16(fp)
 10057c0:	10800a04 	addi	r2,r2,40
 10057c4:	e1bfff17 	ldw	r6,-4(fp)
 10057c8:	e17ffe17 	ldw	r5,-8(fp)
 10057cc:	1009883a 	mov	r4,r2
 10057d0:	1005bbc0 	call	1005bbc <altera_avalon_jtag_uart_ioctl>
}
 10057d4:	e037883a 	mov	sp,fp
 10057d8:	dfc00117 	ldw	ra,4(sp)
 10057dc:	df000017 	ldw	fp,0(sp)
 10057e0:	dec00204 	addi	sp,sp,8
 10057e4:	f800283a 	ret

010057e8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 10057e8:	defffa04 	addi	sp,sp,-24
 10057ec:	dfc00515 	stw	ra,20(sp)
 10057f0:	df000415 	stw	fp,16(sp)
 10057f4:	df000404 	addi	fp,sp,16
 10057f8:	e13ffd15 	stw	r4,-12(fp)
 10057fc:	e17ffe15 	stw	r5,-8(fp)
 1005800:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1005804:	e0bffd17 	ldw	r2,-12(fp)
 1005808:	00c00044 	movi	r3,1
 100580c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1005810:	e0bffd17 	ldw	r2,-12(fp)
 1005814:	10800017 	ldw	r2,0(r2)
 1005818:	10800104 	addi	r2,r2,4
 100581c:	1007883a 	mov	r3,r2
 1005820:	e0bffd17 	ldw	r2,-12(fp)
 1005824:	10800817 	ldw	r2,32(r2)
 1005828:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100582c:	e0bffe17 	ldw	r2,-8(fp)
 1005830:	e0ffff17 	ldw	r3,-4(fp)
 1005834:	d8000015 	stw	zero,0(sp)
 1005838:	e1fffd17 	ldw	r7,-12(fp)
 100583c:	01804034 	movhi	r6,256
 1005840:	31962a04 	addi	r6,r6,22696
 1005844:	180b883a 	mov	r5,r3
 1005848:	1009883a 	mov	r4,r2
 100584c:	100658c0 	call	100658c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1005850:	e0bffd17 	ldw	r2,-12(fp)
 1005854:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1005858:	e0bffd17 	ldw	r2,-12(fp)
 100585c:	10800204 	addi	r2,r2,8
 1005860:	d0e6b817 	ldw	r3,-25888(gp)
 1005864:	e1fffd17 	ldw	r7,-12(fp)
 1005868:	01804034 	movhi	r6,256
 100586c:	3196ad04 	addi	r6,r6,23220
 1005870:	180b883a 	mov	r5,r3
 1005874:	1009883a 	mov	r4,r2
 1005878:	10060ec0 	call	10060ec <alt_alarm_start>
 100587c:	1000040e 	bge	r2,zero,1005890 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1005880:	e0fffd17 	ldw	r3,-12(fp)
 1005884:	00a00034 	movhi	r2,32768
 1005888:	10bfffc4 	addi	r2,r2,-1
 100588c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1005890:	0001883a 	nop
 1005894:	e037883a 	mov	sp,fp
 1005898:	dfc00117 	ldw	ra,4(sp)
 100589c:	df000017 	ldw	fp,0(sp)
 10058a0:	dec00204 	addi	sp,sp,8
 10058a4:	f800283a 	ret

010058a8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 10058a8:	defff804 	addi	sp,sp,-32
 10058ac:	df000715 	stw	fp,28(sp)
 10058b0:	df000704 	addi	fp,sp,28
 10058b4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 10058b8:	e0bfff17 	ldw	r2,-4(fp)
 10058bc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 10058c0:	e0bffb17 	ldw	r2,-20(fp)
 10058c4:	10800017 	ldw	r2,0(r2)
 10058c8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10058cc:	e0bffc17 	ldw	r2,-16(fp)
 10058d0:	10800104 	addi	r2,r2,4
 10058d4:	10800037 	ldwio	r2,0(r2)
 10058d8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 10058dc:	e0bffd17 	ldw	r2,-12(fp)
 10058e0:	1080c00c 	andi	r2,r2,768
 10058e4:	10006d26 	beq	r2,zero,1005a9c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 10058e8:	e0bffd17 	ldw	r2,-12(fp)
 10058ec:	1080400c 	andi	r2,r2,256
 10058f0:	10003526 	beq	r2,zero,10059c8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 10058f4:	00800074 	movhi	r2,1
 10058f8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 10058fc:	e0bffb17 	ldw	r2,-20(fp)
 1005900:	10800a17 	ldw	r2,40(r2)
 1005904:	10800044 	addi	r2,r2,1
 1005908:	1081ffcc 	andi	r2,r2,2047
 100590c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 1005910:	e0bffb17 	ldw	r2,-20(fp)
 1005914:	10c00b17 	ldw	r3,44(r2)
 1005918:	e0bffe17 	ldw	r2,-8(fp)
 100591c:	18801526 	beq	r3,r2,1005974 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1005920:	e0bffc17 	ldw	r2,-16(fp)
 1005924:	10800037 	ldwio	r2,0(r2)
 1005928:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100592c:	e0bff917 	ldw	r2,-28(fp)
 1005930:	10a0000c 	andi	r2,r2,32768
 1005934:	10001126 	beq	r2,zero,100597c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1005938:	e0bffb17 	ldw	r2,-20(fp)
 100593c:	10800a17 	ldw	r2,40(r2)
 1005940:	e0fff917 	ldw	r3,-28(fp)
 1005944:	1809883a 	mov	r4,r3
 1005948:	e0fffb17 	ldw	r3,-20(fp)
 100594c:	1885883a 	add	r2,r3,r2
 1005950:	10800e04 	addi	r2,r2,56
 1005954:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005958:	e0bffb17 	ldw	r2,-20(fp)
 100595c:	10800a17 	ldw	r2,40(r2)
 1005960:	10800044 	addi	r2,r2,1
 1005964:	10c1ffcc 	andi	r3,r2,2047
 1005968:	e0bffb17 	ldw	r2,-20(fp)
 100596c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1005970:	003fe206 	br	10058fc <altera_avalon_jtag_uart_irq+0x54>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 1005974:	0001883a 	nop
 1005978:	00000106 	br	1005980 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 100597c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1005980:	e0bff917 	ldw	r2,-28(fp)
 1005984:	10bfffec 	andhi	r2,r2,65535
 1005988:	10000f26 	beq	r2,zero,10059c8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100598c:	e0bffb17 	ldw	r2,-20(fp)
 1005990:	10c00817 	ldw	r3,32(r2)
 1005994:	00bfff84 	movi	r2,-2
 1005998:	1886703a 	and	r3,r3,r2
 100599c:	e0bffb17 	ldw	r2,-20(fp)
 10059a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 10059a4:	e0bffc17 	ldw	r2,-16(fp)
 10059a8:	10800104 	addi	r2,r2,4
 10059ac:	1007883a 	mov	r3,r2
 10059b0:	e0bffb17 	ldw	r2,-20(fp)
 10059b4:	10800817 	ldw	r2,32(r2)
 10059b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 10059bc:	e0bffc17 	ldw	r2,-16(fp)
 10059c0:	10800104 	addi	r2,r2,4
 10059c4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 10059c8:	e0bffd17 	ldw	r2,-12(fp)
 10059cc:	1080800c 	andi	r2,r2,512
 10059d0:	103fbe26 	beq	r2,zero,10058cc <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 10059d4:	e0bffd17 	ldw	r2,-12(fp)
 10059d8:	1004d43a 	srli	r2,r2,16
 10059dc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 10059e0:	00001406 	br	1005a34 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 10059e4:	e0bffc17 	ldw	r2,-16(fp)
 10059e8:	e0fffb17 	ldw	r3,-20(fp)
 10059ec:	18c00d17 	ldw	r3,52(r3)
 10059f0:	e13ffb17 	ldw	r4,-20(fp)
 10059f4:	20c7883a 	add	r3,r4,r3
 10059f8:	18c20e04 	addi	r3,r3,2104
 10059fc:	18c00003 	ldbu	r3,0(r3)
 1005a00:	18c03fcc 	andi	r3,r3,255
 1005a04:	18c0201c 	xori	r3,r3,128
 1005a08:	18ffe004 	addi	r3,r3,-128
 1005a0c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005a10:	e0bffb17 	ldw	r2,-20(fp)
 1005a14:	10800d17 	ldw	r2,52(r2)
 1005a18:	10800044 	addi	r2,r2,1
 1005a1c:	10c1ffcc 	andi	r3,r2,2047
 1005a20:	e0bffb17 	ldw	r2,-20(fp)
 1005a24:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1005a28:	e0bffa17 	ldw	r2,-24(fp)
 1005a2c:	10bfffc4 	addi	r2,r2,-1
 1005a30:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1005a34:	e0bffa17 	ldw	r2,-24(fp)
 1005a38:	10000526 	beq	r2,zero,1005a50 <altera_avalon_jtag_uart_irq+0x1a8>
 1005a3c:	e0bffb17 	ldw	r2,-20(fp)
 1005a40:	10c00d17 	ldw	r3,52(r2)
 1005a44:	e0bffb17 	ldw	r2,-20(fp)
 1005a48:	10800c17 	ldw	r2,48(r2)
 1005a4c:	18bfe51e 	bne	r3,r2,10059e4 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1005a50:	e0bffa17 	ldw	r2,-24(fp)
 1005a54:	103f9d26 	beq	r2,zero,10058cc <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1005a58:	e0bffb17 	ldw	r2,-20(fp)
 1005a5c:	10c00817 	ldw	r3,32(r2)
 1005a60:	00bfff44 	movi	r2,-3
 1005a64:	1886703a 	and	r3,r3,r2
 1005a68:	e0bffb17 	ldw	r2,-20(fp)
 1005a6c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1005a70:	e0bffb17 	ldw	r2,-20(fp)
 1005a74:	10800017 	ldw	r2,0(r2)
 1005a78:	10800104 	addi	r2,r2,4
 1005a7c:	1007883a 	mov	r3,r2
 1005a80:	e0bffb17 	ldw	r2,-20(fp)
 1005a84:	10800817 	ldw	r2,32(r2)
 1005a88:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1005a8c:	e0bffc17 	ldw	r2,-16(fp)
 1005a90:	10800104 	addi	r2,r2,4
 1005a94:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1005a98:	003f8c06 	br	10058cc <altera_avalon_jtag_uart_irq+0x24>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 1005a9c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 1005aa0:	0001883a 	nop
 1005aa4:	e037883a 	mov	sp,fp
 1005aa8:	df000017 	ldw	fp,0(sp)
 1005aac:	dec00104 	addi	sp,sp,4
 1005ab0:	f800283a 	ret

01005ab4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1005ab4:	defff804 	addi	sp,sp,-32
 1005ab8:	df000715 	stw	fp,28(sp)
 1005abc:	df000704 	addi	fp,sp,28
 1005ac0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1005ac4:	e0bffb17 	ldw	r2,-20(fp)
 1005ac8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1005acc:	e0bff917 	ldw	r2,-28(fp)
 1005ad0:	10800017 	ldw	r2,0(r2)
 1005ad4:	10800104 	addi	r2,r2,4
 1005ad8:	10800037 	ldwio	r2,0(r2)
 1005adc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1005ae0:	e0bffa17 	ldw	r2,-24(fp)
 1005ae4:	1081000c 	andi	r2,r2,1024
 1005ae8:	10000b26 	beq	r2,zero,1005b18 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1005aec:	e0bff917 	ldw	r2,-28(fp)
 1005af0:	10800017 	ldw	r2,0(r2)
 1005af4:	10800104 	addi	r2,r2,4
 1005af8:	1007883a 	mov	r3,r2
 1005afc:	e0bff917 	ldw	r2,-28(fp)
 1005b00:	10800817 	ldw	r2,32(r2)
 1005b04:	10810014 	ori	r2,r2,1024
 1005b08:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 1005b0c:	e0bff917 	ldw	r2,-28(fp)
 1005b10:	10000915 	stw	zero,36(r2)
 1005b14:	00000a06 	br	1005b40 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1005b18:	e0bff917 	ldw	r2,-28(fp)
 1005b1c:	10c00917 	ldw	r3,36(r2)
 1005b20:	00a00034 	movhi	r2,32768
 1005b24:	10bfff04 	addi	r2,r2,-4
 1005b28:	10c00536 	bltu	r2,r3,1005b40 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 1005b2c:	e0bff917 	ldw	r2,-28(fp)
 1005b30:	10800917 	ldw	r2,36(r2)
 1005b34:	10c00044 	addi	r3,r2,1
 1005b38:	e0bff917 	ldw	r2,-28(fp)
 1005b3c:	10c00915 	stw	r3,36(r2)
 1005b40:	d0a6b817 	ldw	r2,-25888(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1005b44:	e037883a 	mov	sp,fp
 1005b48:	df000017 	ldw	fp,0(sp)
 1005b4c:	dec00104 	addi	sp,sp,4
 1005b50:	f800283a 	ret

01005b54 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1005b54:	defffd04 	addi	sp,sp,-12
 1005b58:	df000215 	stw	fp,8(sp)
 1005b5c:	df000204 	addi	fp,sp,8
 1005b60:	e13ffe15 	stw	r4,-8(fp)
 1005b64:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1005b68:	00000506 	br	1005b80 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 1005b6c:	e0bfff17 	ldw	r2,-4(fp)
 1005b70:	1090000c 	andi	r2,r2,16384
 1005b74:	10000226 	beq	r2,zero,1005b80 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 1005b78:	00bffd44 	movi	r2,-11
 1005b7c:	00000b06 	br	1005bac <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1005b80:	e0bffe17 	ldw	r2,-8(fp)
 1005b84:	10c00d17 	ldw	r3,52(r2)
 1005b88:	e0bffe17 	ldw	r2,-8(fp)
 1005b8c:	10800c17 	ldw	r2,48(r2)
 1005b90:	18800526 	beq	r3,r2,1005ba8 <altera_avalon_jtag_uart_close+0x54>
 1005b94:	e0bffe17 	ldw	r2,-8(fp)
 1005b98:	10c00917 	ldw	r3,36(r2)
 1005b9c:	e0bffe17 	ldw	r2,-8(fp)
 1005ba0:	10800117 	ldw	r2,4(r2)
 1005ba4:	18bff136 	bltu	r3,r2,1005b6c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1005ba8:	0005883a 	mov	r2,zero
}
 1005bac:	e037883a 	mov	sp,fp
 1005bb0:	df000017 	ldw	fp,0(sp)
 1005bb4:	dec00104 	addi	sp,sp,4
 1005bb8:	f800283a 	ret

01005bbc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1005bbc:	defffa04 	addi	sp,sp,-24
 1005bc0:	df000515 	stw	fp,20(sp)
 1005bc4:	df000504 	addi	fp,sp,20
 1005bc8:	e13ffd15 	stw	r4,-12(fp)
 1005bcc:	e17ffe15 	stw	r5,-8(fp)
 1005bd0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 1005bd4:	00bff9c4 	movi	r2,-25
 1005bd8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 1005bdc:	e0bffe17 	ldw	r2,-8(fp)
 1005be0:	10da8060 	cmpeqi	r3,r2,27137
 1005be4:	1800031e 	bne	r3,zero,1005bf4 <altera_avalon_jtag_uart_ioctl+0x38>
 1005be8:	109a80a0 	cmpeqi	r2,r2,27138
 1005bec:	1000181e 	bne	r2,zero,1005c50 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 1005bf0:	00002906 	br	1005c98 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1005bf4:	e0bffd17 	ldw	r2,-12(fp)
 1005bf8:	10c00117 	ldw	r3,4(r2)
 1005bfc:	00a00034 	movhi	r2,32768
 1005c00:	10bfffc4 	addi	r2,r2,-1
 1005c04:	18802126 	beq	r3,r2,1005c8c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 1005c08:	e0bfff17 	ldw	r2,-4(fp)
 1005c0c:	10800017 	ldw	r2,0(r2)
 1005c10:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1005c14:	e0bffc17 	ldw	r2,-16(fp)
 1005c18:	10800090 	cmplti	r2,r2,2
 1005c1c:	1000061e 	bne	r2,zero,1005c38 <altera_avalon_jtag_uart_ioctl+0x7c>
 1005c20:	e0fffc17 	ldw	r3,-16(fp)
 1005c24:	00a00034 	movhi	r2,32768
 1005c28:	10bfffc4 	addi	r2,r2,-1
 1005c2c:	18800226 	beq	r3,r2,1005c38 <altera_avalon_jtag_uart_ioctl+0x7c>
 1005c30:	e0bffc17 	ldw	r2,-16(fp)
 1005c34:	00000206 	br	1005c40 <altera_avalon_jtag_uart_ioctl+0x84>
 1005c38:	00a00034 	movhi	r2,32768
 1005c3c:	10bfff84 	addi	r2,r2,-2
 1005c40:	e0fffd17 	ldw	r3,-12(fp)
 1005c44:	18800115 	stw	r2,4(r3)
      rc = 0;
 1005c48:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1005c4c:	00000f06 	br	1005c8c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1005c50:	e0bffd17 	ldw	r2,-12(fp)
 1005c54:	10c00117 	ldw	r3,4(r2)
 1005c58:	00a00034 	movhi	r2,32768
 1005c5c:	10bfffc4 	addi	r2,r2,-1
 1005c60:	18800c26 	beq	r3,r2,1005c94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1005c64:	e0bffd17 	ldw	r2,-12(fp)
 1005c68:	10c00917 	ldw	r3,36(r2)
 1005c6c:	e0bffd17 	ldw	r2,-12(fp)
 1005c70:	10800117 	ldw	r2,4(r2)
 1005c74:	1885803a 	cmpltu	r2,r3,r2
 1005c78:	10c03fcc 	andi	r3,r2,255
 1005c7c:	e0bfff17 	ldw	r2,-4(fp)
 1005c80:	10c00015 	stw	r3,0(r2)
      rc = 0;
 1005c84:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 1005c88:	00000206 	br	1005c94 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 1005c8c:	0001883a 	nop
 1005c90:	00000106 	br	1005c98 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 1005c94:	0001883a 	nop

  default:
    break;
  }

  return rc;
 1005c98:	e0bffb17 	ldw	r2,-20(fp)
}
 1005c9c:	e037883a 	mov	sp,fp
 1005ca0:	df000017 	ldw	fp,0(sp)
 1005ca4:	dec00104 	addi	sp,sp,4
 1005ca8:	f800283a 	ret

01005cac <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1005cac:	defff304 	addi	sp,sp,-52
 1005cb0:	dfc00c15 	stw	ra,48(sp)
 1005cb4:	df000b15 	stw	fp,44(sp)
 1005cb8:	df000b04 	addi	fp,sp,44
 1005cbc:	e13ffc15 	stw	r4,-16(fp)
 1005cc0:	e17ffd15 	stw	r5,-12(fp)
 1005cc4:	e1bffe15 	stw	r6,-8(fp)
 1005cc8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 1005ccc:	e0bffd17 	ldw	r2,-12(fp)
 1005cd0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1005cd4:	00004706 	br	1005df4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1005cd8:	e0bffc17 	ldw	r2,-16(fp)
 1005cdc:	10800a17 	ldw	r2,40(r2)
 1005ce0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1005ce4:	e0bffc17 	ldw	r2,-16(fp)
 1005ce8:	10800b17 	ldw	r2,44(r2)
 1005cec:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 1005cf0:	e0fff717 	ldw	r3,-36(fp)
 1005cf4:	e0bff817 	ldw	r2,-32(fp)
 1005cf8:	18800536 	bltu	r3,r2,1005d10 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1005cfc:	e0fff717 	ldw	r3,-36(fp)
 1005d00:	e0bff817 	ldw	r2,-32(fp)
 1005d04:	1885c83a 	sub	r2,r3,r2
 1005d08:	e0bff615 	stw	r2,-40(fp)
 1005d0c:	00000406 	br	1005d20 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1005d10:	00c20004 	movi	r3,2048
 1005d14:	e0bff817 	ldw	r2,-32(fp)
 1005d18:	1885c83a 	sub	r2,r3,r2
 1005d1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1005d20:	e0bff617 	ldw	r2,-40(fp)
 1005d24:	10001e26 	beq	r2,zero,1005da0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 1005d28:	e0fffe17 	ldw	r3,-8(fp)
 1005d2c:	e0bff617 	ldw	r2,-40(fp)
 1005d30:	1880022e 	bgeu	r3,r2,1005d3c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 1005d34:	e0bffe17 	ldw	r2,-8(fp)
 1005d38:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1005d3c:	e0bffc17 	ldw	r2,-16(fp)
 1005d40:	10c00e04 	addi	r3,r2,56
 1005d44:	e0bff817 	ldw	r2,-32(fp)
 1005d48:	1885883a 	add	r2,r3,r2
 1005d4c:	e1bff617 	ldw	r6,-40(fp)
 1005d50:	100b883a 	mov	r5,r2
 1005d54:	e13ff517 	ldw	r4,-44(fp)
 1005d58:	1002ecc0 	call	1002ecc <memcpy>
      ptr   += n;
 1005d5c:	e0fff517 	ldw	r3,-44(fp)
 1005d60:	e0bff617 	ldw	r2,-40(fp)
 1005d64:	1885883a 	add	r2,r3,r2
 1005d68:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 1005d6c:	e0fffe17 	ldw	r3,-8(fp)
 1005d70:	e0bff617 	ldw	r2,-40(fp)
 1005d74:	1885c83a 	sub	r2,r3,r2
 1005d78:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005d7c:	e0fff817 	ldw	r3,-32(fp)
 1005d80:	e0bff617 	ldw	r2,-40(fp)
 1005d84:	1885883a 	add	r2,r3,r2
 1005d88:	10c1ffcc 	andi	r3,r2,2047
 1005d8c:	e0bffc17 	ldw	r2,-16(fp)
 1005d90:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1005d94:	e0bffe17 	ldw	r2,-8(fp)
 1005d98:	00bfcf16 	blt	zero,r2,1005cd8 <altera_avalon_jtag_uart_read+0x2c>
 1005d9c:	00000106 	br	1005da4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 1005da0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 1005da4:	e0fff517 	ldw	r3,-44(fp)
 1005da8:	e0bffd17 	ldw	r2,-12(fp)
 1005dac:	1880141e 	bne	r3,r2,1005e00 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 1005db0:	e0bfff17 	ldw	r2,-4(fp)
 1005db4:	1090000c 	andi	r2,r2,16384
 1005db8:	1000131e 	bne	r2,zero,1005e08 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 1005dbc:	0001883a 	nop
 1005dc0:	e0bffc17 	ldw	r2,-16(fp)
 1005dc4:	10c00a17 	ldw	r3,40(r2)
 1005dc8:	e0bff717 	ldw	r2,-36(fp)
 1005dcc:	1880051e 	bne	r3,r2,1005de4 <altera_avalon_jtag_uart_read+0x138>
 1005dd0:	e0bffc17 	ldw	r2,-16(fp)
 1005dd4:	10c00917 	ldw	r3,36(r2)
 1005dd8:	e0bffc17 	ldw	r2,-16(fp)
 1005ddc:	10800117 	ldw	r2,4(r2)
 1005de0:	18bff736 	bltu	r3,r2,1005dc0 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1005de4:	e0bffc17 	ldw	r2,-16(fp)
 1005de8:	10c00a17 	ldw	r3,40(r2)
 1005dec:	e0bff717 	ldw	r2,-36(fp)
 1005df0:	18800726 	beq	r3,r2,1005e10 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1005df4:	e0bffe17 	ldw	r2,-8(fp)
 1005df8:	00bfb716 	blt	zero,r2,1005cd8 <altera_avalon_jtag_uart_read+0x2c>
 1005dfc:	00000506 	br	1005e14 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 1005e00:	0001883a 	nop
 1005e04:	00000306 	br	1005e14 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 1005e08:	0001883a 	nop
 1005e0c:	00000106 	br	1005e14 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 1005e10:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 1005e14:	e0fff517 	ldw	r3,-44(fp)
 1005e18:	e0bffd17 	ldw	r2,-12(fp)
 1005e1c:	18801826 	beq	r3,r2,1005e80 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005e20:	0005303a 	rdctl	r2,status
 1005e24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005e28:	e0fffb17 	ldw	r3,-20(fp)
 1005e2c:	00bfff84 	movi	r2,-2
 1005e30:	1884703a 	and	r2,r3,r2
 1005e34:	1001703a 	wrctl	status,r2
  
  return context;
 1005e38:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 1005e3c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1005e40:	e0bffc17 	ldw	r2,-16(fp)
 1005e44:	10800817 	ldw	r2,32(r2)
 1005e48:	10c00054 	ori	r3,r2,1
 1005e4c:	e0bffc17 	ldw	r2,-16(fp)
 1005e50:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1005e54:	e0bffc17 	ldw	r2,-16(fp)
 1005e58:	10800017 	ldw	r2,0(r2)
 1005e5c:	10800104 	addi	r2,r2,4
 1005e60:	1007883a 	mov	r3,r2
 1005e64:	e0bffc17 	ldw	r2,-16(fp)
 1005e68:	10800817 	ldw	r2,32(r2)
 1005e6c:	18800035 	stwio	r2,0(r3)
 1005e70:	e0bffa17 	ldw	r2,-24(fp)
 1005e74:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1005e78:	e0bff917 	ldw	r2,-28(fp)
 1005e7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 1005e80:	e0fff517 	ldw	r3,-44(fp)
 1005e84:	e0bffd17 	ldw	r2,-12(fp)
 1005e88:	18800426 	beq	r3,r2,1005e9c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 1005e8c:	e0fff517 	ldw	r3,-44(fp)
 1005e90:	e0bffd17 	ldw	r2,-12(fp)
 1005e94:	1885c83a 	sub	r2,r3,r2
 1005e98:	00000606 	br	1005eb4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 1005e9c:	e0bfff17 	ldw	r2,-4(fp)
 1005ea0:	1090000c 	andi	r2,r2,16384
 1005ea4:	10000226 	beq	r2,zero,1005eb0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 1005ea8:	00bffd44 	movi	r2,-11
 1005eac:	00000106 	br	1005eb4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 1005eb0:	00bffec4 	movi	r2,-5
}
 1005eb4:	e037883a 	mov	sp,fp
 1005eb8:	dfc00117 	ldw	ra,4(sp)
 1005ebc:	df000017 	ldw	fp,0(sp)
 1005ec0:	dec00204 	addi	sp,sp,8
 1005ec4:	f800283a 	ret

01005ec8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1005ec8:	defff304 	addi	sp,sp,-52
 1005ecc:	dfc00c15 	stw	ra,48(sp)
 1005ed0:	df000b15 	stw	fp,44(sp)
 1005ed4:	df000b04 	addi	fp,sp,44
 1005ed8:	e13ffc15 	stw	r4,-16(fp)
 1005edc:	e17ffd15 	stw	r5,-12(fp)
 1005ee0:	e1bffe15 	stw	r6,-8(fp)
 1005ee4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1005ee8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 1005eec:	e0bffd17 	ldw	r2,-12(fp)
 1005ef0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1005ef4:	00003706 	br	1005fd4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1005ef8:	e0bffc17 	ldw	r2,-16(fp)
 1005efc:	10800c17 	ldw	r2,48(r2)
 1005f00:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 1005f04:	e0bffc17 	ldw	r2,-16(fp)
 1005f08:	10800d17 	ldw	r2,52(r2)
 1005f0c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 1005f10:	e0fff917 	ldw	r3,-28(fp)
 1005f14:	e0bff517 	ldw	r2,-44(fp)
 1005f18:	1880062e 	bgeu	r3,r2,1005f34 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 1005f1c:	e0fff517 	ldw	r3,-44(fp)
 1005f20:	e0bff917 	ldw	r2,-28(fp)
 1005f24:	1885c83a 	sub	r2,r3,r2
 1005f28:	10bfffc4 	addi	r2,r2,-1
 1005f2c:	e0bff615 	stw	r2,-40(fp)
 1005f30:	00000b06 	br	1005f60 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 1005f34:	e0bff517 	ldw	r2,-44(fp)
 1005f38:	10000526 	beq	r2,zero,1005f50 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1005f3c:	00c20004 	movi	r3,2048
 1005f40:	e0bff917 	ldw	r2,-28(fp)
 1005f44:	1885c83a 	sub	r2,r3,r2
 1005f48:	e0bff615 	stw	r2,-40(fp)
 1005f4c:	00000406 	br	1005f60 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1005f50:	00c1ffc4 	movi	r3,2047
 1005f54:	e0bff917 	ldw	r2,-28(fp)
 1005f58:	1885c83a 	sub	r2,r3,r2
 1005f5c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 1005f60:	e0bff617 	ldw	r2,-40(fp)
 1005f64:	10001e26 	beq	r2,zero,1005fe0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 1005f68:	e0fffe17 	ldw	r3,-8(fp)
 1005f6c:	e0bff617 	ldw	r2,-40(fp)
 1005f70:	1880022e 	bgeu	r3,r2,1005f7c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 1005f74:	e0bffe17 	ldw	r2,-8(fp)
 1005f78:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1005f7c:	e0bffc17 	ldw	r2,-16(fp)
 1005f80:	10c20e04 	addi	r3,r2,2104
 1005f84:	e0bff917 	ldw	r2,-28(fp)
 1005f88:	1885883a 	add	r2,r3,r2
 1005f8c:	e1bff617 	ldw	r6,-40(fp)
 1005f90:	e17ffd17 	ldw	r5,-12(fp)
 1005f94:	1009883a 	mov	r4,r2
 1005f98:	1002ecc0 	call	1002ecc <memcpy>
      ptr   += n;
 1005f9c:	e0fffd17 	ldw	r3,-12(fp)
 1005fa0:	e0bff617 	ldw	r2,-40(fp)
 1005fa4:	1885883a 	add	r2,r3,r2
 1005fa8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 1005fac:	e0fffe17 	ldw	r3,-8(fp)
 1005fb0:	e0bff617 	ldw	r2,-40(fp)
 1005fb4:	1885c83a 	sub	r2,r3,r2
 1005fb8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1005fbc:	e0fff917 	ldw	r3,-28(fp)
 1005fc0:	e0bff617 	ldw	r2,-40(fp)
 1005fc4:	1885883a 	add	r2,r3,r2
 1005fc8:	10c1ffcc 	andi	r3,r2,2047
 1005fcc:	e0bffc17 	ldw	r2,-16(fp)
 1005fd0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1005fd4:	e0bffe17 	ldw	r2,-8(fp)
 1005fd8:	00bfc716 	blt	zero,r2,1005ef8 <altera_avalon_jtag_uart_write+0x30>
 1005fdc:	00000106 	br	1005fe4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 1005fe0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1005fe4:	0005303a 	rdctl	r2,status
 1005fe8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1005fec:	e0fffb17 	ldw	r3,-20(fp)
 1005ff0:	00bfff84 	movi	r2,-2
 1005ff4:	1884703a 	and	r2,r3,r2
 1005ff8:	1001703a 	wrctl	status,r2
  
  return context;
 1005ffc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1006000:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1006004:	e0bffc17 	ldw	r2,-16(fp)
 1006008:	10800817 	ldw	r2,32(r2)
 100600c:	10c00094 	ori	r3,r2,2
 1006010:	e0bffc17 	ldw	r2,-16(fp)
 1006014:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1006018:	e0bffc17 	ldw	r2,-16(fp)
 100601c:	10800017 	ldw	r2,0(r2)
 1006020:	10800104 	addi	r2,r2,4
 1006024:	1007883a 	mov	r3,r2
 1006028:	e0bffc17 	ldw	r2,-16(fp)
 100602c:	10800817 	ldw	r2,32(r2)
 1006030:	18800035 	stwio	r2,0(r3)
 1006034:	e0bffa17 	ldw	r2,-24(fp)
 1006038:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100603c:	e0bff817 	ldw	r2,-32(fp)
 1006040:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1006044:	e0bffe17 	ldw	r2,-8(fp)
 1006048:	0080100e 	bge	zero,r2,100608c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 100604c:	e0bfff17 	ldw	r2,-4(fp)
 1006050:	1090000c 	andi	r2,r2,16384
 1006054:	1000101e 	bne	r2,zero,1006098 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 1006058:	0001883a 	nop
 100605c:	e0bffc17 	ldw	r2,-16(fp)
 1006060:	10c00d17 	ldw	r3,52(r2)
 1006064:	e0bff517 	ldw	r2,-44(fp)
 1006068:	1880051e 	bne	r3,r2,1006080 <altera_avalon_jtag_uart_write+0x1b8>
 100606c:	e0bffc17 	ldw	r2,-16(fp)
 1006070:	10c00917 	ldw	r3,36(r2)
 1006074:	e0bffc17 	ldw	r2,-16(fp)
 1006078:	10800117 	ldw	r2,4(r2)
 100607c:	18bff736 	bltu	r3,r2,100605c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 1006080:	e0bffc17 	ldw	r2,-16(fp)
 1006084:	10800917 	ldw	r2,36(r2)
 1006088:	1000051e 	bne	r2,zero,10060a0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 100608c:	e0bffe17 	ldw	r2,-8(fp)
 1006090:	00bfd016 	blt	zero,r2,1005fd4 <altera_avalon_jtag_uart_write+0x10c>
 1006094:	00000306 	br	10060a4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 1006098:	0001883a 	nop
 100609c:	00000106 	br	10060a4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 10060a0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 10060a4:	e0fffd17 	ldw	r3,-12(fp)
 10060a8:	e0bff717 	ldw	r2,-36(fp)
 10060ac:	18800426 	beq	r3,r2,10060c0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 10060b0:	e0fffd17 	ldw	r3,-12(fp)
 10060b4:	e0bff717 	ldw	r2,-36(fp)
 10060b8:	1885c83a 	sub	r2,r3,r2
 10060bc:	00000606 	br	10060d8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 10060c0:	e0bfff17 	ldw	r2,-4(fp)
 10060c4:	1090000c 	andi	r2,r2,16384
 10060c8:	10000226 	beq	r2,zero,10060d4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 10060cc:	00bffd44 	movi	r2,-11
 10060d0:	00000106 	br	10060d8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10060d4:	00bffec4 	movi	r2,-5
}
 10060d8:	e037883a 	mov	sp,fp
 10060dc:	dfc00117 	ldw	ra,4(sp)
 10060e0:	df000017 	ldw	fp,0(sp)
 10060e4:	dec00204 	addi	sp,sp,8
 10060e8:	f800283a 	ret

010060ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10060ec:	defff504 	addi	sp,sp,-44
 10060f0:	df000a15 	stw	fp,40(sp)
 10060f4:	df000a04 	addi	fp,sp,40
 10060f8:	e13ffc15 	stw	r4,-16(fp)
 10060fc:	e17ffd15 	stw	r5,-12(fp)
 1006100:	e1bffe15 	stw	r6,-8(fp)
 1006104:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1006108:	e03ff615 	stw	zero,-40(fp)
 100610c:	d0a6b817 	ldw	r2,-25888(gp)
  
  if (alt_ticks_per_second ())
 1006110:	10003c26 	beq	r2,zero,1006204 <alt_alarm_start+0x118>
  {
    if (alarm)
 1006114:	e0bffc17 	ldw	r2,-16(fp)
 1006118:	10003826 	beq	r2,zero,10061fc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 100611c:	e0bffc17 	ldw	r2,-16(fp)
 1006120:	e0fffe17 	ldw	r3,-8(fp)
 1006124:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 1006128:	e0bffc17 	ldw	r2,-16(fp)
 100612c:	e0ffff17 	ldw	r3,-4(fp)
 1006130:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006134:	0005303a 	rdctl	r2,status
 1006138:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100613c:	e0fff917 	ldw	r3,-28(fp)
 1006140:	00bfff84 	movi	r2,-2
 1006144:	1884703a 	and	r2,r3,r2
 1006148:	1001703a 	wrctl	status,r2
  
  return context;
 100614c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 1006150:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1006154:	d0a6b917 	ldw	r2,-25884(gp)
      
      current_nticks = alt_nticks();
 1006158:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100615c:	e0fffd17 	ldw	r3,-12(fp)
 1006160:	e0bff617 	ldw	r2,-40(fp)
 1006164:	1885883a 	add	r2,r3,r2
 1006168:	10c00044 	addi	r3,r2,1
 100616c:	e0bffc17 	ldw	r2,-16(fp)
 1006170:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1006174:	e0bffc17 	ldw	r2,-16(fp)
 1006178:	10c00217 	ldw	r3,8(r2)
 100617c:	e0bff617 	ldw	r2,-40(fp)
 1006180:	1880042e 	bgeu	r3,r2,1006194 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 1006184:	e0bffc17 	ldw	r2,-16(fp)
 1006188:	00c00044 	movi	r3,1
 100618c:	10c00405 	stb	r3,16(r2)
 1006190:	00000206 	br	100619c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 1006194:	e0bffc17 	ldw	r2,-16(fp)
 1006198:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100619c:	e0bffc17 	ldw	r2,-16(fp)
 10061a0:	d0e00d04 	addi	r3,gp,-32716
 10061a4:	e0fffa15 	stw	r3,-24(fp)
 10061a8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10061ac:	e0bffb17 	ldw	r2,-20(fp)
 10061b0:	e0fffa17 	ldw	r3,-24(fp)
 10061b4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 10061b8:	e0bffa17 	ldw	r2,-24(fp)
 10061bc:	10c00017 	ldw	r3,0(r2)
 10061c0:	e0bffb17 	ldw	r2,-20(fp)
 10061c4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10061c8:	e0bffa17 	ldw	r2,-24(fp)
 10061cc:	10800017 	ldw	r2,0(r2)
 10061d0:	e0fffb17 	ldw	r3,-20(fp)
 10061d4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 10061d8:	e0bffa17 	ldw	r2,-24(fp)
 10061dc:	e0fffb17 	ldw	r3,-20(fp)
 10061e0:	10c00015 	stw	r3,0(r2)
 10061e4:	e0bff817 	ldw	r2,-32(fp)
 10061e8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10061ec:	e0bff717 	ldw	r2,-36(fp)
 10061f0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10061f4:	0005883a 	mov	r2,zero
 10061f8:	00000306 	br	1006208 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 10061fc:	00bffa84 	movi	r2,-22
 1006200:	00000106 	br	1006208 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 1006204:	00bfde84 	movi	r2,-134
  }
}
 1006208:	e037883a 	mov	sp,fp
 100620c:	df000017 	ldw	fp,0(sp)
 1006210:	dec00104 	addi	sp,sp,4
 1006214:	f800283a 	ret

01006218 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 1006218:	defffa04 	addi	sp,sp,-24
 100621c:	dfc00515 	stw	ra,20(sp)
 1006220:	df000415 	stw	fp,16(sp)
 1006224:	df000404 	addi	fp,sp,16
 1006228:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 100622c:	008000c4 	movi	r2,3
 1006230:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 1006234:	e0fffd17 	ldw	r3,-12(fp)
 1006238:	008003f4 	movhi	r2,15
 100623c:	10909004 	addi	r2,r2,16960
 1006240:	1885383a 	mul	r2,r3,r2
 1006244:	100b883a 	mov	r5,r2
 1006248:	0100bef4 	movhi	r4,763
 100624c:	213c2004 	addi	r4,r4,-3968
 1006250:	10047f80 	call	10047f8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 1006254:	100b883a 	mov	r5,r2
 1006258:	01200034 	movhi	r4,32768
 100625c:	213fffc4 	addi	r4,r4,-1
 1006260:	10047f80 	call	10047f8 <__udivsi3>
 1006264:	100b883a 	mov	r5,r2
 1006268:	e13fff17 	ldw	r4,-4(fp)
 100626c:	10047f80 	call	10047f8 <__udivsi3>
 1006270:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 1006274:	e0bffe17 	ldw	r2,-8(fp)
 1006278:	10002a26 	beq	r2,zero,1006324 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 100627c:	e03ffc15 	stw	zero,-16(fp)
 1006280:	00001706 	br	10062e0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 1006284:	00a00034 	movhi	r2,32768
 1006288:	10bfffc4 	addi	r2,r2,-1
 100628c:	10bfffc4 	addi	r2,r2,-1
 1006290:	103ffe1e 	bne	r2,zero,100628c <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 1006294:	e0fffd17 	ldw	r3,-12(fp)
 1006298:	008003f4 	movhi	r2,15
 100629c:	10909004 	addi	r2,r2,16960
 10062a0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 10062a4:	100b883a 	mov	r5,r2
 10062a8:	0100bef4 	movhi	r4,763
 10062ac:	213c2004 	addi	r4,r4,-3968
 10062b0:	10047f80 	call	10047f8 <__udivsi3>
 10062b4:	100b883a 	mov	r5,r2
 10062b8:	01200034 	movhi	r4,32768
 10062bc:	213fffc4 	addi	r4,r4,-1
 10062c0:	10047f80 	call	10047f8 <__udivsi3>
 10062c4:	1007883a 	mov	r3,r2
 10062c8:	e0bfff17 	ldw	r2,-4(fp)
 10062cc:	10c5c83a 	sub	r2,r2,r3
 10062d0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 10062d4:	e0bffc17 	ldw	r2,-16(fp)
 10062d8:	10800044 	addi	r2,r2,1
 10062dc:	e0bffc15 	stw	r2,-16(fp)
 10062e0:	e0fffc17 	ldw	r3,-16(fp)
 10062e4:	e0bffe17 	ldw	r2,-8(fp)
 10062e8:	18bfe616 	blt	r3,r2,1006284 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 10062ec:	e0fffd17 	ldw	r3,-12(fp)
 10062f0:	008003f4 	movhi	r2,15
 10062f4:	10909004 	addi	r2,r2,16960
 10062f8:	1885383a 	mul	r2,r3,r2
 10062fc:	100b883a 	mov	r5,r2
 1006300:	0100bef4 	movhi	r4,763
 1006304:	213c2004 	addi	r4,r4,-3968
 1006308:	10047f80 	call	10047f8 <__udivsi3>
 100630c:	1007883a 	mov	r3,r2
 1006310:	e0bfff17 	ldw	r2,-4(fp)
 1006314:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1006318:	10bfffc4 	addi	r2,r2,-1
 100631c:	103ffe1e 	bne	r2,zero,1006318 <alt_busy_sleep+0x100>
 1006320:	00000d06 	br	1006358 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 1006324:	e0fffd17 	ldw	r3,-12(fp)
 1006328:	008003f4 	movhi	r2,15
 100632c:	10909004 	addi	r2,r2,16960
 1006330:	1885383a 	mul	r2,r3,r2
 1006334:	100b883a 	mov	r5,r2
 1006338:	0100bef4 	movhi	r4,763
 100633c:	213c2004 	addi	r4,r4,-3968
 1006340:	10047f80 	call	10047f8 <__udivsi3>
 1006344:	1007883a 	mov	r3,r2
 1006348:	e0bfff17 	ldw	r2,-4(fp)
 100634c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 1006350:	10bfffc4 	addi	r2,r2,-1
 1006354:	00bffe16 	blt	zero,r2,1006350 <alt_busy_sleep+0x138>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 1006358:	0005883a 	mov	r2,zero
}
 100635c:	e037883a 	mov	sp,fp
 1006360:	dfc00117 	ldw	ra,4(sp)
 1006364:	df000017 	ldw	fp,0(sp)
 1006368:	dec00204 	addi	sp,sp,8
 100636c:	f800283a 	ret

01006370 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1006370:	defffe04 	addi	sp,sp,-8
 1006374:	df000115 	stw	fp,4(sp)
 1006378:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100637c:	e03fff15 	stw	zero,-4(fp)
 1006380:	00000506 	br	1006398 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 1006384:	e0bfff17 	ldw	r2,-4(fp)
 1006388:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 100638c:	e0bfff17 	ldw	r2,-4(fp)
 1006390:	10800804 	addi	r2,r2,32
 1006394:	e0bfff15 	stw	r2,-4(fp)
 1006398:	e0bfff17 	ldw	r2,-4(fp)
 100639c:	10820030 	cmpltui	r2,r2,2048
 10063a0:	103ff81e 	bne	r2,zero,1006384 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10063a4:	0001883a 	nop
 10063a8:	e037883a 	mov	sp,fp
 10063ac:	df000017 	ldw	fp,0(sp)
 10063b0:	dec00104 	addi	sp,sp,4
 10063b4:	f800283a 	ret

010063b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10063b8:	defffe04 	addi	sp,sp,-8
 10063bc:	dfc00115 	stw	ra,4(sp)
 10063c0:	df000015 	stw	fp,0(sp)
 10063c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 10063c8:	d0a00b17 	ldw	r2,-32724(gp)
 10063cc:	10000326 	beq	r2,zero,10063dc <alt_get_errno+0x24>
 10063d0:	d0a00b17 	ldw	r2,-32724(gp)
 10063d4:	103ee83a 	callr	r2
 10063d8:	00000106 	br	10063e0 <alt_get_errno+0x28>
 10063dc:	d0a6ad04 	addi	r2,gp,-25932
}
 10063e0:	e037883a 	mov	sp,fp
 10063e4:	dfc00117 	ldw	ra,4(sp)
 10063e8:	df000017 	ldw	fp,0(sp)
 10063ec:	dec00204 	addi	sp,sp,8
 10063f0:	f800283a 	ret

010063f4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10063f4:	defffa04 	addi	sp,sp,-24
 10063f8:	dfc00515 	stw	ra,20(sp)
 10063fc:	df000415 	stw	fp,16(sp)
 1006400:	df000404 	addi	fp,sp,16
 1006404:	e13ffe15 	stw	r4,-8(fp)
 1006408:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100640c:	e0bffe17 	ldw	r2,-8(fp)
 1006410:	10000326 	beq	r2,zero,1006420 <alt_dev_llist_insert+0x2c>
 1006414:	e0bffe17 	ldw	r2,-8(fp)
 1006418:	10800217 	ldw	r2,8(r2)
 100641c:	1000061e 	bne	r2,zero,1006438 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 1006420:	10063b80 	call	10063b8 <alt_get_errno>
 1006424:	1007883a 	mov	r3,r2
 1006428:	00800584 	movi	r2,22
 100642c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1006430:	00bffa84 	movi	r2,-22
 1006434:	00001306 	br	1006484 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1006438:	e0bffe17 	ldw	r2,-8(fp)
 100643c:	e0ffff17 	ldw	r3,-4(fp)
 1006440:	e0fffc15 	stw	r3,-16(fp)
 1006444:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1006448:	e0bffd17 	ldw	r2,-12(fp)
 100644c:	e0fffc17 	ldw	r3,-16(fp)
 1006450:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 1006454:	e0bffc17 	ldw	r2,-16(fp)
 1006458:	10c00017 	ldw	r3,0(r2)
 100645c:	e0bffd17 	ldw	r2,-12(fp)
 1006460:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1006464:	e0bffc17 	ldw	r2,-16(fp)
 1006468:	10800017 	ldw	r2,0(r2)
 100646c:	e0fffd17 	ldw	r3,-12(fp)
 1006470:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 1006474:	e0bffc17 	ldw	r2,-16(fp)
 1006478:	e0fffd17 	ldw	r3,-12(fp)
 100647c:	10c00015 	stw	r3,0(r2)

  return 0;  
 1006480:	0005883a 	mov	r2,zero
}
 1006484:	e037883a 	mov	sp,fp
 1006488:	dfc00117 	ldw	ra,4(sp)
 100648c:	df000017 	ldw	fp,0(sp)
 1006490:	dec00204 	addi	sp,sp,8
 1006494:	f800283a 	ret

01006498 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1006498:	defffd04 	addi	sp,sp,-12
 100649c:	dfc00215 	stw	ra,8(sp)
 10064a0:	df000115 	stw	fp,4(sp)
 10064a4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10064a8:	00804034 	movhi	r2,256
 10064ac:	109e0504 	addi	r2,r2,30740
 10064b0:	e0bfff15 	stw	r2,-4(fp)
 10064b4:	00000606 	br	10064d0 <_do_ctors+0x38>
        (*ctor) (); 
 10064b8:	e0bfff17 	ldw	r2,-4(fp)
 10064bc:	10800017 	ldw	r2,0(r2)
 10064c0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10064c4:	e0bfff17 	ldw	r2,-4(fp)
 10064c8:	10bfff04 	addi	r2,r2,-4
 10064cc:	e0bfff15 	stw	r2,-4(fp)
 10064d0:	e0ffff17 	ldw	r3,-4(fp)
 10064d4:	00804034 	movhi	r2,256
 10064d8:	109e0604 	addi	r2,r2,30744
 10064dc:	18bff62e 	bgeu	r3,r2,10064b8 <_do_ctors+0x20>
        (*ctor) (); 
}
 10064e0:	0001883a 	nop
 10064e4:	e037883a 	mov	sp,fp
 10064e8:	dfc00117 	ldw	ra,4(sp)
 10064ec:	df000017 	ldw	fp,0(sp)
 10064f0:	dec00204 	addi	sp,sp,8
 10064f4:	f800283a 	ret

010064f8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10064f8:	defffd04 	addi	sp,sp,-12
 10064fc:	dfc00215 	stw	ra,8(sp)
 1006500:	df000115 	stw	fp,4(sp)
 1006504:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006508:	00804034 	movhi	r2,256
 100650c:	109e0504 	addi	r2,r2,30740
 1006510:	e0bfff15 	stw	r2,-4(fp)
 1006514:	00000606 	br	1006530 <_do_dtors+0x38>
        (*dtor) (); 
 1006518:	e0bfff17 	ldw	r2,-4(fp)
 100651c:	10800017 	ldw	r2,0(r2)
 1006520:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1006524:	e0bfff17 	ldw	r2,-4(fp)
 1006528:	10bfff04 	addi	r2,r2,-4
 100652c:	e0bfff15 	stw	r2,-4(fp)
 1006530:	e0ffff17 	ldw	r3,-4(fp)
 1006534:	00804034 	movhi	r2,256
 1006538:	109e0604 	addi	r2,r2,30744
 100653c:	18bff62e 	bgeu	r3,r2,1006518 <_do_dtors+0x20>
        (*dtor) (); 
}
 1006540:	0001883a 	nop
 1006544:	e037883a 	mov	sp,fp
 1006548:	dfc00117 	ldw	ra,4(sp)
 100654c:	df000017 	ldw	fp,0(sp)
 1006550:	dec00204 	addi	sp,sp,8
 1006554:	f800283a 	ret

01006558 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1006558:	defffe04 	addi	sp,sp,-8
 100655c:	dfc00115 	stw	ra,4(sp)
 1006560:	df000015 	stw	fp,0(sp)
 1006564:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1006568:	01440004 	movi	r5,4096
 100656c:	0009883a 	mov	r4,zero
 1006570:	1006e200 	call	1006e20 <alt_icache_flush>
#endif
}
 1006574:	0001883a 	nop
 1006578:	e037883a 	mov	sp,fp
 100657c:	dfc00117 	ldw	ra,4(sp)
 1006580:	df000017 	ldw	fp,0(sp)
 1006584:	dec00204 	addi	sp,sp,8
 1006588:	f800283a 	ret

0100658c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100658c:	defff904 	addi	sp,sp,-28
 1006590:	dfc00615 	stw	ra,24(sp)
 1006594:	df000515 	stw	fp,20(sp)
 1006598:	df000504 	addi	fp,sp,20
 100659c:	e13ffc15 	stw	r4,-16(fp)
 10065a0:	e17ffd15 	stw	r5,-12(fp)
 10065a4:	e1bffe15 	stw	r6,-8(fp)
 10065a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 10065ac:	e0800217 	ldw	r2,8(fp)
 10065b0:	d8800015 	stw	r2,0(sp)
 10065b4:	e1ffff17 	ldw	r7,-4(fp)
 10065b8:	e1bffe17 	ldw	r6,-8(fp)
 10065bc:	e17ffd17 	ldw	r5,-12(fp)
 10065c0:	e13ffc17 	ldw	r4,-16(fp)
 10065c4:	100673c0 	call	100673c <alt_iic_isr_register>
}  
 10065c8:	e037883a 	mov	sp,fp
 10065cc:	dfc00117 	ldw	ra,4(sp)
 10065d0:	df000017 	ldw	fp,0(sp)
 10065d4:	dec00204 	addi	sp,sp,8
 10065d8:	f800283a 	ret

010065dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 10065dc:	defff904 	addi	sp,sp,-28
 10065e0:	df000615 	stw	fp,24(sp)
 10065e4:	df000604 	addi	fp,sp,24
 10065e8:	e13ffe15 	stw	r4,-8(fp)
 10065ec:	e17fff15 	stw	r5,-4(fp)
 10065f0:	e0bfff17 	ldw	r2,-4(fp)
 10065f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10065f8:	0005303a 	rdctl	r2,status
 10065fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006600:	e0fffb17 	ldw	r3,-20(fp)
 1006604:	00bfff84 	movi	r2,-2
 1006608:	1884703a 	and	r2,r3,r2
 100660c:	1001703a 	wrctl	status,r2
  
  return context;
 1006610:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1006614:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 1006618:	00c00044 	movi	r3,1
 100661c:	e0bffa17 	ldw	r2,-24(fp)
 1006620:	1884983a 	sll	r2,r3,r2
 1006624:	1007883a 	mov	r3,r2
 1006628:	d0a6ba17 	ldw	r2,-25880(gp)
 100662c:	1884b03a 	or	r2,r3,r2
 1006630:	d0a6ba15 	stw	r2,-25880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1006634:	d0a6ba17 	ldw	r2,-25880(gp)
 1006638:	100170fa 	wrctl	ienable,r2
 100663c:	e0bffc17 	ldw	r2,-16(fp)
 1006640:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006644:	e0bffd17 	ldw	r2,-12(fp)
 1006648:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100664c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 1006650:	0001883a 	nop
}
 1006654:	e037883a 	mov	sp,fp
 1006658:	df000017 	ldw	fp,0(sp)
 100665c:	dec00104 	addi	sp,sp,4
 1006660:	f800283a 	ret

01006664 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 1006664:	defff904 	addi	sp,sp,-28
 1006668:	df000615 	stw	fp,24(sp)
 100666c:	df000604 	addi	fp,sp,24
 1006670:	e13ffe15 	stw	r4,-8(fp)
 1006674:	e17fff15 	stw	r5,-4(fp)
 1006678:	e0bfff17 	ldw	r2,-4(fp)
 100667c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006680:	0005303a 	rdctl	r2,status
 1006684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006688:	e0fffb17 	ldw	r3,-20(fp)
 100668c:	00bfff84 	movi	r2,-2
 1006690:	1884703a 	and	r2,r3,r2
 1006694:	1001703a 	wrctl	status,r2
  
  return context;
 1006698:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100669c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 10066a0:	00c00044 	movi	r3,1
 10066a4:	e0bffa17 	ldw	r2,-24(fp)
 10066a8:	1884983a 	sll	r2,r3,r2
 10066ac:	0084303a 	nor	r2,zero,r2
 10066b0:	1007883a 	mov	r3,r2
 10066b4:	d0a6ba17 	ldw	r2,-25880(gp)
 10066b8:	1884703a 	and	r2,r3,r2
 10066bc:	d0a6ba15 	stw	r2,-25880(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10066c0:	d0a6ba17 	ldw	r2,-25880(gp)
 10066c4:	100170fa 	wrctl	ienable,r2
 10066c8:	e0bffc17 	ldw	r2,-16(fp)
 10066cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10066d0:	e0bffd17 	ldw	r2,-12(fp)
 10066d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 10066d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 10066dc:	0001883a 	nop
}
 10066e0:	e037883a 	mov	sp,fp
 10066e4:	df000017 	ldw	fp,0(sp)
 10066e8:	dec00104 	addi	sp,sp,4
 10066ec:	f800283a 	ret

010066f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 10066f0:	defffc04 	addi	sp,sp,-16
 10066f4:	df000315 	stw	fp,12(sp)
 10066f8:	df000304 	addi	fp,sp,12
 10066fc:	e13ffe15 	stw	r4,-8(fp)
 1006700:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 1006704:	000530fa 	rdctl	r2,ienable
 1006708:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100670c:	00c00044 	movi	r3,1
 1006710:	e0bfff17 	ldw	r2,-4(fp)
 1006714:	1884983a 	sll	r2,r3,r2
 1006718:	1007883a 	mov	r3,r2
 100671c:	e0bffd17 	ldw	r2,-12(fp)
 1006720:	1884703a 	and	r2,r3,r2
 1006724:	1004c03a 	cmpne	r2,r2,zero
 1006728:	10803fcc 	andi	r2,r2,255
}
 100672c:	e037883a 	mov	sp,fp
 1006730:	df000017 	ldw	fp,0(sp)
 1006734:	dec00104 	addi	sp,sp,4
 1006738:	f800283a 	ret

0100673c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100673c:	defff504 	addi	sp,sp,-44
 1006740:	dfc00a15 	stw	ra,40(sp)
 1006744:	df000915 	stw	fp,36(sp)
 1006748:	df000904 	addi	fp,sp,36
 100674c:	e13ffc15 	stw	r4,-16(fp)
 1006750:	e17ffd15 	stw	r5,-12(fp)
 1006754:	e1bffe15 	stw	r6,-8(fp)
 1006758:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 100675c:	00bffa84 	movi	r2,-22
 1006760:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 1006764:	e0bffd17 	ldw	r2,-12(fp)
 1006768:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100676c:	e0bff817 	ldw	r2,-32(fp)
 1006770:	10800808 	cmpgei	r2,r2,32
 1006774:	1000271e 	bne	r2,zero,1006814 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1006778:	0005303a 	rdctl	r2,status
 100677c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1006780:	e0fffb17 	ldw	r3,-20(fp)
 1006784:	00bfff84 	movi	r2,-2
 1006788:	1884703a 	and	r2,r3,r2
 100678c:	1001703a 	wrctl	status,r2
  
  return context;
 1006790:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 1006794:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 1006798:	00804074 	movhi	r2,257
 100679c:	10abae04 	addi	r2,r2,-20808
 10067a0:	e0fff817 	ldw	r3,-32(fp)
 10067a4:	180690fa 	slli	r3,r3,3
 10067a8:	10c5883a 	add	r2,r2,r3
 10067ac:	e0fffe17 	ldw	r3,-8(fp)
 10067b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 10067b4:	00804074 	movhi	r2,257
 10067b8:	10abae04 	addi	r2,r2,-20808
 10067bc:	e0fff817 	ldw	r3,-32(fp)
 10067c0:	180690fa 	slli	r3,r3,3
 10067c4:	10c5883a 	add	r2,r2,r3
 10067c8:	10800104 	addi	r2,r2,4
 10067cc:	e0ffff17 	ldw	r3,-4(fp)
 10067d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 10067d4:	e0bffe17 	ldw	r2,-8(fp)
 10067d8:	10000526 	beq	r2,zero,10067f0 <alt_iic_isr_register+0xb4>
 10067dc:	e0bff817 	ldw	r2,-32(fp)
 10067e0:	100b883a 	mov	r5,r2
 10067e4:	e13ffc17 	ldw	r4,-16(fp)
 10067e8:	10065dc0 	call	10065dc <alt_ic_irq_enable>
 10067ec:	00000406 	br	1006800 <alt_iic_isr_register+0xc4>
 10067f0:	e0bff817 	ldw	r2,-32(fp)
 10067f4:	100b883a 	mov	r5,r2
 10067f8:	e13ffc17 	ldw	r4,-16(fp)
 10067fc:	10066640 	call	1006664 <alt_ic_irq_disable>
 1006800:	e0bff715 	stw	r2,-36(fp)
 1006804:	e0bffa17 	ldw	r2,-24(fp)
 1006808:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100680c:	e0bff917 	ldw	r2,-28(fp)
 1006810:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 1006814:	e0bff717 	ldw	r2,-36(fp)
}
 1006818:	e037883a 	mov	sp,fp
 100681c:	dfc00117 	ldw	ra,4(sp)
 1006820:	df000017 	ldw	fp,0(sp)
 1006824:	dec00204 	addi	sp,sp,8
 1006828:	f800283a 	ret

0100682c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100682c:	defff904 	addi	sp,sp,-28
 1006830:	dfc00615 	stw	ra,24(sp)
 1006834:	df000515 	stw	fp,20(sp)
 1006838:	df000504 	addi	fp,sp,20
 100683c:	e13ffc15 	stw	r4,-16(fp)
 1006840:	e17ffd15 	stw	r5,-12(fp)
 1006844:	e1bffe15 	stw	r6,-8(fp)
 1006848:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100684c:	e1bfff17 	ldw	r6,-4(fp)
 1006850:	e17ffe17 	ldw	r5,-8(fp)
 1006854:	e13ffd17 	ldw	r4,-12(fp)
 1006858:	1006a6c0 	call	1006a6c <open>
 100685c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1006860:	e0bffb17 	ldw	r2,-20(fp)
 1006864:	10001c16 	blt	r2,zero,10068d8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 1006868:	00804074 	movhi	r2,257
 100686c:	10a07004 	addi	r2,r2,-32320
 1006870:	e0fffb17 	ldw	r3,-20(fp)
 1006874:	18c00324 	muli	r3,r3,12
 1006878:	10c5883a 	add	r2,r2,r3
 100687c:	10c00017 	ldw	r3,0(r2)
 1006880:	e0bffc17 	ldw	r2,-16(fp)
 1006884:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1006888:	00804074 	movhi	r2,257
 100688c:	10a07004 	addi	r2,r2,-32320
 1006890:	e0fffb17 	ldw	r3,-20(fp)
 1006894:	18c00324 	muli	r3,r3,12
 1006898:	10c5883a 	add	r2,r2,r3
 100689c:	10800104 	addi	r2,r2,4
 10068a0:	10c00017 	ldw	r3,0(r2)
 10068a4:	e0bffc17 	ldw	r2,-16(fp)
 10068a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10068ac:	00804074 	movhi	r2,257
 10068b0:	10a07004 	addi	r2,r2,-32320
 10068b4:	e0fffb17 	ldw	r3,-20(fp)
 10068b8:	18c00324 	muli	r3,r3,12
 10068bc:	10c5883a 	add	r2,r2,r3
 10068c0:	10800204 	addi	r2,r2,8
 10068c4:	10c00017 	ldw	r3,0(r2)
 10068c8:	e0bffc17 	ldw	r2,-16(fp)
 10068cc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 10068d0:	e13ffb17 	ldw	r4,-20(fp)
 10068d4:	10051a40 	call	10051a4 <alt_release_fd>
  }
} 
 10068d8:	0001883a 	nop
 10068dc:	e037883a 	mov	sp,fp
 10068e0:	dfc00117 	ldw	ra,4(sp)
 10068e4:	df000017 	ldw	fp,0(sp)
 10068e8:	dec00204 	addi	sp,sp,8
 10068ec:	f800283a 	ret

010068f0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 10068f0:	defffb04 	addi	sp,sp,-20
 10068f4:	dfc00415 	stw	ra,16(sp)
 10068f8:	df000315 	stw	fp,12(sp)
 10068fc:	df000304 	addi	fp,sp,12
 1006900:	e13ffd15 	stw	r4,-12(fp)
 1006904:	e17ffe15 	stw	r5,-8(fp)
 1006908:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100690c:	01c07fc4 	movi	r7,511
 1006910:	01800044 	movi	r6,1
 1006914:	e17ffd17 	ldw	r5,-12(fp)
 1006918:	01004074 	movhi	r4,257
 100691c:	21207304 	addi	r4,r4,-32308
 1006920:	100682c0 	call	100682c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1006924:	01c07fc4 	movi	r7,511
 1006928:	000d883a 	mov	r6,zero
 100692c:	e17ffe17 	ldw	r5,-8(fp)
 1006930:	01004074 	movhi	r4,257
 1006934:	21207004 	addi	r4,r4,-32320
 1006938:	100682c0 	call	100682c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100693c:	01c07fc4 	movi	r7,511
 1006940:	01800044 	movi	r6,1
 1006944:	e17fff17 	ldw	r5,-4(fp)
 1006948:	01004074 	movhi	r4,257
 100694c:	21207604 	addi	r4,r4,-32296
 1006950:	100682c0 	call	100682c <alt_open_fd>
}  
 1006954:	0001883a 	nop
 1006958:	e037883a 	mov	sp,fp
 100695c:	dfc00117 	ldw	ra,4(sp)
 1006960:	df000017 	ldw	fp,0(sp)
 1006964:	dec00204 	addi	sp,sp,8
 1006968:	f800283a 	ret

0100696c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100696c:	defffe04 	addi	sp,sp,-8
 1006970:	dfc00115 	stw	ra,4(sp)
 1006974:	df000015 	stw	fp,0(sp)
 1006978:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 100697c:	d0a00b17 	ldw	r2,-32724(gp)
 1006980:	10000326 	beq	r2,zero,1006990 <alt_get_errno+0x24>
 1006984:	d0a00b17 	ldw	r2,-32724(gp)
 1006988:	103ee83a 	callr	r2
 100698c:	00000106 	br	1006994 <alt_get_errno+0x28>
 1006990:	d0a6ad04 	addi	r2,gp,-25932
}
 1006994:	e037883a 	mov	sp,fp
 1006998:	dfc00117 	ldw	ra,4(sp)
 100699c:	df000017 	ldw	fp,0(sp)
 10069a0:	dec00204 	addi	sp,sp,8
 10069a4:	f800283a 	ret

010069a8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10069a8:	defffd04 	addi	sp,sp,-12
 10069ac:	df000215 	stw	fp,8(sp)
 10069b0:	df000204 	addi	fp,sp,8
 10069b4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10069b8:	e0bfff17 	ldw	r2,-4(fp)
 10069bc:	10800217 	ldw	r2,8(r2)
 10069c0:	10d00034 	orhi	r3,r2,16384
 10069c4:	e0bfff17 	ldw	r2,-4(fp)
 10069c8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10069cc:	e03ffe15 	stw	zero,-8(fp)
 10069d0:	00001d06 	br	1006a48 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10069d4:	00804074 	movhi	r2,257
 10069d8:	10a07004 	addi	r2,r2,-32320
 10069dc:	e0fffe17 	ldw	r3,-8(fp)
 10069e0:	18c00324 	muli	r3,r3,12
 10069e4:	10c5883a 	add	r2,r2,r3
 10069e8:	10c00017 	ldw	r3,0(r2)
 10069ec:	e0bfff17 	ldw	r2,-4(fp)
 10069f0:	10800017 	ldw	r2,0(r2)
 10069f4:	1880111e 	bne	r3,r2,1006a3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 10069f8:	00804074 	movhi	r2,257
 10069fc:	10a07004 	addi	r2,r2,-32320
 1006a00:	e0fffe17 	ldw	r3,-8(fp)
 1006a04:	18c00324 	muli	r3,r3,12
 1006a08:	10c5883a 	add	r2,r2,r3
 1006a0c:	10800204 	addi	r2,r2,8
 1006a10:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1006a14:	1000090e 	bge	r2,zero,1006a3c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 1006a18:	e0bffe17 	ldw	r2,-8(fp)
 1006a1c:	10c00324 	muli	r3,r2,12
 1006a20:	00804074 	movhi	r2,257
 1006a24:	10a07004 	addi	r2,r2,-32320
 1006a28:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 1006a2c:	e0bfff17 	ldw	r2,-4(fp)
 1006a30:	18800226 	beq	r3,r2,1006a3c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1006a34:	00bffcc4 	movi	r2,-13
 1006a38:	00000806 	br	1006a5c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1006a3c:	e0bffe17 	ldw	r2,-8(fp)
 1006a40:	10800044 	addi	r2,r2,1
 1006a44:	e0bffe15 	stw	r2,-8(fp)
 1006a48:	d0a00a17 	ldw	r2,-32728(gp)
 1006a4c:	1007883a 	mov	r3,r2
 1006a50:	e0bffe17 	ldw	r2,-8(fp)
 1006a54:	18bfdf2e 	bgeu	r3,r2,10069d4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1006a58:	0005883a 	mov	r2,zero
}
 1006a5c:	e037883a 	mov	sp,fp
 1006a60:	df000017 	ldw	fp,0(sp)
 1006a64:	dec00104 	addi	sp,sp,4
 1006a68:	f800283a 	ret

01006a6c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1006a6c:	defff604 	addi	sp,sp,-40
 1006a70:	dfc00915 	stw	ra,36(sp)
 1006a74:	df000815 	stw	fp,32(sp)
 1006a78:	df000804 	addi	fp,sp,32
 1006a7c:	e13ffd15 	stw	r4,-12(fp)
 1006a80:	e17ffe15 	stw	r5,-8(fp)
 1006a84:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1006a88:	00bfffc4 	movi	r2,-1
 1006a8c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 1006a90:	00bffb44 	movi	r2,-19
 1006a94:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 1006a98:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1006a9c:	d1600804 	addi	r5,gp,-32736
 1006aa0:	e13ffd17 	ldw	r4,-12(fp)
 1006aa4:	1006be40 	call	1006be4 <alt_find_dev>
 1006aa8:	e0bff815 	stw	r2,-32(fp)
 1006aac:	e0bff817 	ldw	r2,-32(fp)
 1006ab0:	1000051e 	bne	r2,zero,1006ac8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1006ab4:	e13ffd17 	ldw	r4,-12(fp)
 1006ab8:	1006c740 	call	1006c74 <alt_find_file>
 1006abc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 1006ac0:	00800044 	movi	r2,1
 1006ac4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1006ac8:	e0bff817 	ldw	r2,-32(fp)
 1006acc:	10002926 	beq	r2,zero,1006b74 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1006ad0:	e13ff817 	ldw	r4,-32(fp)
 1006ad4:	1006d7c0 	call	1006d7c <alt_get_fd>
 1006ad8:	e0bff915 	stw	r2,-28(fp)
 1006adc:	e0bff917 	ldw	r2,-28(fp)
 1006ae0:	1000030e 	bge	r2,zero,1006af0 <open+0x84>
    {
      status = index;
 1006ae4:	e0bff917 	ldw	r2,-28(fp)
 1006ae8:	e0bffa15 	stw	r2,-24(fp)
 1006aec:	00002306 	br	1006b7c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 1006af0:	e0bff917 	ldw	r2,-28(fp)
 1006af4:	10c00324 	muli	r3,r2,12
 1006af8:	00804074 	movhi	r2,257
 1006afc:	10a07004 	addi	r2,r2,-32320
 1006b00:	1885883a 	add	r2,r3,r2
 1006b04:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1006b08:	e0fffe17 	ldw	r3,-8(fp)
 1006b0c:	00900034 	movhi	r2,16384
 1006b10:	10bfffc4 	addi	r2,r2,-1
 1006b14:	1886703a 	and	r3,r3,r2
 1006b18:	e0bffc17 	ldw	r2,-16(fp)
 1006b1c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1006b20:	e0bffb17 	ldw	r2,-20(fp)
 1006b24:	1000051e 	bne	r2,zero,1006b3c <open+0xd0>
 1006b28:	e13ffc17 	ldw	r4,-16(fp)
 1006b2c:	10069a80 	call	10069a8 <alt_file_locked>
 1006b30:	e0bffa15 	stw	r2,-24(fp)
 1006b34:	e0bffa17 	ldw	r2,-24(fp)
 1006b38:	10001016 	blt	r2,zero,1006b7c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1006b3c:	e0bff817 	ldw	r2,-32(fp)
 1006b40:	10800317 	ldw	r2,12(r2)
 1006b44:	10000826 	beq	r2,zero,1006b68 <open+0xfc>
 1006b48:	e0bff817 	ldw	r2,-32(fp)
 1006b4c:	10800317 	ldw	r2,12(r2)
 1006b50:	e1ffff17 	ldw	r7,-4(fp)
 1006b54:	e1bffe17 	ldw	r6,-8(fp)
 1006b58:	e17ffd17 	ldw	r5,-12(fp)
 1006b5c:	e13ffc17 	ldw	r4,-16(fp)
 1006b60:	103ee83a 	callr	r2
 1006b64:	00000106 	br	1006b6c <open+0x100>
 1006b68:	0005883a 	mov	r2,zero
 1006b6c:	e0bffa15 	stw	r2,-24(fp)
 1006b70:	00000206 	br	1006b7c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1006b74:	00bffb44 	movi	r2,-19
 1006b78:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1006b7c:	e0bffa17 	ldw	r2,-24(fp)
 1006b80:	1000090e 	bge	r2,zero,1006ba8 <open+0x13c>
  {
    alt_release_fd (index);  
 1006b84:	e13ff917 	ldw	r4,-28(fp)
 1006b88:	10051a40 	call	10051a4 <alt_release_fd>
    ALT_ERRNO = -status;
 1006b8c:	100696c0 	call	100696c <alt_get_errno>
 1006b90:	1007883a 	mov	r3,r2
 1006b94:	e0bffa17 	ldw	r2,-24(fp)
 1006b98:	0085c83a 	sub	r2,zero,r2
 1006b9c:	18800015 	stw	r2,0(r3)
    return -1;
 1006ba0:	00bfffc4 	movi	r2,-1
 1006ba4:	00000106 	br	1006bac <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 1006ba8:	e0bff917 	ldw	r2,-28(fp)
}
 1006bac:	e037883a 	mov	sp,fp
 1006bb0:	dfc00117 	ldw	ra,4(sp)
 1006bb4:	df000017 	ldw	fp,0(sp)
 1006bb8:	dec00204 	addi	sp,sp,8
 1006bbc:	f800283a 	ret

01006bc0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 1006bc0:	deffff04 	addi	sp,sp,-4
 1006bc4:	df000015 	stw	fp,0(sp)
 1006bc8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1006bcc:	000170fa 	wrctl	ienable,zero
}
 1006bd0:	0001883a 	nop
 1006bd4:	e037883a 	mov	sp,fp
 1006bd8:	df000017 	ldw	fp,0(sp)
 1006bdc:	dec00104 	addi	sp,sp,4
 1006be0:	f800283a 	ret

01006be4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1006be4:	defffa04 	addi	sp,sp,-24
 1006be8:	dfc00515 	stw	ra,20(sp)
 1006bec:	df000415 	stw	fp,16(sp)
 1006bf0:	df000404 	addi	fp,sp,16
 1006bf4:	e13ffe15 	stw	r4,-8(fp)
 1006bf8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1006bfc:	e0bfff17 	ldw	r2,-4(fp)
 1006c00:	10800017 	ldw	r2,0(r2)
 1006c04:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1006c08:	e13ffe17 	ldw	r4,-8(fp)
 1006c0c:	1001ab40 	call	1001ab4 <strlen>
 1006c10:	10800044 	addi	r2,r2,1
 1006c14:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006c18:	00000d06 	br	1006c50 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1006c1c:	e0bffc17 	ldw	r2,-16(fp)
 1006c20:	10800217 	ldw	r2,8(r2)
 1006c24:	e0fffd17 	ldw	r3,-12(fp)
 1006c28:	180d883a 	mov	r6,r3
 1006c2c:	e17ffe17 	ldw	r5,-8(fp)
 1006c30:	1009883a 	mov	r4,r2
 1006c34:	1006f980 	call	1006f98 <memcmp>
 1006c38:	1000021e 	bne	r2,zero,1006c44 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1006c3c:	e0bffc17 	ldw	r2,-16(fp)
 1006c40:	00000706 	br	1006c60 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1006c44:	e0bffc17 	ldw	r2,-16(fp)
 1006c48:	10800017 	ldw	r2,0(r2)
 1006c4c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1006c50:	e0fffc17 	ldw	r3,-16(fp)
 1006c54:	e0bfff17 	ldw	r2,-4(fp)
 1006c58:	18bff01e 	bne	r3,r2,1006c1c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1006c5c:	0005883a 	mov	r2,zero
}
 1006c60:	e037883a 	mov	sp,fp
 1006c64:	dfc00117 	ldw	ra,4(sp)
 1006c68:	df000017 	ldw	fp,0(sp)
 1006c6c:	dec00204 	addi	sp,sp,8
 1006c70:	f800283a 	ret

01006c74 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1006c74:	defffb04 	addi	sp,sp,-20
 1006c78:	dfc00415 	stw	ra,16(sp)
 1006c7c:	df000315 	stw	fp,12(sp)
 1006c80:	df000304 	addi	fp,sp,12
 1006c84:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1006c88:	d0a00617 	ldw	r2,-32744(gp)
 1006c8c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1006c90:	00003106 	br	1006d58 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 1006c94:	e0bffd17 	ldw	r2,-12(fp)
 1006c98:	10800217 	ldw	r2,8(r2)
 1006c9c:	1009883a 	mov	r4,r2
 1006ca0:	1001ab40 	call	1001ab4 <strlen>
 1006ca4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1006ca8:	e0bffd17 	ldw	r2,-12(fp)
 1006cac:	10c00217 	ldw	r3,8(r2)
 1006cb0:	e0bffe17 	ldw	r2,-8(fp)
 1006cb4:	10bfffc4 	addi	r2,r2,-1
 1006cb8:	1885883a 	add	r2,r3,r2
 1006cbc:	10800003 	ldbu	r2,0(r2)
 1006cc0:	10803fcc 	andi	r2,r2,255
 1006cc4:	1080201c 	xori	r2,r2,128
 1006cc8:	10bfe004 	addi	r2,r2,-128
 1006ccc:	10800bd8 	cmpnei	r2,r2,47
 1006cd0:	1000031e 	bne	r2,zero,1006ce0 <alt_find_file+0x6c>
    {
      len -= 1;
 1006cd4:	e0bffe17 	ldw	r2,-8(fp)
 1006cd8:	10bfffc4 	addi	r2,r2,-1
 1006cdc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1006ce0:	e0bffe17 	ldw	r2,-8(fp)
 1006ce4:	e0ffff17 	ldw	r3,-4(fp)
 1006ce8:	1885883a 	add	r2,r3,r2
 1006cec:	10800003 	ldbu	r2,0(r2)
 1006cf0:	10803fcc 	andi	r2,r2,255
 1006cf4:	1080201c 	xori	r2,r2,128
 1006cf8:	10bfe004 	addi	r2,r2,-128
 1006cfc:	10800be0 	cmpeqi	r2,r2,47
 1006d00:	1000081e 	bne	r2,zero,1006d24 <alt_find_file+0xb0>
 1006d04:	e0bffe17 	ldw	r2,-8(fp)
 1006d08:	e0ffff17 	ldw	r3,-4(fp)
 1006d0c:	1885883a 	add	r2,r3,r2
 1006d10:	10800003 	ldbu	r2,0(r2)
 1006d14:	10803fcc 	andi	r2,r2,255
 1006d18:	1080201c 	xori	r2,r2,128
 1006d1c:	10bfe004 	addi	r2,r2,-128
 1006d20:	10000a1e 	bne	r2,zero,1006d4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 1006d24:	e0bffd17 	ldw	r2,-12(fp)
 1006d28:	10800217 	ldw	r2,8(r2)
 1006d2c:	e0fffe17 	ldw	r3,-8(fp)
 1006d30:	180d883a 	mov	r6,r3
 1006d34:	e17fff17 	ldw	r5,-4(fp)
 1006d38:	1009883a 	mov	r4,r2
 1006d3c:	1006f980 	call	1006f98 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1006d40:	1000021e 	bne	r2,zero,1006d4c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1006d44:	e0bffd17 	ldw	r2,-12(fp)
 1006d48:	00000706 	br	1006d68 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 1006d4c:	e0bffd17 	ldw	r2,-12(fp)
 1006d50:	10800017 	ldw	r2,0(r2)
 1006d54:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1006d58:	e0fffd17 	ldw	r3,-12(fp)
 1006d5c:	d0a00604 	addi	r2,gp,-32744
 1006d60:	18bfcc1e 	bne	r3,r2,1006c94 <alt_find_file+0x20>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1006d64:	0005883a 	mov	r2,zero
}
 1006d68:	e037883a 	mov	sp,fp
 1006d6c:	dfc00117 	ldw	ra,4(sp)
 1006d70:	df000017 	ldw	fp,0(sp)
 1006d74:	dec00204 	addi	sp,sp,8
 1006d78:	f800283a 	ret

01006d7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1006d7c:	defffc04 	addi	sp,sp,-16
 1006d80:	df000315 	stw	fp,12(sp)
 1006d84:	df000304 	addi	fp,sp,12
 1006d88:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1006d8c:	00bffa04 	movi	r2,-24
 1006d90:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1006d94:	e03ffd15 	stw	zero,-12(fp)
 1006d98:	00001906 	br	1006e00 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 1006d9c:	00804074 	movhi	r2,257
 1006da0:	10a07004 	addi	r2,r2,-32320
 1006da4:	e0fffd17 	ldw	r3,-12(fp)
 1006da8:	18c00324 	muli	r3,r3,12
 1006dac:	10c5883a 	add	r2,r2,r3
 1006db0:	10800017 	ldw	r2,0(r2)
 1006db4:	10000f1e 	bne	r2,zero,1006df4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 1006db8:	00804074 	movhi	r2,257
 1006dbc:	10a07004 	addi	r2,r2,-32320
 1006dc0:	e0fffd17 	ldw	r3,-12(fp)
 1006dc4:	18c00324 	muli	r3,r3,12
 1006dc8:	10c5883a 	add	r2,r2,r3
 1006dcc:	e0ffff17 	ldw	r3,-4(fp)
 1006dd0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 1006dd4:	d0e00a17 	ldw	r3,-32728(gp)
 1006dd8:	e0bffd17 	ldw	r2,-12(fp)
 1006ddc:	1880020e 	bge	r3,r2,1006de8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 1006de0:	e0bffd17 	ldw	r2,-12(fp)
 1006de4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 1006de8:	e0bffd17 	ldw	r2,-12(fp)
 1006dec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 1006df0:	00000606 	br	1006e0c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1006df4:	e0bffd17 	ldw	r2,-12(fp)
 1006df8:	10800044 	addi	r2,r2,1
 1006dfc:	e0bffd15 	stw	r2,-12(fp)
 1006e00:	e0bffd17 	ldw	r2,-12(fp)
 1006e04:	10800810 	cmplti	r2,r2,32
 1006e08:	103fe41e 	bne	r2,zero,1006d9c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1006e0c:	e0bffe17 	ldw	r2,-8(fp)
}
 1006e10:	e037883a 	mov	sp,fp
 1006e14:	df000017 	ldw	fp,0(sp)
 1006e18:	dec00104 	addi	sp,sp,4
 1006e1c:	f800283a 	ret

01006e20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1006e20:	defffb04 	addi	sp,sp,-20
 1006e24:	df000415 	stw	fp,16(sp)
 1006e28:	df000404 	addi	fp,sp,16
 1006e2c:	e13ffe15 	stw	r4,-8(fp)
 1006e30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1006e34:	e0bfff17 	ldw	r2,-4(fp)
 1006e38:	10840070 	cmpltui	r2,r2,4097
 1006e3c:	1000021e 	bne	r2,zero,1006e48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1006e40:	00840004 	movi	r2,4096
 1006e44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1006e48:	e0fffe17 	ldw	r3,-8(fp)
 1006e4c:	e0bfff17 	ldw	r2,-4(fp)
 1006e50:	1885883a 	add	r2,r3,r2
 1006e54:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1006e58:	e0bffe17 	ldw	r2,-8(fp)
 1006e5c:	e0bffc15 	stw	r2,-16(fp)
 1006e60:	00000506 	br	1006e78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1006e64:	e0bffc17 	ldw	r2,-16(fp)
 1006e68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1006e6c:	e0bffc17 	ldw	r2,-16(fp)
 1006e70:	10800804 	addi	r2,r2,32
 1006e74:	e0bffc15 	stw	r2,-16(fp)
 1006e78:	e0fffc17 	ldw	r3,-16(fp)
 1006e7c:	e0bffd17 	ldw	r2,-12(fp)
 1006e80:	18bff836 	bltu	r3,r2,1006e64 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1006e84:	e0bffe17 	ldw	r2,-8(fp)
 1006e88:	108007cc 	andi	r2,r2,31
 1006e8c:	10000226 	beq	r2,zero,1006e98 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1006e90:	e0bffc17 	ldw	r2,-16(fp)
 1006e94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1006e98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1006e9c:	0001883a 	nop
 1006ea0:	e037883a 	mov	sp,fp
 1006ea4:	df000017 	ldw	fp,0(sp)
 1006ea8:	dec00104 	addi	sp,sp,4
 1006eac:	f800283a 	ret

01006eb0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 1006eb0:	defffe04 	addi	sp,sp,-8
 1006eb4:	df000115 	stw	fp,4(sp)
 1006eb8:	df000104 	addi	fp,sp,4
 1006ebc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1006ec0:	e0bfff17 	ldw	r2,-4(fp)
 1006ec4:	10bffe84 	addi	r2,r2,-6
 1006ec8:	10c00428 	cmpgeui	r3,r2,16
 1006ecc:	18001a1e 	bne	r3,zero,1006f38 <alt_exception_cause_generated_bad_addr+0x88>
 1006ed0:	100690ba 	slli	r3,r2,2
 1006ed4:	00804034 	movhi	r2,256
 1006ed8:	109bba04 	addi	r2,r2,28392
 1006edc:	1885883a 	add	r2,r3,r2
 1006ee0:	10800017 	ldw	r2,0(r2)
 1006ee4:	1000683a 	jmp	r2
 1006ee8:	01006f28 	cmpgeui	r4,zero,444
 1006eec:	01006f28 	cmpgeui	r4,zero,444
 1006ef0:	01006f38 	rdprs	r4,zero,444
 1006ef4:	01006f38 	rdprs	r4,zero,444
 1006ef8:	01006f38 	rdprs	r4,zero,444
 1006efc:	01006f28 	cmpgeui	r4,zero,444
 1006f00:	01006f30 	cmpltui	r4,zero,444
 1006f04:	01006f38 	rdprs	r4,zero,444
 1006f08:	01006f28 	cmpgeui	r4,zero,444
 1006f0c:	01006f28 	cmpgeui	r4,zero,444
 1006f10:	01006f38 	rdprs	r4,zero,444
 1006f14:	01006f28 	cmpgeui	r4,zero,444
 1006f18:	01006f30 	cmpltui	r4,zero,444
 1006f1c:	01006f38 	rdprs	r4,zero,444
 1006f20:	01006f38 	rdprs	r4,zero,444
 1006f24:	01006f28 	cmpgeui	r4,zero,444
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1006f28:	00800044 	movi	r2,1
 1006f2c:	00000306 	br	1006f3c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1006f30:	0005883a 	mov	r2,zero
 1006f34:	00000106 	br	1006f3c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1006f38:	0005883a 	mov	r2,zero
  }
}
 1006f3c:	e037883a 	mov	sp,fp
 1006f40:	df000017 	ldw	fp,0(sp)
 1006f44:	dec00104 	addi	sp,sp,4
 1006f48:	f800283a 	ret

01006f4c <atexit>:
 1006f4c:	200b883a 	mov	r5,r4
 1006f50:	000f883a 	mov	r7,zero
 1006f54:	000d883a 	mov	r6,zero
 1006f58:	0009883a 	mov	r4,zero
 1006f5c:	10070141 	jmpi	1007014 <__register_exitproc>

01006f60 <exit>:
 1006f60:	defffe04 	addi	sp,sp,-8
 1006f64:	000b883a 	mov	r5,zero
 1006f68:	dc000015 	stw	r16,0(sp)
 1006f6c:	dfc00115 	stw	ra,4(sp)
 1006f70:	2021883a 	mov	r16,r4
 1006f74:	100712c0 	call	100712c <__call_exitprocs>
 1006f78:	00804074 	movhi	r2,257
 1006f7c:	10a4ea04 	addi	r2,r2,-27736
 1006f80:	11000017 	ldw	r4,0(r2)
 1006f84:	20800f17 	ldw	r2,60(r4)
 1006f88:	10000126 	beq	r2,zero,1006f90 <exit+0x30>
 1006f8c:	103ee83a 	callr	r2
 1006f90:	8009883a 	mov	r4,r16
 1006f94:	10077e40 	call	10077e4 <_exit>

01006f98 <memcmp>:
 1006f98:	01c000c4 	movi	r7,3
 1006f9c:	3980192e 	bgeu	r7,r6,1007004 <memcmp+0x6c>
 1006fa0:	2144b03a 	or	r2,r4,r5
 1006fa4:	11c4703a 	and	r2,r2,r7
 1006fa8:	10000f26 	beq	r2,zero,1006fe8 <memcmp+0x50>
 1006fac:	20800003 	ldbu	r2,0(r4)
 1006fb0:	28c00003 	ldbu	r3,0(r5)
 1006fb4:	10c0151e 	bne	r2,r3,100700c <memcmp+0x74>
 1006fb8:	31bfff84 	addi	r6,r6,-2
 1006fbc:	01ffffc4 	movi	r7,-1
 1006fc0:	00000406 	br	1006fd4 <memcmp+0x3c>
 1006fc4:	20800003 	ldbu	r2,0(r4)
 1006fc8:	28c00003 	ldbu	r3,0(r5)
 1006fcc:	31bfffc4 	addi	r6,r6,-1
 1006fd0:	10c00e1e 	bne	r2,r3,100700c <memcmp+0x74>
 1006fd4:	21000044 	addi	r4,r4,1
 1006fd8:	29400044 	addi	r5,r5,1
 1006fdc:	31fff91e 	bne	r6,r7,1006fc4 <memcmp+0x2c>
 1006fe0:	0005883a 	mov	r2,zero
 1006fe4:	f800283a 	ret
 1006fe8:	20c00017 	ldw	r3,0(r4)
 1006fec:	28800017 	ldw	r2,0(r5)
 1006ff0:	18bfee1e 	bne	r3,r2,1006fac <memcmp+0x14>
 1006ff4:	31bfff04 	addi	r6,r6,-4
 1006ff8:	21000104 	addi	r4,r4,4
 1006ffc:	29400104 	addi	r5,r5,4
 1007000:	39bff936 	bltu	r7,r6,1006fe8 <memcmp+0x50>
 1007004:	303fe91e 	bne	r6,zero,1006fac <memcmp+0x14>
 1007008:	003ff506 	br	1006fe0 <memcmp+0x48>
 100700c:	10c5c83a 	sub	r2,r2,r3
 1007010:	f800283a 	ret

01007014 <__register_exitproc>:
 1007014:	defffa04 	addi	sp,sp,-24
 1007018:	dc000315 	stw	r16,12(sp)
 100701c:	04004074 	movhi	r16,257
 1007020:	8424ea04 	addi	r16,r16,-27736
 1007024:	80c00017 	ldw	r3,0(r16)
 1007028:	dc400415 	stw	r17,16(sp)
 100702c:	dfc00515 	stw	ra,20(sp)
 1007030:	18805217 	ldw	r2,328(r3)
 1007034:	2023883a 	mov	r17,r4
 1007038:	10003726 	beq	r2,zero,1007118 <__register_exitproc+0x104>
 100703c:	10c00117 	ldw	r3,4(r2)
 1007040:	010007c4 	movi	r4,31
 1007044:	20c00e16 	blt	r4,r3,1007080 <__register_exitproc+0x6c>
 1007048:	1a000044 	addi	r8,r3,1
 100704c:	8800221e 	bne	r17,zero,10070d8 <__register_exitproc+0xc4>
 1007050:	18c00084 	addi	r3,r3,2
 1007054:	18c7883a 	add	r3,r3,r3
 1007058:	18c7883a 	add	r3,r3,r3
 100705c:	12000115 	stw	r8,4(r2)
 1007060:	10c7883a 	add	r3,r2,r3
 1007064:	19400015 	stw	r5,0(r3)
 1007068:	0005883a 	mov	r2,zero
 100706c:	dfc00517 	ldw	ra,20(sp)
 1007070:	dc400417 	ldw	r17,16(sp)
 1007074:	dc000317 	ldw	r16,12(sp)
 1007078:	dec00604 	addi	sp,sp,24
 100707c:	f800283a 	ret
 1007080:	00800034 	movhi	r2,0
 1007084:	10800004 	addi	r2,r2,0
 1007088:	10002626 	beq	r2,zero,1007124 <__register_exitproc+0x110>
 100708c:	01006404 	movi	r4,400
 1007090:	d9400015 	stw	r5,0(sp)
 1007094:	d9800115 	stw	r6,4(sp)
 1007098:	d9c00215 	stw	r7,8(sp)
 100709c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x1000000>
 10070a0:	d9400017 	ldw	r5,0(sp)
 10070a4:	d9800117 	ldw	r6,4(sp)
 10070a8:	d9c00217 	ldw	r7,8(sp)
 10070ac:	10001d26 	beq	r2,zero,1007124 <__register_exitproc+0x110>
 10070b0:	81000017 	ldw	r4,0(r16)
 10070b4:	10000115 	stw	zero,4(r2)
 10070b8:	02000044 	movi	r8,1
 10070bc:	22405217 	ldw	r9,328(r4)
 10070c0:	0007883a 	mov	r3,zero
 10070c4:	12400015 	stw	r9,0(r2)
 10070c8:	20805215 	stw	r2,328(r4)
 10070cc:	10006215 	stw	zero,392(r2)
 10070d0:	10006315 	stw	zero,396(r2)
 10070d4:	883fde26 	beq	r17,zero,1007050 <__register_exitproc+0x3c>
 10070d8:	18c9883a 	add	r4,r3,r3
 10070dc:	2109883a 	add	r4,r4,r4
 10070e0:	1109883a 	add	r4,r2,r4
 10070e4:	21802215 	stw	r6,136(r4)
 10070e8:	01800044 	movi	r6,1
 10070ec:	12406217 	ldw	r9,392(r2)
 10070f0:	30cc983a 	sll	r6,r6,r3
 10070f4:	4992b03a 	or	r9,r9,r6
 10070f8:	12406215 	stw	r9,392(r2)
 10070fc:	21c04215 	stw	r7,264(r4)
 1007100:	01000084 	movi	r4,2
 1007104:	893fd21e 	bne	r17,r4,1007050 <__register_exitproc+0x3c>
 1007108:	11006317 	ldw	r4,396(r2)
 100710c:	218cb03a 	or	r6,r4,r6
 1007110:	11806315 	stw	r6,396(r2)
 1007114:	003fce06 	br	1007050 <__register_exitproc+0x3c>
 1007118:	18805304 	addi	r2,r3,332
 100711c:	18805215 	stw	r2,328(r3)
 1007120:	003fc606 	br	100703c <__register_exitproc+0x28>
 1007124:	00bfffc4 	movi	r2,-1
 1007128:	003fd006 	br	100706c <__register_exitproc+0x58>

0100712c <__call_exitprocs>:
 100712c:	defff504 	addi	sp,sp,-44
 1007130:	df000915 	stw	fp,36(sp)
 1007134:	dd400615 	stw	r21,24(sp)
 1007138:	dc800315 	stw	r18,12(sp)
 100713c:	dfc00a15 	stw	ra,40(sp)
 1007140:	ddc00815 	stw	r23,32(sp)
 1007144:	dd800715 	stw	r22,28(sp)
 1007148:	dd000515 	stw	r20,20(sp)
 100714c:	dcc00415 	stw	r19,16(sp)
 1007150:	dc400215 	stw	r17,8(sp)
 1007154:	dc000115 	stw	r16,4(sp)
 1007158:	d9000015 	stw	r4,0(sp)
 100715c:	2839883a 	mov	fp,r5
 1007160:	04800044 	movi	r18,1
 1007164:	057fffc4 	movi	r21,-1
 1007168:	00804074 	movhi	r2,257
 100716c:	10a4ea04 	addi	r2,r2,-27736
 1007170:	12000017 	ldw	r8,0(r2)
 1007174:	45005217 	ldw	r20,328(r8)
 1007178:	44c05204 	addi	r19,r8,328
 100717c:	a0001c26 	beq	r20,zero,10071f0 <__call_exitprocs+0xc4>
 1007180:	a0800117 	ldw	r2,4(r20)
 1007184:	15ffffc4 	addi	r23,r2,-1
 1007188:	b8000d16 	blt	r23,zero,10071c0 <__call_exitprocs+0x94>
 100718c:	14000044 	addi	r16,r2,1
 1007190:	8421883a 	add	r16,r16,r16
 1007194:	8421883a 	add	r16,r16,r16
 1007198:	84402004 	addi	r17,r16,128
 100719c:	a463883a 	add	r17,r20,r17
 10071a0:	a421883a 	add	r16,r20,r16
 10071a4:	e0001e26 	beq	fp,zero,1007220 <__call_exitprocs+0xf4>
 10071a8:	80804017 	ldw	r2,256(r16)
 10071ac:	e0801c26 	beq	fp,r2,1007220 <__call_exitprocs+0xf4>
 10071b0:	bdffffc4 	addi	r23,r23,-1
 10071b4:	843fff04 	addi	r16,r16,-4
 10071b8:	8c7fff04 	addi	r17,r17,-4
 10071bc:	bd7ff91e 	bne	r23,r21,10071a4 <__call_exitprocs+0x78>
 10071c0:	00800034 	movhi	r2,0
 10071c4:	10800004 	addi	r2,r2,0
 10071c8:	10000926 	beq	r2,zero,10071f0 <__call_exitprocs+0xc4>
 10071cc:	a0800117 	ldw	r2,4(r20)
 10071d0:	1000301e 	bne	r2,zero,1007294 <__call_exitprocs+0x168>
 10071d4:	a0800017 	ldw	r2,0(r20)
 10071d8:	10003226 	beq	r2,zero,10072a4 <__call_exitprocs+0x178>
 10071dc:	a009883a 	mov	r4,r20
 10071e0:	98800015 	stw	r2,0(r19)
 10071e4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x1000000>
 10071e8:	9d000017 	ldw	r20,0(r19)
 10071ec:	a03fe41e 	bne	r20,zero,1007180 <__call_exitprocs+0x54>
 10071f0:	dfc00a17 	ldw	ra,40(sp)
 10071f4:	df000917 	ldw	fp,36(sp)
 10071f8:	ddc00817 	ldw	r23,32(sp)
 10071fc:	dd800717 	ldw	r22,28(sp)
 1007200:	dd400617 	ldw	r21,24(sp)
 1007204:	dd000517 	ldw	r20,20(sp)
 1007208:	dcc00417 	ldw	r19,16(sp)
 100720c:	dc800317 	ldw	r18,12(sp)
 1007210:	dc400217 	ldw	r17,8(sp)
 1007214:	dc000117 	ldw	r16,4(sp)
 1007218:	dec00b04 	addi	sp,sp,44
 100721c:	f800283a 	ret
 1007220:	a0800117 	ldw	r2,4(r20)
 1007224:	80c00017 	ldw	r3,0(r16)
 1007228:	10bfffc4 	addi	r2,r2,-1
 100722c:	15c01426 	beq	r2,r23,1007280 <__call_exitprocs+0x154>
 1007230:	80000015 	stw	zero,0(r16)
 1007234:	183fde26 	beq	r3,zero,10071b0 <__call_exitprocs+0x84>
 1007238:	95c8983a 	sll	r4,r18,r23
 100723c:	a0806217 	ldw	r2,392(r20)
 1007240:	a5800117 	ldw	r22,4(r20)
 1007244:	2084703a 	and	r2,r4,r2
 1007248:	10000b26 	beq	r2,zero,1007278 <__call_exitprocs+0x14c>
 100724c:	a0806317 	ldw	r2,396(r20)
 1007250:	2088703a 	and	r4,r4,r2
 1007254:	20000c1e 	bne	r4,zero,1007288 <__call_exitprocs+0x15c>
 1007258:	89400017 	ldw	r5,0(r17)
 100725c:	d9000017 	ldw	r4,0(sp)
 1007260:	183ee83a 	callr	r3
 1007264:	a0800117 	ldw	r2,4(r20)
 1007268:	15bfbf1e 	bne	r2,r22,1007168 <__call_exitprocs+0x3c>
 100726c:	98800017 	ldw	r2,0(r19)
 1007270:	153fcf26 	beq	r2,r20,10071b0 <__call_exitprocs+0x84>
 1007274:	003fbc06 	br	1007168 <__call_exitprocs+0x3c>
 1007278:	183ee83a 	callr	r3
 100727c:	003ff906 	br	1007264 <__call_exitprocs+0x138>
 1007280:	a5c00115 	stw	r23,4(r20)
 1007284:	003feb06 	br	1007234 <__call_exitprocs+0x108>
 1007288:	89000017 	ldw	r4,0(r17)
 100728c:	183ee83a 	callr	r3
 1007290:	003ff406 	br	1007264 <__call_exitprocs+0x138>
 1007294:	a0800017 	ldw	r2,0(r20)
 1007298:	a027883a 	mov	r19,r20
 100729c:	1029883a 	mov	r20,r2
 10072a0:	003fb606 	br	100717c <__call_exitprocs+0x50>
 10072a4:	0005883a 	mov	r2,zero
 10072a8:	003ffb06 	br	1007298 <__call_exitprocs+0x16c>

010072ac <__umoddi3>:
 10072ac:	defff404 	addi	sp,sp,-48
 10072b0:	df000a15 	stw	fp,40(sp)
 10072b4:	dc400315 	stw	r17,12(sp)
 10072b8:	dc000215 	stw	r16,8(sp)
 10072bc:	dfc00b15 	stw	ra,44(sp)
 10072c0:	ddc00915 	stw	r23,36(sp)
 10072c4:	dd800815 	stw	r22,32(sp)
 10072c8:	dd400715 	stw	r21,28(sp)
 10072cc:	dd000615 	stw	r20,24(sp)
 10072d0:	dcc00515 	stw	r19,20(sp)
 10072d4:	dc800415 	stw	r18,16(sp)
 10072d8:	2021883a 	mov	r16,r4
 10072dc:	2823883a 	mov	r17,r5
 10072e0:	2839883a 	mov	fp,r5
 10072e4:	38003c1e 	bne	r7,zero,10073d8 <__umoddi3+0x12c>
 10072e8:	3027883a 	mov	r19,r6
 10072ec:	2029883a 	mov	r20,r4
 10072f0:	2980512e 	bgeu	r5,r6,1007438 <__umoddi3+0x18c>
 10072f4:	00bfffd4 	movui	r2,65535
 10072f8:	11809a36 	bltu	r2,r6,1007564 <__umoddi3+0x2b8>
 10072fc:	01003fc4 	movi	r4,255
 1007300:	2189803a 	cmpltu	r4,r4,r6
 1007304:	200890fa 	slli	r4,r4,3
 1007308:	3104d83a 	srl	r2,r6,r4
 100730c:	00c04034 	movhi	r3,256
 1007310:	18de0bc4 	addi	r3,r3,30767
 1007314:	1885883a 	add	r2,r3,r2
 1007318:	10c00003 	ldbu	r3,0(r2)
 100731c:	00800804 	movi	r2,32
 1007320:	1909883a 	add	r4,r3,r4
 1007324:	1125c83a 	sub	r18,r2,r4
 1007328:	90000526 	beq	r18,zero,1007340 <__umoddi3+0x94>
 100732c:	8ca2983a 	sll	r17,r17,r18
 1007330:	8108d83a 	srl	r4,r16,r4
 1007334:	34a6983a 	sll	r19,r6,r18
 1007338:	84a8983a 	sll	r20,r16,r18
 100733c:	2478b03a 	or	fp,r4,r17
 1007340:	982ed43a 	srli	r23,r19,16
 1007344:	e009883a 	mov	r4,fp
 1007348:	9dbfffcc 	andi	r22,r19,65535
 100734c:	b80b883a 	mov	r5,r23
 1007350:	100485c0 	call	100485c <__umodsi3>
 1007354:	e009883a 	mov	r4,fp
 1007358:	b80b883a 	mov	r5,r23
 100735c:	102b883a 	mov	r21,r2
 1007360:	10047f80 	call	10047f8 <__udivsi3>
 1007364:	a806943a 	slli	r3,r21,16
 1007368:	a008d43a 	srli	r4,r20,16
 100736c:	b085383a 	mul	r2,r22,r2
 1007370:	20c8b03a 	or	r4,r4,r3
 1007374:	2080032e 	bgeu	r4,r2,1007384 <__umoddi3+0xd8>
 1007378:	24c9883a 	add	r4,r4,r19
 100737c:	24c00136 	bltu	r4,r19,1007384 <__umoddi3+0xd8>
 1007380:	20811036 	bltu	r4,r2,10077c4 <__umoddi3+0x518>
 1007384:	20abc83a 	sub	r21,r4,r2
 1007388:	b80b883a 	mov	r5,r23
 100738c:	a809883a 	mov	r4,r21
 1007390:	100485c0 	call	100485c <__umodsi3>
 1007394:	1023883a 	mov	r17,r2
 1007398:	b80b883a 	mov	r5,r23
 100739c:	a809883a 	mov	r4,r21
 10073a0:	10047f80 	call	10047f8 <__udivsi3>
 10073a4:	8822943a 	slli	r17,r17,16
 10073a8:	b085383a 	mul	r2,r22,r2
 10073ac:	a0ffffcc 	andi	r3,r20,65535
 10073b0:	1c46b03a 	or	r3,r3,r17
 10073b4:	1880042e 	bgeu	r3,r2,10073c8 <__umoddi3+0x11c>
 10073b8:	1cc7883a 	add	r3,r3,r19
 10073bc:	1cc00236 	bltu	r3,r19,10073c8 <__umoddi3+0x11c>
 10073c0:	1880012e 	bgeu	r3,r2,10073c8 <__umoddi3+0x11c>
 10073c4:	1cc7883a 	add	r3,r3,r19
 10073c8:	1885c83a 	sub	r2,r3,r2
 10073cc:	1484d83a 	srl	r2,r2,r18
 10073d0:	0007883a 	mov	r3,zero
 10073d4:	00004f06 	br	1007514 <__umoddi3+0x268>
 10073d8:	29c04c36 	bltu	r5,r7,100750c <__umoddi3+0x260>
 10073dc:	00bfffd4 	movui	r2,65535
 10073e0:	11c0582e 	bgeu	r2,r7,1007544 <__umoddi3+0x298>
 10073e4:	00804034 	movhi	r2,256
 10073e8:	10bfffc4 	addi	r2,r2,-1
 10073ec:	11c0e736 	bltu	r2,r7,100778c <__umoddi3+0x4e0>
 10073f0:	01000404 	movi	r4,16
 10073f4:	3904d83a 	srl	r2,r7,r4
 10073f8:	00c04034 	movhi	r3,256
 10073fc:	18de0bc4 	addi	r3,r3,30767
 1007400:	1885883a 	add	r2,r3,r2
 1007404:	14c00003 	ldbu	r19,0(r2)
 1007408:	00c00804 	movi	r3,32
 100740c:	9927883a 	add	r19,r19,r4
 1007410:	1ce9c83a 	sub	r20,r3,r19
 1007414:	a000581e 	bne	r20,zero,1007578 <__umoddi3+0x2cc>
 1007418:	3c400136 	bltu	r7,r17,1007420 <__umoddi3+0x174>
 100741c:	8180eb36 	bltu	r16,r6,10077cc <__umoddi3+0x520>
 1007420:	8185c83a 	sub	r2,r16,r6
 1007424:	89e3c83a 	sub	r17,r17,r7
 1007428:	8089803a 	cmpltu	r4,r16,r2
 100742c:	8939c83a 	sub	fp,r17,r4
 1007430:	e007883a 	mov	r3,fp
 1007434:	00003706 	br	1007514 <__umoddi3+0x268>
 1007438:	3000041e 	bne	r6,zero,100744c <__umoddi3+0x1a0>
 100743c:	000b883a 	mov	r5,zero
 1007440:	01000044 	movi	r4,1
 1007444:	10047f80 	call	10047f8 <__udivsi3>
 1007448:	1027883a 	mov	r19,r2
 100744c:	00bfffd4 	movui	r2,65535
 1007450:	14c0402e 	bgeu	r2,r19,1007554 <__umoddi3+0x2a8>
 1007454:	00804034 	movhi	r2,256
 1007458:	10bfffc4 	addi	r2,r2,-1
 100745c:	14c0cd36 	bltu	r2,r19,1007794 <__umoddi3+0x4e8>
 1007460:	00800404 	movi	r2,16
 1007464:	9886d83a 	srl	r3,r19,r2
 1007468:	01004034 	movhi	r4,256
 100746c:	211e0bc4 	addi	r4,r4,30767
 1007470:	20c7883a 	add	r3,r4,r3
 1007474:	18c00003 	ldbu	r3,0(r3)
 1007478:	1887883a 	add	r3,r3,r2
 100747c:	00800804 	movi	r2,32
 1007480:	10e5c83a 	sub	r18,r2,r3
 1007484:	9000901e 	bne	r18,zero,10076c8 <__umoddi3+0x41c>
 1007488:	982cd43a 	srli	r22,r19,16
 100748c:	8ce3c83a 	sub	r17,r17,r19
 1007490:	9d7fffcc 	andi	r21,r19,65535
 1007494:	b00b883a 	mov	r5,r22
 1007498:	8809883a 	mov	r4,r17
 100749c:	100485c0 	call	100485c <__umodsi3>
 10074a0:	8809883a 	mov	r4,r17
 10074a4:	b00b883a 	mov	r5,r22
 10074a8:	1021883a 	mov	r16,r2
 10074ac:	10047f80 	call	10047f8 <__udivsi3>
 10074b0:	8006943a 	slli	r3,r16,16
 10074b4:	a008d43a 	srli	r4,r20,16
 10074b8:	1545383a 	mul	r2,r2,r21
 10074bc:	20c8b03a 	or	r4,r4,r3
 10074c0:	2080042e 	bgeu	r4,r2,10074d4 <__umoddi3+0x228>
 10074c4:	24c9883a 	add	r4,r4,r19
 10074c8:	24c00236 	bltu	r4,r19,10074d4 <__umoddi3+0x228>
 10074cc:	2080012e 	bgeu	r4,r2,10074d4 <__umoddi3+0x228>
 10074d0:	24c9883a 	add	r4,r4,r19
 10074d4:	20a1c83a 	sub	r16,r4,r2
 10074d8:	b00b883a 	mov	r5,r22
 10074dc:	8009883a 	mov	r4,r16
 10074e0:	100485c0 	call	100485c <__umodsi3>
 10074e4:	1023883a 	mov	r17,r2
 10074e8:	b00b883a 	mov	r5,r22
 10074ec:	8009883a 	mov	r4,r16
 10074f0:	10047f80 	call	10047f8 <__udivsi3>
 10074f4:	8822943a 	slli	r17,r17,16
 10074f8:	1545383a 	mul	r2,r2,r21
 10074fc:	a53fffcc 	andi	r20,r20,65535
 1007500:	a446b03a 	or	r3,r20,r17
 1007504:	18bfb02e 	bgeu	r3,r2,10073c8 <__umoddi3+0x11c>
 1007508:	003fab06 	br	10073b8 <__umoddi3+0x10c>
 100750c:	2005883a 	mov	r2,r4
 1007510:	2807883a 	mov	r3,r5
 1007514:	dfc00b17 	ldw	ra,44(sp)
 1007518:	df000a17 	ldw	fp,40(sp)
 100751c:	ddc00917 	ldw	r23,36(sp)
 1007520:	dd800817 	ldw	r22,32(sp)
 1007524:	dd400717 	ldw	r21,28(sp)
 1007528:	dd000617 	ldw	r20,24(sp)
 100752c:	dcc00517 	ldw	r19,20(sp)
 1007530:	dc800417 	ldw	r18,16(sp)
 1007534:	dc400317 	ldw	r17,12(sp)
 1007538:	dc000217 	ldw	r16,8(sp)
 100753c:	dec00c04 	addi	sp,sp,48
 1007540:	f800283a 	ret
 1007544:	04c03fc4 	movi	r19,255
 1007548:	99c9803a 	cmpltu	r4,r19,r7
 100754c:	200890fa 	slli	r4,r4,3
 1007550:	003fa806 	br	10073f4 <__umoddi3+0x148>
 1007554:	00803fc4 	movi	r2,255
 1007558:	14c5803a 	cmpltu	r2,r2,r19
 100755c:	100490fa 	slli	r2,r2,3
 1007560:	003fc006 	br	1007464 <__umoddi3+0x1b8>
 1007564:	00804034 	movhi	r2,256
 1007568:	10bfffc4 	addi	r2,r2,-1
 100756c:	11808b36 	bltu	r2,r6,100779c <__umoddi3+0x4f0>
 1007570:	01000404 	movi	r4,16
 1007574:	003f6406 	br	1007308 <__umoddi3+0x5c>
 1007578:	34c4d83a 	srl	r2,r6,r19
 100757c:	3d0e983a 	sll	r7,r7,r20
 1007580:	8cf8d83a 	srl	fp,r17,r19
 1007584:	8d10983a 	sll	r8,r17,r20
 1007588:	38aab03a 	or	r21,r7,r2
 100758c:	a82cd43a 	srli	r22,r21,16
 1007590:	84e2d83a 	srl	r17,r16,r19
 1007594:	e009883a 	mov	r4,fp
 1007598:	b00b883a 	mov	r5,r22
 100759c:	8a22b03a 	or	r17,r17,r8
 10075a0:	3524983a 	sll	r18,r6,r20
 10075a4:	100485c0 	call	100485c <__umodsi3>
 10075a8:	e009883a 	mov	r4,fp
 10075ac:	b00b883a 	mov	r5,r22
 10075b0:	102f883a 	mov	r23,r2
 10075b4:	10047f80 	call	10047f8 <__udivsi3>
 10075b8:	100d883a 	mov	r6,r2
 10075bc:	b808943a 	slli	r4,r23,16
 10075c0:	aa3fffcc 	andi	r8,r21,65535
 10075c4:	8804d43a 	srli	r2,r17,16
 10075c8:	41af383a 	mul	r23,r8,r6
 10075cc:	8520983a 	sll	r16,r16,r20
 10075d0:	1104b03a 	or	r2,r2,r4
 10075d4:	15c0042e 	bgeu	r2,r23,10075e8 <__umoddi3+0x33c>
 10075d8:	1545883a 	add	r2,r2,r21
 10075dc:	30ffffc4 	addi	r3,r6,-1
 10075e0:	1540742e 	bgeu	r2,r21,10077b4 <__umoddi3+0x508>
 10075e4:	180d883a 	mov	r6,r3
 10075e8:	15efc83a 	sub	r23,r2,r23
 10075ec:	b00b883a 	mov	r5,r22
 10075f0:	b809883a 	mov	r4,r23
 10075f4:	d9800115 	stw	r6,4(sp)
 10075f8:	da000015 	stw	r8,0(sp)
 10075fc:	100485c0 	call	100485c <__umodsi3>
 1007600:	b00b883a 	mov	r5,r22
 1007604:	b809883a 	mov	r4,r23
 1007608:	1039883a 	mov	fp,r2
 100760c:	10047f80 	call	10047f8 <__udivsi3>
 1007610:	da000017 	ldw	r8,0(sp)
 1007614:	e038943a 	slli	fp,fp,16
 1007618:	100b883a 	mov	r5,r2
 100761c:	4089383a 	mul	r4,r8,r2
 1007620:	8a3fffcc 	andi	r8,r17,65535
 1007624:	4710b03a 	or	r8,r8,fp
 1007628:	d9800117 	ldw	r6,4(sp)
 100762c:	4100042e 	bgeu	r8,r4,1007640 <__umoddi3+0x394>
 1007630:	4551883a 	add	r8,r8,r21
 1007634:	10bfffc4 	addi	r2,r2,-1
 1007638:	45405a2e 	bgeu	r8,r21,10077a4 <__umoddi3+0x4f8>
 100763c:	100b883a 	mov	r5,r2
 1007640:	300c943a 	slli	r6,r6,16
 1007644:	91ffffcc 	andi	r7,r18,65535
 1007648:	9004d43a 	srli	r2,r18,16
 100764c:	314cb03a 	or	r6,r6,r5
 1007650:	317fffcc 	andi	r5,r6,65535
 1007654:	300cd43a 	srli	r6,r6,16
 1007658:	29d3383a 	mul	r9,r5,r7
 100765c:	288b383a 	mul	r5,r5,r2
 1007660:	31cf383a 	mul	r7,r6,r7
 1007664:	4806d43a 	srli	r3,r9,16
 1007668:	4111c83a 	sub	r8,r8,r4
 100766c:	29cb883a 	add	r5,r5,r7
 1007670:	194b883a 	add	r5,r3,r5
 1007674:	3085383a 	mul	r2,r6,r2
 1007678:	29c0022e 	bgeu	r5,r7,1007684 <__umoddi3+0x3d8>
 100767c:	00c00074 	movhi	r3,1
 1007680:	10c5883a 	add	r2,r2,r3
 1007684:	2808d43a 	srli	r4,r5,16
 1007688:	280a943a 	slli	r5,r5,16
 100768c:	4a7fffcc 	andi	r9,r9,65535
 1007690:	2085883a 	add	r2,r4,r2
 1007694:	2a4b883a 	add	r5,r5,r9
 1007698:	40803636 	bltu	r8,r2,1007774 <__umoddi3+0x4c8>
 100769c:	40804d26 	beq	r8,r2,10077d4 <__umoddi3+0x528>
 10076a0:	4089c83a 	sub	r4,r8,r2
 10076a4:	280f883a 	mov	r7,r5
 10076a8:	81cfc83a 	sub	r7,r16,r7
 10076ac:	81c7803a 	cmpltu	r3,r16,r7
 10076b0:	20c7c83a 	sub	r3,r4,r3
 10076b4:	1cc4983a 	sll	r2,r3,r19
 10076b8:	3d0ed83a 	srl	r7,r7,r20
 10076bc:	1d06d83a 	srl	r3,r3,r20
 10076c0:	11c4b03a 	or	r2,r2,r7
 10076c4:	003f9306 	br	1007514 <__umoddi3+0x268>
 10076c8:	9ca6983a 	sll	r19,r19,r18
 10076cc:	88e8d83a 	srl	r20,r17,r3
 10076d0:	80c4d83a 	srl	r2,r16,r3
 10076d4:	982cd43a 	srli	r22,r19,16
 10076d8:	8ca2983a 	sll	r17,r17,r18
 10076dc:	a009883a 	mov	r4,r20
 10076e0:	b00b883a 	mov	r5,r22
 10076e4:	1478b03a 	or	fp,r2,r17
 10076e8:	100485c0 	call	100485c <__umodsi3>
 10076ec:	a009883a 	mov	r4,r20
 10076f0:	b00b883a 	mov	r5,r22
 10076f4:	1023883a 	mov	r17,r2
 10076f8:	10047f80 	call	10047f8 <__udivsi3>
 10076fc:	9d7fffcc 	andi	r21,r19,65535
 1007700:	880a943a 	slli	r5,r17,16
 1007704:	e008d43a 	srli	r4,fp,16
 1007708:	a885383a 	mul	r2,r21,r2
 100770c:	84a8983a 	sll	r20,r16,r18
 1007710:	2148b03a 	or	r4,r4,r5
 1007714:	2080042e 	bgeu	r4,r2,1007728 <__umoddi3+0x47c>
 1007718:	24c9883a 	add	r4,r4,r19
 100771c:	24c00236 	bltu	r4,r19,1007728 <__umoddi3+0x47c>
 1007720:	2080012e 	bgeu	r4,r2,1007728 <__umoddi3+0x47c>
 1007724:	24c9883a 	add	r4,r4,r19
 1007728:	20a3c83a 	sub	r17,r4,r2
 100772c:	b00b883a 	mov	r5,r22
 1007730:	8809883a 	mov	r4,r17
 1007734:	100485c0 	call	100485c <__umodsi3>
 1007738:	102f883a 	mov	r23,r2
 100773c:	8809883a 	mov	r4,r17
 1007740:	b00b883a 	mov	r5,r22
 1007744:	10047f80 	call	10047f8 <__udivsi3>
 1007748:	b82e943a 	slli	r23,r23,16
 100774c:	a885383a 	mul	r2,r21,r2
 1007750:	e13fffcc 	andi	r4,fp,65535
 1007754:	25c8b03a 	or	r4,r4,r23
 1007758:	2080042e 	bgeu	r4,r2,100776c <__umoddi3+0x4c0>
 100775c:	24c9883a 	add	r4,r4,r19
 1007760:	24c00236 	bltu	r4,r19,100776c <__umoddi3+0x4c0>
 1007764:	2080012e 	bgeu	r4,r2,100776c <__umoddi3+0x4c0>
 1007768:	24c9883a 	add	r4,r4,r19
 100776c:	20a3c83a 	sub	r17,r4,r2
 1007770:	003f4806 	br	1007494 <__umoddi3+0x1e8>
 1007774:	2c8fc83a 	sub	r7,r5,r18
 1007778:	1545c83a 	sub	r2,r2,r21
 100777c:	29cb803a 	cmpltu	r5,r5,r7
 1007780:	1145c83a 	sub	r2,r2,r5
 1007784:	4089c83a 	sub	r4,r8,r2
 1007788:	003fc706 	br	10076a8 <__umoddi3+0x3fc>
 100778c:	01000604 	movi	r4,24
 1007790:	003f1806 	br	10073f4 <__umoddi3+0x148>
 1007794:	00800604 	movi	r2,24
 1007798:	003f3206 	br	1007464 <__umoddi3+0x1b8>
 100779c:	01000604 	movi	r4,24
 10077a0:	003ed906 	br	1007308 <__umoddi3+0x5c>
 10077a4:	413fa52e 	bgeu	r8,r4,100763c <__umoddi3+0x390>
 10077a8:	297fff84 	addi	r5,r5,-2
 10077ac:	4551883a 	add	r8,r8,r21
 10077b0:	003fa306 	br	1007640 <__umoddi3+0x394>
 10077b4:	15ff8b2e 	bgeu	r2,r23,10075e4 <__umoddi3+0x338>
 10077b8:	31bfff84 	addi	r6,r6,-2
 10077bc:	1545883a 	add	r2,r2,r21
 10077c0:	003f8906 	br	10075e8 <__umoddi3+0x33c>
 10077c4:	24c9883a 	add	r4,r4,r19
 10077c8:	003eee06 	br	1007384 <__umoddi3+0xd8>
 10077cc:	8005883a 	mov	r2,r16
 10077d0:	003f1706 	br	1007430 <__umoddi3+0x184>
 10077d4:	817fe736 	bltu	r16,r5,1007774 <__umoddi3+0x4c8>
 10077d8:	280f883a 	mov	r7,r5
 10077dc:	0009883a 	mov	r4,zero
 10077e0:	003fb106 	br	10076a8 <__umoddi3+0x3fc>

010077e4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 10077e4:	defffd04 	addi	sp,sp,-12
 10077e8:	df000215 	stw	fp,8(sp)
 10077ec:	df000204 	addi	fp,sp,8
 10077f0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 10077f4:	0001883a 	nop
 10077f8:	e0bfff17 	ldw	r2,-4(fp)
 10077fc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 1007800:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1007804:	10000226 	beq	r2,zero,1007810 <_exit+0x2c>
    ALT_SIM_FAIL();
 1007808:	002af070 	cmpltui	zero,zero,43969
 100780c:	00000106 	br	1007814 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1007810:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1007814:	003fff06 	br	1007814 <_exit+0x30>
